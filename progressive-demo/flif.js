(function() {
  var Module = {};


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 100663296;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 39520;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_chance_cpp() } }, { func: function() { __GLOBAL__sub_I_common_cpp() } }, { func: function() { __GLOBAL__sub_I_crc32k_cpp() } }, { func: function() { __GLOBAL__sub_I_polyflif_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });
  

/* memory initializer */ allocate([184,11,0,0,166,12,0,0,24,0,0,0,0,0,0,0,144,11,0,0,186,12,0,0,184,11,0,0,200,12,0,0,24,0,0,0,0,0,0,0,184,11,0,0,59,13,0,0,120,0,0,0,0,0,0,0,184,11,0,0,217,12,0,0,24,0,0,0,0,0,0,0,184,11,0,0,13,13,0,0,96,0,0,0,0,0,0,0,144,11,0,0,23,13,0,0,184,11,0,0,38,13,0,0,96,0,0,0,0,0,0,0,144,11,0,0,94,13,0,0,184,11,0,0,116,13,0,0,120,0,0,0,0,0,0,0,184,11,0,0,190,13,0,0,120,0,0,0,0,0,0,0,184,11,0,0,8,14,0,0,120,0,0,0,0,0,0,0,184,11,0,0,223,13,0,0,96,0,0,0,0,0,0,0,184,11,0,0,242,13,0,0,24,0,0,0,0,0,0,0,184,11,0,0,67,14,0,0,120,0,0,0,0,0,0,0,184,11,0,0,39,14,0,0,24,0,0,0,0,0,0,0,184,11,0,0,176,14,0,0,120,0,0,0,0,0,0,0,184,11,0,0,98,14,0,0,24,0,0,0,0,0,0,0,184,11,0,0,244,14,0,0,120,0,0,0,0,0,0,0,184,11,0,0,228,14,0,0,24,0,0,0,0,0,0,0,184,11,0,0,108,15,0,0,120,0,0,0,0,0,0,0,184,11,0,0,13,15,0,0,24,0,0,0,0,0,0,0,184,11,0,0,34,15,0,0,24,0,0,0,0,0,0,0,184,11,0,0,170,15,0,0,120,0,0,0,0,0,0,0,184,11,0,0,138,15,0,0,24,0,0,0,0,0,0,0,184,11,0,0,218,15,0,0,120,0,0,0,0,0,0,0,184,11,0,0,199,15,0,0,24,0,0,0,0,0,0,0,184,11,0,0,106,28,0,0,176,1,0,0,0,0,0,0,144,11,0,0,215,28,0,0,184,11,0,0,230,28,0,0,176,1,0,0,0,0,0,0,184,11,0,0,181,31,0,0,176,1,0,0,0,0,0,0,184,11,0,0,47,32,0,0,176,1,0,0,0,0,0,0,144,11,0,0,94,34,0,0,64,12,0,0,249,33,0,0,0,0,0,0,1,0,0,0,8,2,0,0,0,0,0,0,144,11,0,0,56,34,0,0,184,11,0,0,222,34,0,0,32,2,0,0,0,0,0,0,64,12,0,0,240,34,0,0,0,0,0,0,2,0,0,0,64,2,0,0,2,0,0,0,72,2,0,0,2,16,0,0,144,11,0,0,55,35,0,0,144,11,0,0,18,35,0,0,36,12,0,0,69,35,0,0,0,0,0,0,16,2,0,0,36,12,0,0,103,35,0,0,1,0,0,0,16,2,0,0,36,12,0,0,130,35,0,0,0,0,0,0,64,2,0,0,36,12,0,0,149,35,0,0,1,0,0,0,64,2,0,0,144,11,0,0,183,37,0,0,144,11,0,0,246,37,0,0,144,11,0,0,52,38,0,0,144,11,0,0,122,38,0,0,144,11,0,0,183,38,0,0,144,11,0,0,214,38,0,0,144,11,0,0,245,38,0,0,144,11,0,0,20,39,0,0,144,11,0,0,51,39,0,0,144,11,0,0,82,39,0,0,144,11,0,0,113,39,0,0,144,11,0,0,174,39,0,0,64,12,0,0,205,39,0,0,0,0,0,0,1,0,0,0,8,2,0,0,0,0,0,0,64,12,0,0,12,40,0,0,0,0,0,0,1,0,0,0,8,2,0,0,0,0,0,0,144,11,0,0,214,52,0,0,184,11,0,0,54,53,0,0,56,3,0,0,0,0,0,0,184,11,0,0,227,52,0,0,72,3,0,0,0,0,0,0,144,11,0,0,4,53,0,0,184,11,0,0,17,53,0,0,40,3,0,0,0,0,0,0,184,11,0,0,39,54,0,0,32,3,0,0,0,0,0,0,184,11,0,0,52,54,0,0,32,3,0,0,0,0,0,0,184,11,0,0,106,54,0,0,56,3,0,0,0,0,0,0,184,11,0,0,70,54,0,0,128,3,0,0,0,0,0,0,184,11,0,0,140,54,0,0,56,3,0,0,0,0,0,0,8,12,0,0,180,54,0,0,8,12,0,0,182,54,0,0,8,12,0,0,185,54,0,0,8,12,0,0,187,54,0,0,8,12,0,0,189,54,0,0,8,12,0,0,191,54,0,0,8,12,0,0,193,54,0,0,8,12,0,0,195,54,0,0,8,12,0,0,197,54,0,0,8,12,0,0,199,54,0,0,8,12,0,0,201,54,0,0,8,12,0,0,203,54,0,0,8,12,0,0,205,54,0,0,8,12,0,0,207,54,0,0,184,11,0,0,209,54,0,0,40,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,24,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,32,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,48,0,0,0,6,0,0,0,7,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,0,0,0,0,64,0,0,0,3,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,80,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,2,0,0,0,12,0,0,0,13,0,0,0,9,0,0,0,10,0,0,0,4,0,0,0,1,0,0,0,11,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,96,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,12,0,0,0,14,0,0,0,12,0,0,0,13,0,0,0,1,0,0,0,1,0,0,0,14,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,104,0,0,0,3,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,15,0,0,0,14,0,0,0,12,0,0,0,15,0,0,0,5,0,0,0,2,0,0,0,14,0,0,0,6,0,0,0,9,0,0,0,0,0,0,0,120,0,0,0,6,0,0,0,16,0,0,0,5,0,0,0,16,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,128,0,0,0,17,0,0,0,18,0,0,0,5,0,0,0,17,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,144,0,0,0,19,0,0,0,20,0,0,0,5,0,0,0,18,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,160,0,0,0,21,0,0,0,22,0,0,0,10,0,0,0,16,0,0,0,7,0,0,0,13,0,0,0,14,0,0,0,11,0,0,0,8,0,0,0,0,0,0,0,176,0,0,0,5,0,0,0,15,0,0,0,12,0,0,0,16,0,0,0,6,0,0,0,12,0,0,0,19,0,0,0,23,0,0,0,24,0,0,0,6,0,0,0,3,0,0,0,25,0,0,0,13,0,0,0,11,0,0,0,0,0,0,0,192,0,0,0,3,0,0,0,26,0,0,0,20,0,0,0,12,0,0,0,13,0,0,0,7,0,0,0,1,0,0,0,21,0,0,0,3,0,0,0,0,0,0,0,208,0,0,0,27,0,0,0,28,0,0,0,14,0,0,0,16,0,0,0,14,0,0,0,17,0,0,0,18,0,0,0,15,0,0,0,22,0,0,0,0,0,0,0,224,0,0,0,3,0,0,0,29,0,0,0,23,0,0,0,15,0,0,0,16,0,0,0,8,0,0,0,1,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,240,0,0,0,30,0,0,0,31,0,0,0,17,0,0,0,16,0,0,0,16,0,0,0,19,0,0,0,20,0,0,0,17,0,0,0,26,0,0,0,0,0,0,0,0,1,0,0,3,0,0,0,32,0,0,0,27,0,0,0,18,0,0,0,19,0,0,0,9,0,0,0,1,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,16,1,0,0,33,0,0,0,34,0,0,0,20,0,0,0,30,0,0,0,7,0,0,0,21,0,0,0,22,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,32,1,0,0,35,0,0,0,36,0,0,0,31,0,0,0,21,0,0,0,22,0,0,0,10,0,0,0,4,0,0,0,32,0,0,0,3,0,0,0,255,0,0,0,254,1,0,0,5,0,0,0,255,0,0,0,0,0,0,0,48,1,0,0,37,0,0,0,38,0,0,0,23,0,0,0,16,0,0,0,7,0,0,0,23,0,0,0,24,0,0,0,18,0,0,0,8,0,0,0,0,0,0,0,64,1,0,0,39,0,0,0,40,0,0,0,33,0,0,0,24,0,0,0,25,0,0,0,1,0,0,0,1,0,0,0,34,0,0,0,3,0,0,0,0,0,0,0,80,1,0,0,41,0,0,0,42,0,0,0,35,0,0,0,26,0,0,0,27,0,0,0,11,0,0,0,1,0,0,0,36,0,0,0,3,0,0,0,0,0,0,0,96,1,0,0,43,0,0,0,44,0,0,0,5,0,0,0,37,0,0,0,7,0,0,0,25,0,0,0,26,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,112,1,0,0,45,0,0,0,46,0,0,0,38,0,0,0,28,0,0,0,29,0,0,0,12,0,0,0,5,0,0,0,39,0,0,0,3,0,0,0,0,0,0,0,128,1,0,0,6,0,0,0,47,0,0,0,30,0,0,0,16,0,0,0,7,0,0,0,7,0,0,0,27,0,0,0,19,0,0,0,8,0,0,0,0,0,0,0,144,1,0,0,3,0,0,0,48,0,0,0,40,0,0,0,31,0,0,0,32,0,0,0,13,0,0,0,1,0,0,0,41,0,0,0,3,0,0,0,255,255,255,255,4,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,10,0,0,0,9,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,11,0,0,0,10,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,1,0,0,20,0,0,0,21,0,0,0,49,0,0,0,50,0,0,0,0,0,0,0,176,1,0,0,1,0,0,0,1,0,0,0,49,0,0,0,51,0,0,0,0,0,0,0,184,1,0,0,22,0,0,0,23,0,0,0,49,0,0,0,52,0,0,0,0,0,0,0,200,1,0,0,24,0,0,0,25,0,0,0,49,0,0,0,53,0,0,0,148,5,0,0,1,0,0,0,148,5,0,0,0,0,0,0,0,0,0,0,216,1,0,0,26,0,0,0,27,0,0,0,49,0,0,0,54,0,0,0,232,1,0,0,240,1,0,0,232,1,0,0,0,0,0,0,16,2,0,0,42,0,0,0,7,0,0,0,1,0,0,0,8,0,0,0,55,0,0,0,56,0,0,0,9,0,0,0,10,0,0,0,57,0,0,0,176,3,0,0,176,3,0,0,240,3,0,0,240,3,0,0,240,3,0,0,176,3,0,0,240,3,0,0,240,3,0,0,240,3,0,0,0,0,0,0,32,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,64,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,80,2,0,0,232,1,0,0,176,3,0,0,16,2,0,0,240,3,0,0,112,2,0,0,240,3,0,0,240,3,0,0,240,3,0,0,20,11,0,0,5,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,29,0,0,0,84,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,40,3,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,30,0,0,0,6,0,0,0,14,0,0,0,11,0,0,0,0,0,0,0,80,3,0,0,58,0,0,0,62,0,0,0,60,0,0,0,61,0,0,0,30,0,0,0,7,0,0,0,15,0,0,0,12,0,0,0,0,0,0,0,96,3,0,0,63,0,0,0,64,0,0,0,44,0,0,0,0,0,0,0,112,3,0,0,65,0,0,0,66,0,0,0,45,0,0,0,0,0,0,0,160,3,0,0,58,0,0,0,67,0,0,0,60,0,0,0,61,0,0,0,31,0,0,0,0,0,0,0,144,3,0,0,58,0,0,0,68,0,0,0,60,0,0,0,61,0,0,0,32,0,0,0,0,0,0,0,32,4,0,0,58,0,0,0,69,0,0,0,60,0,0,0,61,0,0,0,30,0,0,0,8,0,0,0,16,0,0,0,13,0,0,0,108,7,58,7,8,7,214,6,114,6,64,6,64,6,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,232,3,176,4,220,5,214,6,208,7,252,8,240,10,96,9,252,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,49,55,83,116,97,116,105,99,67,111,108,111,114,82,97,110,103,101,115,0,49,49,67,111,108,111,114,82,97,110,103,101,115,0,49,52,68,117,112,67,111,108,111,114,82,97,110,103,101,115,0,49,51,67,111,108,111,114,82,97,110,103,101,115,70,67,0,65,108,108,111,99,97,116,101,100,32,37,117,32,120,32,37,117,32,98,117,102,102,101,114,32,40,37,105,45,98,105,116,41,46,10,0,53,80,108,97,110,101,73,104,69,0,49,50,71,101,110,101,114,97,108,80,108,97,110,101,0,49,51,67,111,110,115,116,97,110,116,80,108,97,110,101,0,91,37,105,93,0,50,49,84,114,97,110,115,102,111,114,109,70,114,97,109,101,67,111,109,98,105,110,101,73,56,66,117,102,102,101,114,73,79,69,0,57,84,114,97,110,115,102,111,114,109,73,56,66,117,102,102,101,114,73,79,69,0,49,55,84,114,97,110,115,102,111,114,109,70,114,97,109,101,68,117,112,73,56,66,117,102,102,101,114,73,79,69,0,10,69,114,114,111,114,58,32,70,82,83,32,116,114,97,110,115,102,111,114,109,58,32,105,110,118,97,108,105,100,32,101,110,100,32,99,111,108,117,109,110,10,0,49,57,84,114,97,110,115,102,111,114,109,70,114,97,109,101,83,104,97,112,101,73,56,66,117,102,102,101,114,73,79,69,0,53,80,108,97,110,101,73,115,69,0,91,0,93,0,44,0,37,105,0,49,57,67,111,108,111,114,82,97,110,103,101,115,80,97,108,101,116,116,101,67,0,49,55,84,114,97,110,115,102,111,114,109,80,97,108,101,116,116,101,67,73,56,66,117,102,102,101,114,73,79,69,0,49,57,67,111,108,111,114,82,97,110,103,101,115,80,97,108,101,116,116,101,65,0,91,37,108,117,93,0,49,55,84,114,97,110,115,102,111,114,109,80,97,108,101,116,116,101,65,73,56,66,117,102,102,101,114,73,79,69,0,49,56,67,111,108,111,114,82,97,110,103,101,115,80,97,108,101,116,116,101,0,115,111,114,116,101,100,0,117,110,115,111,114,116,101,100,0,76,111,97,100,105,110,103,32,37,108,117,32,37,115,32,99,111,108,111,114,115,58,32,0,67,111,108,111,114,40,37,105,44,37,105,44,37,105,41,9,0,49,54,84,114,97,110,115,102,111,114,109,80,97,108,101,116,116,101,73,56,66,117,102,102,101,114,73,79,69,0,67,111,114,114,117,112,116,105,111,110,32,100,101,116,101,99,116,101,100,33,10,0,49,51,67,111,108,111,114,82,97,110,103,101,115,67,66,0,49,49,84,114,97,110,115,102,111,114,109,67,66,73,56,66,117,102,102,101,114,73,79,69,0,49,56,67,111,108,111,114,82,97,110,103,101,115,80,101,114,109,117,116,101,0,50,54,67,111,108,111,114,82,97,110,103,101,115,80,101,114,109,117,116,101,83,117,98,116,114,97,99,116,0,83,117,98,116,114,97,99,116,0,91,37,105,45,62,37,105,93,0,10,78,111,116,32,97,32,118,97,108,105,100,32,112,101,114,109,117,116,97,116,105,111,110,33,10,0,49,54,84,114,97,110,115,102,111,114,109,80,101,114,109,117,116,101,73,56,66,117,102,102,101,114,73,79,69,0,49,55,67,111,108,111,114,82,97,110,103,101,115,66,111,117,110,100,115,0,91,37,105,58,37,105,46,46,37,105,93,0,49,53,84,114,97,110,115,102,111,114,109,66,111,117,110,100,115,73,56,66,117,102,102,101,114,73,79,69,0,49,54,67,111,108,111,114,82,97,110,103,101,115,89,67,111,67,103,0,49,52,84,114,97,110,115,102,111,114,109,89,67,111,67,103,73,56,66,117,102,102,101,114,73,79,69,0,67,104,97,110,110,101,108,95,67,111,109,112,97,99,116,0,89,67,111,67,103,0,63,63,32,89,67,98,67,114,32,63,63,0,80,101,114,109,117,116,101,80,108,97,110,101,115,0,66,111,117,110,100,115,0,80,97,108,101,116,116,101,0,67,111,108,111,114,95,66,117,99,107,101,116,115,0,63,63,32,68,67,84,32,63,63,0,63,63,32,68,87,84,32,63,63,0,63,63,32,79,116,104,101,114,32,63,63,0,73,110,118,97,108,105,100,32,115,99,97,108,101,32,100,111,119,110,32,102,97,99,116,111,114,58,32,37,105,10,0,67,111,117,108,100,32,110,111,116,32,114,101,97,100,32,104,101,97,100,101,114,32,102,114,111,109,32,102,105,108,101,58,32,37,115,10,0,33,60,97,114,0,99,104,62,10,0,65,114,99,104,105,118,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,97,32,70,76,73,70,32,105,109,97,103,101,10,0,95,95,105,109,97,103,101,46,102,108,105,102,47,0,67,111,114,114,117,112,116,32,97,114,99,104,105,118,101,63,10,0,70,76,73,70,0,37,115,32,105,115,32,110,111,116,32,97,32,70,76,73,70,32,102,105,108,101,10,0,73,110,118,97,108,105,100,32,111,114,32,117,110,107,110,111,119,110,32,70,76,73,70,32,102,111,114,109,97,116,32,98,121,116,101,10,0,73,110,118,97,108,105,100,32,111,114,32,117,110,107,110,111,119,110,32,70,76,73,70,32,101,110,99,111,100,105,110,103,32,109,101,116,104,111,100,10,0,78,111,110,45,105,110,116,101,114,108,97,99,101,100,32,70,76,73,70,32,102,105,108,101,44,32,110,111,32,98,114,101,97,107,112,111,105,110,116,115,32,116,111,32,114,101,112,111,114,116,46,10,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,110,111,110,45,105,110,116,101,114,108,97,99,101,100,32,70,76,73,70,32,102,105,108,101,32,97,116,32,108,111,119,101,114,32,115,99,97,108,101,33,10,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,110,111,110,45,105,110,116,101,114,108,97,99,101,100,32,70,76,73,70,32,102,105,108,101,32,97,116,32,108,111,119,101,114,32,113,117,97,108,105,116,121,33,32,73,103,110,111,114,105,110,103,32,113,117,97,108,105,116,121,46,46,46,10,0,73,110,118,97,108,105,100,32,70,76,73,70,32,104,101,97,100,101,114,32,40,117,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,104,97,110,110,101,108,115,41,10,0,73,110,118,97,108,105,100,32,70,76,73,70,32,104,101,97,100,101,114,32,40,117,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,100,101,112,116,104,41,10,0,73,110,118,97,108,105,100,32,70,76,73,70,32,104,101,97,100,101,114,10,0,105,67,67,80,0,101,88,105,102,0,101,88,109,112,0,82,101,97,100,32,109,101,116,97,100,97,116,97,32,99,104,117,110,107,58,32,37,115,10,0,73,110,118,97,108,105,100,32,70,76,73,70,32,102,105,108,101,46,10,0,73,109,97,103,101,32,100,97,116,97,32,115,116,97,114,116,115,32,97,116,32,111,102,102,115,101,116,32,37,108,105,10,0,68,101,99,111,100,105,110,103,32,37,117,120,37,117,32,105,109,97,103,101,44,32,99,104,97,110,110,101,108,115,58,0,32,91,37,105,93,32,37,105,32,98,112,112,0,32,37,105,44,32,100,101,112,116,104,58,32,56,32,98,105,116,0,32,37,105,44,32,100,101,112,116,104,58,32,49,54,32,98,105,116,0,44,32,102,114,97,109,101,115,58,32,37,105,0,44,32,115,116,111,114,101,32,82,71,66,32,97,116,32,65,61,48,0,10,0,37,115,58,32,0,70,76,73,70,32,105,109,97,103,101,0,70,76,73,70,32,97,110,105,109,97,116,105,111,110,44,32,37,105,32,102,114,97,109,101,115,0,44,32,37,117,120,37,117,44,32,0,56,45,98,105,116,32,0,49,54,45,98,105,116,32,0,37,105,45,98,105,116,32,0,103,114,97,121,115,99,97,108,101,0,82,71,66,0,82,71,66,65,0,44,32,110,111,110,45,105,110,116,101,114,108,97,99,101,100,0,44,32,105,110,116,101,114,108,97,99,101,100,0,67,111,110,116,97,105,110,115,32,109,101,116,97,100,97,116,97,58,32,0,73,67,67,32,99,111,108,111,114,32,112,114,111,102,105,108,101,0,69,120,105,102,0,88,77,80,0,85,110,107,110,111,119,110,58,32,37,115,0,44,32,0,78,101,103,97,116,105,118,101,32,116,97,114,103,101,116,32,100,105,109,101,110,115,105,111,110,63,32,82,101,97,108,108,121,63,10,0,73,110,118,97,108,105,100,32,116,97,114,103,101,116,32,100,105,109,101,110,115,105,111,110,115,46,10,0,68,111,110,39,116,32,117,115,101,32,45,115,32,97,110,100,32,40,45,114,32,111,114,32,45,102,41,32,97,116,32,116,104,101,32,115,97,109,101,32,116,105,109,101,33,32,73,103,110,111,114,105,110,103,32,45,115,46,46,46,10,0,67,97,110,110,111,116,32,100,101,99,111,100,101,32,110,111,110,45,105,110,116,101,114,108,97,99,101,100,32,70,76,73,70,32,102,105,108,101,32,97,116,32,108,111,119,101,114,32,115,99,97,108,101,33,32,73,103,110,111,114,105,110,103,32,114,101,115,105,122,101,32,116,97,114,103,101,116,46,46,46,10,0,68,101,99,111,100,105,110,103,32,100,111,119,110,115,99,97,108,101,100,32,105,109,97,103,101,32,97,116,32,115,99,97,108,101,32,49,58,37,105,32,40,37,105,120,37,105,32,45,62,32,37,105,120,37,105,41,10,0,84,104,105,115,32,105,115,32,103,111,105,110,103,32,116,111,32,116,97,107,101,32,116,111,111,32,109,117,99,104,32,109,101,109,111,114,121,32,40,37,108,108,117,32,62,32,37,108,108,117,41,46,32,65,98,111,114,116,105,110,103,46,10,67,111,109,112,105,108,101,32,119,105,116,104,32,97,32,104,105,103,104,101,114,32,77,65,88,95,73,77,65,71,69,95,66,85,70,70,69,82,95,83,73,90,69,32,105,102,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,100,111,32,116,104,105,115,46,10,0,84,111,111,32,109,97,110,121,32,102,114,97,109,101,115,46,32,65,98,111,114,116,105,110,103,46,10,67,111,109,112,105,108,101,32,119,105,116,104,32,97,32,104,105,103,104,101,114,32,77,65,88,95,70,82,65,77,69,83,32,118,97,108,117,101,32,105,102,32,121,111,117,32,114,101,97,108,108,121,32,119,97,110,116,32,116,111,32,100,111,32,116,104,105,115,46,10,0,78,111,116,32,121,101,116,32,105,109,112,108,101,109,101,110,116,101,100,58,32,110,111,110,45,100,101,102,97,117,108,116,32,98,105,116,99,104,97,110,99,101,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,10,0,84,114,97,110,115,102,111,114,109,115,58,32,0,85,110,101,120,112,101,99,116,101,100,32,102,105,108,101,32,101,110,100,32,119,104,105,108,101,32,114,101,97,100,105,110,103,32,104,101,97,100,101,114,46,32,65,98,111,114,116,105,110,103,46,10,0,10,84,114,97,110,115,102,111,114,109,97,116,105,111,110,32,39,37,115,39,32,105,115,32,105,110,118,97,108,105,100,32,103,105,118,101,110,32,116,104,101,32,112,114,101,118,105,111,117,115,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,115,46,10,67,111,114,114,117,112,116,32,102,105,108,101,63,32,79,114,32,116,114,121,32,117,112,103,114,97,100,105,110,103,32,121,111,117,114,32,70,76,73,70,32,100,101,99,111,100,101,114,63,10,0,10,85,110,107,110,111,119,110,32,116,114,97,110,115,102,111,114,109,97,116,105,111,110,32,39,37,115,39,10,84,114,121,32,117,112,103,114,97,100,105,110,103,32,121,111,117,114,32,70,76,73,70,32,100,101,99,111,100,101,114,63,10,0,84,114,97,110,115,102,111,114,109,97,116,105,111,110,32,39,37,115,39,32,102,97,105,108,101,100,10,84,114,121,32,117,112,103,114,97,100,105,110,103,32,121,111,117,114,32,70,76,73,70,32,100,101,99,111,100,101,114,63,10,0,37,115,0,70,114,97,109,101,95,76,111,111,107,98,97,99,107,0,70,114,97,109,101,95,83,104,97,112,101,0,68,117,112,108,105,99,97,116,101,95,70,114,97,109,101,0,80,97,108,101,116,116,101,95,65,108,112,104,97,0,110,111,110,101,10,0,73,110,118,105,115,105,98,108,101,32,112,105,120,101,108,32,112,114,101,100,105,99,116,111,114,58,32,45,72,37,105,10,0,37,108,117,32,115,117,98,112,105,120,101,108,115,32,100,111,110,101,44,32,37,108,117,32,115,117,98,112,105,120,101,108,115,32,116,111,100,111,44,32,113,117,97,108,105,116,121,32,116,97,114,103,101,116,32,37,105,37,37,10,0,80,108,97,110,101,32,37,105,58,32,37,105,46,46,37,105,10,0,67,111,110,115,116,97,110,116,32,112,108,97,110,101,32,37,105,32,97,116,32,99,111,108,111,114,32,118,97,108,117,101,32,37,105,10,0,84,104,105,115,32,70,76,73,70,32,99,97,110,110,111,116,32,100,101,99,111,100,101,32,62,56,32,98,105,116,32,112,101,114,32,99,104,97,110,110,101,108,46,32,80,108,101,97,115,101,32,99,111,109,112,105,108,101,32,119,105,116,104,32,83,85,80,80,79,82,84,95,72,68,82,46,10,0,13,0,68,101,99,111,100,101,100,32,105,110,112,117,116,32,102,105,108,101,32,37,115,44,32,37,108,105,32,98,121,116,101,115,32,102,111,114,32,37,117,120,37,117,32,112,105,120,101,108,115,32,40,37,46,52,102,98,112,112,41,32,32,32,10,0,68,101,99,111,100,101,100,32,105,110,112,117,116,32,102,105,108,101,32,37,115,44,32,37,108,105,32,98,121,116,101,115,32,102,111,114,32,37,105,32,102,114,97,109,101,115,32,111,102,32,37,117,120,37,117,32,112,105,120,101,108,115,32,40,37,46,52,102,98,112,112,41,32,32,32,10,0,78,111,116,32,99,104,101,99,107,105,110,103,32,99,104,101,99,107,115,117,109,44,32,97,115,32,114,101,113,117,101,115,116,101,100,46,10,0,78,111,116,32,99,104,101,99,107,105,110,103,32,99,104,101,99,107,115,117,109,44,32,112,97,108,101,116,116,101,32,105,109,97,103,101,32,110,111,116,32,100,101,99,111,100,101,100,32,116,111,32,102,117,108,108,32,82,71,66,65,46,10,0,67,111,109,112,117,116,101,100,32,99,104,101,99,107,115,117,109,58,32,37,88,10,0,82,101,97,100,32,99,104,101,99,107,115,117,109,58,32,37,88,10,0,10,67,79,82,82,85,80,84,73,79,78,32,68,69,84,69,67,84,69,68,58,32,99,104,101,99,107,115,117,109,115,32,100,111,110,39,116,32,109,97,116,99,104,32,40,99,111,109,112,117,116,101,100,58,32,37,120,32,118,47,115,32,114,101,97,100,58,32,37,120,41,33,32,40,112,97,114,116,105,97,108,32,102,105,108,101,63,41,10,10,0,67,104,101,99,107,115,117,109,32,118,101,114,105,102,105,101,100,46,10,0,73,109,97,103,101,32,100,111,101,115,32,110,111,116,32,99,111,110,116,97,105,110,32,97,32,99,104,101,99,107,115,117,109,46,10,0,78,111,116,32,99,104,101,99,107,105,110,103,32,99,104,101,99,107,115,117,109,44,32,108,111,115,115,121,32,112,97,114,116,105,97,108,32,100,101,99,111,100,105,110,103,32,119,97,115,32,99,104,111,115,101,110,46,10,0,73,109,97,103,101,32,110,111,116,32,102,117,108,108,121,32,100,101,99,111,100,101,100,46,10,0,70,105,108,101,32,101,110,100,101,100,32,112,114,101,109,97,116,117,114,101,108,121,32,111,114,32,100,101,99,111,100,105,110,103,32,119,97,115,32,105,110,116,101,114,114,117,112,116,101,100,46,10,0,68,111,119,110,115,99,97,108,105,110,103,32,116,111,32,37,105,120,37,105,10,0,78,111,116,32,100,101,99,111,100,105,110,103,32,77,65,78,73,65,67,32,116,114,101,101,32,40,37,105,32,112,105,120,101,108,115,32,100,111,110,101,44,32,104,97,100,32,37,105,32,112,105,120,101,108,115,32,116,111,32,100,111,41,10,0,68,101,99,111,100,101,100,32,104,101,97,100,101,114,32,43,32,114,111,117,103,104,32,100,97,116,97,46,32,68,101,99,111,100,105,110,103,32,77,65,78,73,65,67,32,116,114,101,101,46,10,0,70,105,108,101,32,112,114,111,98,97,98,108,121,32,116,114,117,110,99,97,116,101,100,32,105,110,32,116,104,101,32,109,105,100,100,108,101,32,111,102,32,77,65,78,73,65,67,32,116,114,101,101,32,114,101,112,114,101,115,101,110,116,97,116,105,111,110,46,32,73,110,116,101,114,112,111,108,97,116,105,110,103,46,10,0,68,101,99,111,100,105,110,103,32,100,97,116,97,32,40,115,99,97,110,108,105,110,101,115,41,10,0,68,101,99,111,100,105,110,103,32,100,97,116,97,32,40,105,110,116,101,114,108,97,99,101,100,41,10,0,37,108,117,32,115,117,98,112,105,120,101,108,115,32,100,111,110,101,44,32,37,108,117,32,115,117,98,112,105,120,101,108,115,32,116,111,100,111,44,32,113,117,97,108,105,116,121,32,116,97,114,103,101,116,32,37,105,37,37,32,114,101,97,99,104,101,100,32,40,37,105,37,37,41,10,0,13,37,105,37,37,32,100,111,110,101,32,91,37,105,47,37,105,93,32,68,69,67,91,37,117,120,37,117,93,32,32,32,32,0,50,50,115,99,97,110,108,105,110,101,95,112,108,97,110,101,95,100,101,99,111,100,101,114,73,50,52,70,105,110,97,108,80,114,111,112,101,114,116,121,83,121,109,98,111,108,67,111,100,101,114,73,49,53,83,105,109,112,108,101,66,105,116,67,104,97,110,99,101,49,48,82,97,99,73,110,112,117,116,50,52,73,56,66,117,102,102,101,114,73,79,69,76,105,49,48,69,69,53,80,108,97,110,101,73,104,69,69,0,49,50,80,108,97,110,101,86,105,115,105,116,111,114,0,50,50,115,99,97,110,108,105,110,101,95,112,108,97,110,101,95,100,101,99,111,100,101,114,73,50,52,70,105,110,97,108,80,114,111,112,101,114,116,121,83,121,109,98,111,108,67,111,100,101,114,73,49,53,83,105,109,112,108,101,66,105,116,67,104,97,110,99,101,49,48,82,97,99,73,110,112,117,116,50,52,73,56,66,117,102,102,101,114,73,79,69,76,105,49,48,69,69,49,51,67,111,110,115,116,97,110,116,80,108,97,110,101,69,0,82,101,97,100,32,77,65,78,73,65,67,32,116,114,101,101,32,119,105,116,104,32,37,117,32,105,110,110,101,114,32,110,111,100,101,115,46,10,0,73,110,118,97,108,105,100,32,116,114,101,101,46,32,65,98,111,114,116,105,110,103,32,116,114,101,101,32,100,101,99,111,100,105,110,103,46,10,0,10,73,78,84,69,82,80,79,76,65,84,69,95,82,69,77,65,73,78,73,78,71,91,37,105,44,37,117,120,37,117,93,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,13,73,78,84,69,82,80,79,76,65,84,69,91,37,105,44,37,117,120,37,117,93,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,67,111,114,114,117,112,116,32,102,105,108,101,58,32,110,111,110,45,97,108,112,104,97,32,101,110,99,111,100,101,100,32,98,101,102,111,114,101,32,97,108,112,104,97,44,32,119,104,105,108,101,32,105,110,118,105,115,105,98,108,101,32,112,105,120,101,108,115,32,104,97,118,101,32,117,110,100,101,102,105,110,101,100,32,82,71,66,32,118,97,108,117,101,115,46,32,78,111,116,32,97,108,108,111,119,101,100,46,10,0,67,111,114,114,117,112,116,32,102,105,108,101,58,32,112,105,120,101,108,115,32,101,110,99,111,100,101,100,32,98,101,102,111,114,101,32,102,114,97,109,101,32,108,111,111,107,98,97,99,107,46,32,78,111,116,32,97,108,108,111,119,101,100,46,10,0,67,111,114,114,117,112,116,32,102,105,108,101,58,32,105,110,118,97,108,105,100,32,112,108,97,110,101,47,122,111,111,109,108,101,118,101,108,10,0,49,58,37,105,32,115,99,97,108,101,58,32,37,108,105,32,98,121,116,101,115,10,0,37,108,117,32,115,117,98,112,105,120,101,108,115,32,100,111,110,101,32,40,111,117,116,32,111,102,32,37,108,117,32,115,117,98,112,105,120,101,108,115,32,97,116,32,116,104,105,115,32,115,99,97,108,101,41,44,32,115,99,97,108,101,32,116,97,114,103,101,116,32,49,58,37,105,32,114,101,97,99,104,101,100,10,0,13,37,105,37,37,32,100,111,110,101,32,91,37,105,47,37,105,93,32,68,69,67,91,37,105,44,37,117,120,37,117,93,32,32,0,32,32,32,32,114,101,97,100,32,37,108,105,32,98,121,116,101,115,32,32,32,0,82,111,119,32,37,105,58,32,85,110,101,120,112,101,99,116,101,100,32,102,105,108,101,32,101,110,100,46,32,73,110,116,101,114,112,111,108,97,116,105,111,110,32,102,114,111,109,32,110,111,119,32,111,110,46,10,0,50,50,118,101,114,116,105,99,97,108,95,112,108,97,110,101,95,100,101,99,111,100,101,114,73,50,52,70,105,110,97,108,80,114,111,112,101,114,116,121,83,121,109,98,111,108,67,111,100,101,114,73,49,53,83,105,109,112,108,101,66,105,116,67,104,97,110,99,101,49,48,82,97,99,73,110,112,117,116,50,52,73,56,66,117,102,102,101,114,73,79,69,76,105,49,48,69,69,53,80,108,97,110,101,73,104,69,49,49,67,111,108,111,114,82,97,110,103,101,115,69,0,50,52,104,111,114,105,122,111,110,116,97,108,95,112,108,97,110,101,95,100,101,99,111,100,101,114,73,50,52,70,105,110,97,108,80,114,111,112,101,114,116,121,83,121,109,98,111,108,67,111,100,101,114,73,49,53,83,105,109,112,108,101,66,105,116,67,104,97,110,99,101,49,48,82,97,99,73,110,112,117,116,50,52,73,56,66,117,102,102,101,114,73,79,69,76,105,49,48,69,69,53,80,108,97,110,101,73,104,69,49,49,67,111,108,111,114,82,97,110,103,101,115,69,0,84,104,105,115,32,105,115,32,110,111,116,32,97,32,70,76,73,70,49,54,32,105,109,97,103,101,44,32,98,117,116,32,97,32,109,111,114,101,32,114,101,99,101,110,116,32,70,76,73,70,32,102,105,108,101,46,32,80,108,101,97,115,101,32,117,112,100,97,116,101,32,121,111,117,114,32,70,76,73,70,32,100,101,99,111,100,101,114,46,10,0,87,97,114,110,105,110,103,58,32,69,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,99,104,117,110,107,58,32,37,115,10,0,69,114,114,111,114,58,32,69,110,99,111,117,110,116,101,114,101,100,32,117,110,107,110,111,119,110,32,99,114,105,116,105,99,97,108,32,99,104,117,110,107,58,32,37,115,10,0,73,110,118,97,108,105,100,32,110,117,109,98,101,114,32,101,110,99,111,117,110,116,101,114,101,100,33,10,0,85,110,101,120,112,101,99,116,101,100,32,69,79,83,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,84,79,68,79,0,80,111,108,121,70,108,105,102,0,115,116,97,114,116,67,111,117,110,116,0,115,116,97,114,116,80,101,114,99,101,110,116,0,80,111,108,121,70,108,105,102,87,114,97,112,112,101,114,0,110,111,116,105,102,121,79,110,68,101,115,116,114,117,99,116,105,111,110,0,105,109,112,108,101,109,101,110,116,0,101,120,116,101,110,100,0,105,105,105,105,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,78,83,116,51,95,95,50,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,102,105,110,105,115,104,65,110,105,109,84,120,0,112,117,116,82,111,119,0,105,110,105,116,65,110,105,109,73,109,97,103,101,0,102,105,110,105,115,104,76,111,97,100,105,110,103,0,102,105,110,105,115,104,67,97,110,118,97,115,68,114,97,119,0,115,104,111,119,82,111,119,0,112,114,101,112,97,114,101,67,97,110,118,97,115,0,114,101,97,100,66,117,102,102,101,114,0,98,117,102,71,101,116,83,105,122,101,0,49,53,80,111,108,121,70,108,105,102,87,114,97,112,112,101,114,0,78,49,48,101,109,115,99,114,105,112,116,101,110,55,119,114,97,112,112,101,114,73,56,80,111,108,121,70,108,105,102,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,56,105,110,116,101,114,110,97,108,49,49,87,114,97,112,112,101,114,66,97,115,101,69,0,56,80,111,108,121,70,108,105,102,0,105,105,105,0,80,49,53,80,111,108,121,70,108,105,102,87,114,97,112,112,101,114,0,118,105,105,0,95,95,100,101,115,116,114,117,99,116,0,80,75,49,53,80,111,108,121,70,108,105,102,87,114,97,112,112,101,114,0,105,105,105,105,105,105,0,80,56,80,111,108,121,70,108,105,102,0,118,105,0,118,0,105,105,0,80,75,56,80,111,108,121,70,108,105,102,0,118,111,105,100,0,98,111,111,108,0,115,116,100,58,58,115,116,114,105,110,103,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,115,116,100,58,58,119,115,116,114,105,110,103,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,115,104,111,114,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,105,110,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,56,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,49,54,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,105,110,116,51,50,95,116,62,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,32,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,101,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,100,111,117,98,108,101,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,100,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,102,108,111,97,116,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,102,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,117,110,115,105,103,110,101,100,32,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,109,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,108,111,110,103,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,108,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,106,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,105,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,116,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,115,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,104,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,97,69,69,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,60,99,104,97,114,62,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,73,99,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([69,69,69,0,78,83,116,51,95,95,50,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,100,111,117,98,108,101,0,102,108,111,97,116,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,108,111,110,103,0,117,110,115,105,103,110,101,100,32,105,110,116,0,105,110,116,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,115,104,111,114,116,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,115,105,103,110,101,100,32,99,104,97,114,0,99,104,97,114,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,33,34,118,101,99,116,111,114,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,117,98,117,110,116,117,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,118,101,99,116,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,108,101,110,103,116,104,95,101,114,114,111,114,34,0,47,104,111,109,101,47,117,98,117,110,116,117,47,101,109,115,100,107,95,112,111,114,116,97,98,108,101,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,115,121,115,116,101,109,47,105,110,99,108,117,100,101,47,108,105,98,99,120,120,47,115,116,114,105,110,103,0,95,95,116,104,114,111,119,95,108,101,110,103,116,104,95,101,114,114,111,114,0,33,34,98,97,115,105,99,95,115,116,114,105,110,103,32,111,117,116,95,111,102,95,114,97,110,103,101,34,0,95,95,116,104,114,111,119,95,111,117,116,95,111,102,95,114,97,110,103,101,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,117,110,99,97,117,103,104,116,0,83,116,57,101,120,99,101,112,116,105,111,110,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,118,0,68,110,0,98,0,99,0,104,0,97,0,115,0,116,0,105,0,106,0,108,0,109,0,102,0,100,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  var emval_methodCallers=[];function __emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  
  
  
  function _free() {
  }
  Module["_free"] = _free;function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_lookupTypes(argCount, argTypes, argWireTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
          a[i] = requireRegisteredType(
              HEAP32[(argTypes >> 2) + i],
              "parameter " + i);
      }
      return a;
    }
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function __emval_get_method_caller(argCount, argTypes) {
      var types = __emval_lookupTypes(argCount, argTypes);
  
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
          argsList += (i !== 0 ? ", " : "") + "arg" + i;
          params.push("argType" + i);
          args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody += 
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      return __emval_addMethodCaller(invokerFunction);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAP32[destructorsRef >> 2] = __emval_register(destructors);
      return destructors;
    }
  
  
  var emval_symbols={};function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      return caller(handle, methodName, __emval_allocateDestructors(destructorsRef), args);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
   
  Module["_i64Add"] = _i64Add;
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___divdi3"] = ___divdi3;

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              var ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = asm['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = asm['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = requireFunction(downcastSignature, downcast);
      }
      rawDestructor = requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PureVirtualError=undefined;
  
  function registerInheritedInstance(class_, ptr, instance) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          throwBindingError('Tried to register registered instance: ' + ptr);
      } else {
          registeredInstances[ptr] = instance;
      }
    }
  
  function unregisterInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      if (registeredInstances.hasOwnProperty(ptr)) {
          delete registeredInstances[ptr];
      } else {
          throwBindingError('Tried to unregister unregistered instance: ' + ptr);
      }
    }function __embind_create_inheriting_constructor(constructorName, wrapperType, properties) {
      constructorName = readLatin1String(constructorName);
      wrapperType = requireRegisteredType(wrapperType, 'wrapper');
      properties = requireHandle(properties);
  
      var arraySlice = [].slice;
  
      var registeredClass = wrapperType.registeredClass;
      var wrapperPrototype = registeredClass.instancePrototype;
      var baseClass = registeredClass.baseClass;
      var baseClassPrototype = baseClass.instancePrototype;
      var baseConstructor = registeredClass.baseClass.constructor;
      var ctor = createNamedFunction(constructorName, function() {
          registeredClass.baseClass.pureVirtualFunctions.forEach(function(name) {
              if (this[name] === baseClassPrototype[name]) {
                  throw new PureVirtualError('Pure virtual function ' + name + ' must be implemented in JavaScript');
              }
          }.bind(this));
  
          Object.defineProperty(this, '__parent', {
              value: wrapperPrototype
          });
          this["__construct"].apply(this, arraySlice.call(arguments));
      });
  
      // It's a little nasty that we're modifying the wrapper prototype here.
  
      wrapperPrototype["__construct"] = function __construct() {
          if (this === wrapperPrototype) {
              throwBindingError("Pass correct 'this' to __construct");
          }
  
          var inner = baseConstructor["implement"].apply(
              undefined,
              [this].concat(arraySlice.call(arguments)));
          var $$ = inner.$$;
          inner["notifyOnDestruction"]();
          $$.preservePointerOnDelete = true;
          Object.defineProperties(this, { $$: {
              value: $$
          }});
          registerInheritedInstance(registeredClass, $$.ptr, this);
      };
  
      wrapperPrototype["__destruct"] = function __destruct() {
          if (this === wrapperPrototype) {
              throwBindingError("Pass correct 'this' to __destruct");
          }
  
          unregisterInheritedInstance(registeredClass, this.$$.ptr);
      };
  
      ctor.prototype = Object.create(wrapperPrototype);
      for (var p in properties) {
          ctor.prototype[p] = properties[p];
      }
      return __emval_register(ctor);
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
      
      var fromWireType = function(value) {
          return value;
      };
      
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return value | 0;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

   
  Module["_bitshift64Ashr"] = _bitshift64Ashr;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  var _llvm_ctlz_i32=true;

  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = requireHandle(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }


  
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      var returns = (argTypes[0].name !== "void");
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      rawInvoker,
      fn
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.constructor;
          if (undefined === proto[methodName]) {
              // This is the first function to be registered with this name.
              unboundTypesHandler.argCount = argCount-1;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
              // the function handlers go into an overload table.
              var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
              var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
              if (undefined === proto[methodName].overloadTable) {
                  proto[methodName] = func;
              } else {
                  proto[methodName].overloadTable[argCount-1] = func;
              }
              return [];
          });
          return [];
      });
    }

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    } 
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

  function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___gxx_personality_v0() {
    }

   
  Module["___uremdi3"] = ___uremdi3;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
PureVirtualError = Module['PureVirtualError'] = extendError(Error, 'PureVirtualError');;
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "floatReadValueFromPointer": floatReadValueFromPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "__emval_call_void_method": __emval_call_void_method, "throwInternalError": throwInternalError, "get_first_emval": get_first_emval, "getLiveInheritedInstances": getLiveInheritedInstances, "___assert_fail": ___assert_fail, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "ClassHandle": ClassHandle, "getShiftFromSize": getShiftFromSize, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "runDestructor": runDestructor, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "init_RegisteredPointer": init_RegisteredPointer, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "__embind_create_inheriting_constructor": __embind_create_inheriting_constructor, "flushPendingDeletes": flushPendingDeletes, "makeClassHandle": makeClassHandle, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "__emval_allocateDestructors": __emval_allocateDestructors, "init_ClassHandle": init_ClassHandle, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "ClassHandle_clone": ClassHandle_clone, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "throwBindingError": throwBindingError, "RegisteredClass": RegisteredClass, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "embind_init_charCodes": embind_init_charCodes, "___setErrNo": ___setErrNo, "__embind_register_class_class_function": __embind_register_class_class_function, "__embind_register_bool": __embind_register_bool, "___resumeException": ___resumeException, "createNamedFunction": createNamedFunction, "__embind_register_emval": __embind_register_emval, "__emval_decref": __emval_decref, "_pthread_once": _pthread_once, "init_embind": init_embind, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "__emval_addMethodCaller": __emval_addMethodCaller, "heap32VectorToArray": heap32VectorToArray, "__emval_lookupTypes": __emval_lookupTypes, "__emval_call_method": __emval_call_method, "__emval_run_destructors": __emval_run_destructors, "ClassHandle_delete": ClassHandle_delete, "RegisteredPointer_destructor": RegisteredPointer_destructor, "___syscall6": ___syscall6, "ensureOverloadTable": ensureOverloadTable, "new_": new_, "downcastPointer": downcastPointer, "replacePublicSymbol": replacePublicSymbol, "__embind_register_class": __embind_register_class, "ClassHandle_deleteLater": ClassHandle_deleteLater, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "ClassHandle_isDeleted": ClassHandle_isDeleted, "__embind_register_integer": __embind_register_integer, "___cxa_allocate_exception": ___cxa_allocate_exception, "_embind_repr": _embind_repr, "_pthread_getspecific": _pthread_getspecific, "__embind_register_class_function": __embind_register_class_function, "throwUnboundTypeError": throwUnboundTypeError, "craftInvokerFunction": craftInvokerFunction, "runDestructors": runDestructors, "requireRegisteredType": requireRegisteredType, "makeLegalFunctionName": makeLegalFunctionName, "_pthread_key_create": _pthread_key_create, "upcastPointer": upcastPointer, "init_emval": init_emval, "getInheritedInstance": getInheritedInstance, "shallowCopyInternalPointer": shallowCopyInternalPointer, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "_abort": _abort, "requireHandle": requireHandle, "getTypeName": getTypeName, "exposePublicSymbol": exposePublicSymbol, "__embind_register_std_string": __embind_register_std_string, "___cxa_pure_virtual": ___cxa_pure_virtual, "__emval_get_method_caller": __emval_get_method_caller, "__embind_register_memory_view": __embind_register_memory_view, "registerInheritedInstance": registerInheritedInstance, "setDelayFunction": setDelayFunction, "___gxx_personality_v0": ___gxx_personality_v0, "extendError": extendError, "__embind_register_void": __embind_register_void, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__emval_register": __emval_register, "__embind_register_std_wstring": __embind_register_std_wstring, "getStringOrSymbol": getStringOrSymbol, "__emval_incref": __emval_incref, "RegisteredPointer": RegisteredPointer, "readLatin1String": readLatin1String, "getBasestPointer": getBasestPointer, "getInheritedInstanceCount": getInheritedInstanceCount, "__embind_register_float": __embind_register_float, "integerReadValueFromPointer": integerReadValueFromPointer, "_pthread_setspecific": _pthread_setspecific, "genericPointerToWireType": genericPointerToWireType, "registerType": registerType, "___cxa_throw": ___cxa_throw, "unregisterInheritedInstance": unregisterInheritedInstance, "count_emval_handles": count_emval_handles, "requireFunction": requireFunction, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var __emval_call_void_method=env.__emval_call_void_method;
  var throwInternalError=env.throwInternalError;
  var get_first_emval=env.get_first_emval;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var ___assert_fail=env.___assert_fail;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ClassHandle=env.ClassHandle;
  var getShiftFromSize=env.getShiftFromSize;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var runDestructor=env.runDestructor;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var __embind_create_inheriting_constructor=env.__embind_create_inheriting_constructor;
  var flushPendingDeletes=env.flushPendingDeletes;
  var makeClassHandle=env.makeClassHandle;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var __emval_allocateDestructors=env.__emval_allocateDestructors;
  var init_ClassHandle=env.init_ClassHandle;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var throwBindingError=env.throwBindingError;
  var RegisteredClass=env.RegisteredClass;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ___setErrNo=env.___setErrNo;
  var __embind_register_class_class_function=env.__embind_register_class_class_function;
  var __embind_register_bool=env.__embind_register_bool;
  var ___resumeException=env.___resumeException;
  var createNamedFunction=env.createNamedFunction;
  var __embind_register_emval=env.__embind_register_emval;
  var __emval_decref=env.__emval_decref;
  var _pthread_once=env._pthread_once;
  var init_embind=env.init_embind;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var __emval_addMethodCaller=env.__emval_addMethodCaller;
  var heap32VectorToArray=env.heap32VectorToArray;
  var __emval_lookupTypes=env.__emval_lookupTypes;
  var __emval_call_method=env.__emval_call_method;
  var __emval_run_destructors=env.__emval_run_destructors;
  var ClassHandle_delete=env.ClassHandle_delete;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var ___syscall6=env.___syscall6;
  var ensureOverloadTable=env.ensureOverloadTable;
  var new_=env.new_;
  var downcastPointer=env.downcastPointer;
  var replacePublicSymbol=env.replacePublicSymbol;
  var __embind_register_class=env.__embind_register_class;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var __embind_register_integer=env.__embind_register_integer;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _embind_repr=env._embind_repr;
  var _pthread_getspecific=env._pthread_getspecific;
  var __embind_register_class_function=env.__embind_register_class_function;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var craftInvokerFunction=env.craftInvokerFunction;
  var runDestructors=env.runDestructors;
  var requireRegisteredType=env.requireRegisteredType;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var _pthread_key_create=env._pthread_key_create;
  var upcastPointer=env.upcastPointer;
  var init_emval=env.init_emval;
  var getInheritedInstance=env.getInheritedInstance;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var _abort=env._abort;
  var requireHandle=env.requireHandle;
  var getTypeName=env.getTypeName;
  var exposePublicSymbol=env.exposePublicSymbol;
  var __embind_register_std_string=env.__embind_register_std_string;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var __emval_get_method_caller=env.__emval_get_method_caller;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var registerInheritedInstance=env.registerInheritedInstance;
  var setDelayFunction=env.setDelayFunction;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var extendError=env.extendError;
  var __embind_register_void=env.__embind_register_void;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __emval_register=env.__emval_register;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var getStringOrSymbol=env.getStringOrSymbol;
  var __emval_incref=env.__emval_incref;
  var RegisteredPointer=env.RegisteredPointer;
  var readLatin1String=env.readLatin1String;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var __embind_register_float=env.__embind_register_float;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var _pthread_setspecific=env._pthread_setspecific;
  var genericPointerToWireType=env.genericPointerToWireType;
  var registerType=env.registerType;
  var ___cxa_throw=env.___cxa_throw;
  var unregisterInheritedInstance=env.unregisterInheritedInstance;
  var count_emval_handles=env.count_emval_handles;
  var requireFunction=env.requireFunction;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z11build_tablePtS_jjj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$06776 = 0, $$077 = 0, $$172 = 0, $$266 = 0, $$271 = 0, $$70 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond81 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $2 << 1;
 _memset(($0|0),0,($5|0))|0;
 _memset(($1|0),0,($5|0))|0;
 $6 = $2 >>> 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$06776 = 0;$$077 = 0;$8 = -2147483648;$9 = 0;
  while(1) {
   $10 = (___muldi3(($8|0),($9|0),($2|0),0)|0);
   $11 = tempRet0;
   (_i64Add(($10|0),($11|0),-2147483648,0)|0);
   $12 = tempRet0;
   $13 = ($12>>>0)>($$06776>>>0);
   $14 = (($$06776) + 1)|0;
   $$ = $13 ? $12 : $14;
   $notlhs = ($$06776|0)==(0);
   $notrhs = ($$06776>>>0)>=($2>>>0);
   $or$cond$not = $notrhs | $notlhs;
   $15 = ($$>>>0)>($4>>>0);
   $or$cond69 = $or$cond$not | $15;
   if (!($or$cond69)) {
    $16 = (($1) + ($$06776<<1)|0);
    $17 = $$&65535;
    HEAP16[$16>>1] = $17;
   }
   $18 = (_i64Subtract(0,1,($8|0),($9|0))|0);
   $19 = tempRet0;
   $20 = (___muldi3(($18|0),($19|0),($3|0),0)|0);
   $21 = tempRet0;
   $22 = (_i64Add(($20|0),($21|0),-2147483648,0)|0);
   $23 = tempRet0;
   $24 = (_bitshift64Ashr(($22|0),($23|0),32)|0);
   $25 = tempRet0;
   $26 = (_i64Add(($24|0),($25|0),($8|0),($9|0))|0);
   $27 = tempRet0;
   $28 = (($$077) + 1)|0;
   $exitcond81 = ($28|0)==($6|0);
   if ($exitcond81) {
    break;
   } else {
    $$06776 = $$;$$077 = $28;$8 = $26;$9 = $27;
   }
  }
 }
 $29 = (($2) - ($4))|0;
 $30 = ($29>>>0)>($4>>>0);
 if (!($30)) {
  $$172 = $29;
  while(1) {
   $32 = (($1) + ($$172<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = ($33<<16>>16)==(0);
   if ($34) {
    $35 = (___divdi3(($6|0),($$172|0),($2|0),0)|0);
    $36 = tempRet0;
    $37 = (_i64Subtract(0,1,($35|0),($36|0))|0);
    $38 = tempRet0;
    $39 = (___muldi3(($37|0),($38|0),($3|0),0)|0);
    $40 = tempRet0;
    $41 = (_i64Add(($39|0),($40|0),-2147483648,0)|0);
    $42 = tempRet0;
    $43 = (_bitshift64Ashr(($41|0),($42|0),32)|0);
    $44 = tempRet0;
    $45 = (_i64Add(($43|0),($44|0),($35|0),($36|0))|0);
    $46 = tempRet0;
    $47 = (___muldi3(($45|0),($46|0),($2|0),0)|0);
    $48 = tempRet0;
    (_i64Add(($47|0),($48|0),-2147483648,0)|0);
    $49 = tempRet0;
    $50 = ($49>>>0)>($$172>>>0);
    $51 = (($$172) + 1)|0;
    $$70 = $50 ? $49 : $51;
    $52 = ($$70>>>0)>($4>>>0);
    $$266 = $52 ? $4 : $$70;
    $53 = $$266&65535;
    HEAP16[$32>>1] = $53;
   }
   $54 = (($$172) + 1)|0;
   $55 = ($54>>>0)>($4>>>0);
   if ($55) {
    break;
   } else {
    $$172 = $54;
   }
  }
 }
 $31 = ($2>>>0)>(1);
 if ($31) {
  $$271 = 1;
 } else {
  return;
 }
 while(1) {
  $56 = (($2) - ($$271))|0;
  $57 = (($1) + ($56<<1)|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  $60 = (($2) - ($59))|0;
  $61 = $60&65535;
  $62 = (($0) + ($$271<<1)|0);
  HEAP16[$62>>1] = $61;
  $63 = (($$271) + 1)|0;
  $exitcond = ($63|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$271 = $63;
  }
 }
 return;
}
function __ZN10Log4kTableC2Ev($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[$0>>1] = 0;
 $$05 = 1;
 while(1) {
  $2 = (__ZL6log4kfij($$05)|0);
  $3 = (($2) + 32768)|0;
  $4 = $3 >>> 16;
  $5 = $4&65535;
  $6 = (($0) + ($$05<<1)|0);
  HEAP16[$6>>1] = $5;
  $7 = (($$05) + 1)|0;
  $exitcond = ($7|0)==(4097);
  if ($exitcond) {
   break;
  } else {
   $$05 = $7;
  }
 }
 $1 = ((($0)) + 8196|0);
 HEAP32[$1>>2] = 5461;
 return;
}
function __ZL6log4kfij($0) {
 $0 = $0|0;
 var $$$023 = 0, $$023$lcssa = 0, $$0233 = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (Math_clz32(($0|0))|0);
 $2 = ($0|0)<(0);
 $3 = $2 << 31 >> 31;
 $4 = (_bitshift64Shl(($0|0),($3|0),($1|0))|0);
 $5 = tempRet0;
 $6 = Math_imul($1, 357908480)|0;
 $7 = (($6) + 1789673472)|0;
 $8 = $4 & 2147483647;
 $9 = ($8|0)==(0);
 $10 = (0)==(0);
 $11 = $9 & $10;
 if ($11) {
  $$023$lcssa = $7;
  return ($$023$lcssa|0);
 } else {
  $$0233 = $7;$$04 = 357908480;$12 = $4;$13 = $5;
 }
 while(1) {
  $14 = (___muldi3(($12|0),($13|0),($12|0),($13|0))|0);
  $15 = tempRet0;
  $16 = (_i64Add(($14|0),($15|0),1073741824,0)|0);
  $17 = tempRet0;
  $18 = $$04 >>> 1;
  $19 = ($17|0)<(0);
  $20 = (_bitshift64Lshr(($16|0),($17|0),63)|0);
  $21 = tempRet0;
  $22 = (_i64Add(($20|0),($21|0),31,0)|0);
  $23 = tempRet0;
  $24 = (_bitshift64Lshr(($16|0),($17|0),($22|0))|0);
  $25 = tempRet0;
  $26 = $19 ? $18 : 0;
  $$$023 = (($$0233) - ($26))|0;
  $27 = ($$04>>>0)<(4);
  $28 = $24 & 2147483647;
  $29 = ($28|0)==(0);
  $30 = (0)==(0);
  $31 = $29 & $30;
  $or$cond = $31 | $27;
  if ($or$cond) {
   $$023$lcssa = $$$023;
   break;
  } else {
   $$0233 = $$$023;$$04 = $18;$12 = $24;$13 = $25;
  }
 }
 return ($$023$lcssa|0);
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10Log4kTableC2Ev(14120);
 return;
}
function __GLOBAL__sub_I_chance_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __Z9getRangesRK5Image($0) {
 $0 = $0|0;
 var $$01118 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = 0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = (__ZNK5Image9numPlanesEv($0)|0);
 $7 = ($6|0)>(0);
 if (!($7)) {
  $10 = (__Znwj(16)|0);
  __ZN17StaticColorRangesC2ERNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEE($10,$2);
  __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($2);
  STACKTOP = sp;return ($10|0);
 }
 $8 = ((($3)) + 2|0);
 $9 = ((($2)) + 8|0);
 $$01118 = 0;
 while(1) {
  $11 = (__ZNK5Image3minEi($0,$$01118)|0);
  $12 = (__ZNK5Image3maxEi($0,$$01118)|0);
  HEAP16[$3>>1] = $11;
  HEAP16[$8>>1] = $12;
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$9>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if ($15) {
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($1,$2,1);
   $16 = HEAP32[$4>>2]|0;
   $17 = HEAP32[$3>>2]|0;
   HEAP16[$16>>1]=$17&65535;HEAP16[$16+2>>1]=$17>>>16;
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($1);
   $18 = HEAP32[$4>>2]|0;
   $19 = ((($18)) + 4|0);
   HEAP32[$4>>2] = $19;
  } else {
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($2,$3);
  }
  $20 = (($$01118) + 1)|0;
  $21 = (__ZNK5Image9numPlanesEv($0)|0);
  $22 = ($20|0)<($21|0);
  if ($22) {
   $$01118 = $20;
  } else {
   break;
  }
 }
 $10 = (__Znwj(16)|0);
 __ZN17StaticColorRangesC2ERNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEE($10,$2);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return ($10|0);
}
function __ZNK5Image9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK5Image3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP16[$2>>1]|0;
 return ($3|0);
}
function __ZNK5Image3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 30|0);
 $3 = HEAP16[$2>>1]|0;
 return ($3|0);
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferINS_4pairIssEERNS_9allocatorIS2_EEEC2EjjS5_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAPU16[$1>>1]|(HEAPU16[$1+2>>1]<<16);
  HEAP16[$25>>1]=$26&65535;HEAP16[$25+2>>1]=$26>>>16;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_4pairIssEERNS_9allocatorIS2_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN17StaticColorRangesC2ERNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1080);
 $2 = ((($0)) + 4|0);
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEC2ERKS5_($2,$1);
 return;
}
function __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN11ColorRangesC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1124);
 return;
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($0,$10,$11,$8);
 return;
}
function __ZN11ColorRangesD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 2;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<2)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 2;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN17StaticColorRangesD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1080);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($1);
 __ZN11ColorRangesD2Ev($0);
 return;
}
function __ZN17StaticColorRangesD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17StaticColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK17StaticColorRanges9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function __ZNK17StaticColorRanges3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($0)|0);
 $6 = ($5|0)>($1|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP16[$9>>1]|0;
 $$0 = $10;
 return ($$0|0);
}
function __ZNK17StaticColorRanges3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($0)|0);
 $6 = ($5|0)>($1|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + ($1<<2)|0)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $$0 = $10;
 return ($$0|0);
}
function __ZNK11ColorRanges6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 63]($0,$1)|0);
 HEAP16[$3>>1] = $8;
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 63]($0,$1)|0);
 HEAP16[$4>>1] = $12;
 return;
}
function __ZNK11ColorRanges4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiiii[$8 & 31]($0,$1,$2,$3,$4);
 $9 = HEAP16[$3>>1]|0;
 $10 = HEAP16[$4>>1]|0;
 $11 = ($9<<16>>16)>($10<<16>>16);
 if ($11) {
  HEAP16[$4>>1] = $9;
 }
 $12 = HEAP16[$5>>1]|0;
 $13 = HEAP16[$4>>1]|0;
 $14 = ($12<<16>>16)>($13<<16>>16);
 if ($14) {
  HEAP16[$5>>1] = $13;
 }
 $15 = HEAP16[$5>>1]|0;
 $16 = HEAP16[$3>>1]|0;
 $17 = ($15<<16>>16)<($16<<16>>16);
 if (!($17)) {
  return;
 }
 HEAP16[$5>>1] = $16;
 return;
}
function __ZNK11ColorRanges8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK11ColorRanges8previousEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN11ColorRangesD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNSt3__214__split_bufferINS_4pairIssEERNS_9allocatorIS2_EEEC2EjjS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferINS_4pairIssEERNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$6,$11,$6);
 return;
}
function __ZN14DupColorRangesC2EPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1168);
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN14DupColorRangesD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK14DupColorRanges9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK14DupColorRanges3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 return ($7|0);
}
function __ZNK14DupColorRanges3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 return ($7|0);
}
function __ZNK14DupColorRanges6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiii[$9 & 31]($6,$1,$2,$3,$4);
 return;
}
function __ZNK14DupColorRanges4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiiiii[$10 & 15]($7,$1,$2,$3,$4,$5);
 return;
}
function __ZNK14DupColorRanges8isStaticEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK14DupColorRanges8previousEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __Z16create_transformI8BufferIOENSt3__210unique_ptrI9TransformIT_ENS1_14default_deleteIS5_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $$sroa$057$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4102)|0);
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3&255;
 $8 = $4 ? $6 : $7;
 $9 = ($1|0)==($8|0);
 if ($9) {
  $10 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4102,$1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = (__Z11make_uniqueI14TransformYCoCgI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $13 = $12;
   $$sroa$057$0 = $13;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $14 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4134)|0);
 $15 = HEAP8[$2>>0]|0;
 $16 = ($15<<24>>24)<(0);
 $17 = HEAP32[$5>>2]|0;
 $18 = $15&255;
 $19 = $16 ? $17 : $18;
 $20 = ($14|0)==($19|0);
 if ($20) {
  $21 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4134,$14)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = (__Z11make_uniqueI15TransformBoundsI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $24 = $23;
   $$sroa$057$0 = $24;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $25 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4120)|0);
 $26 = HEAP8[$2>>0]|0;
 $27 = ($26<<24>>24)<(0);
 $28 = HEAP32[$5>>2]|0;
 $29 = $26&255;
 $30 = $27 ? $28 : $29;
 $31 = ($25|0)==($30|0);
 if ($31) {
  $32 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4120,$25)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = (__Z11make_uniqueI16TransformPermuteI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $35 = $34;
   $$sroa$057$0 = $35;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $36 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4149)|0);
 $37 = HEAP8[$2>>0]|0;
 $38 = ($37<<24>>24)<(0);
 $39 = HEAP32[$5>>2]|0;
 $40 = $37&255;
 $41 = $38 ? $39 : $40;
 $42 = ($36|0)==($41|0);
 if ($42) {
  $43 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4149,$36)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = (__Z11make_uniqueI11TransformCBI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $46 = $45;
   $$sroa$057$0 = $46;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $47 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4141)|0);
 $48 = HEAP8[$2>>0]|0;
 $49 = ($48<<24>>24)<(0);
 $50 = HEAP32[$5>>2]|0;
 $51 = $48&255;
 $52 = $49 ? $50 : $51;
 $53 = ($47|0)==($52|0);
 if ($53) {
  $54 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4141,$47)|0);
  $55 = ($54|0)==(0);
  if ($55) {
   $56 = (__Z11make_uniqueI16TransformPaletteI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $57 = $56;
   $$sroa$057$0 = $57;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $58 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6067)|0);
 $59 = HEAP8[$2>>0]|0;
 $60 = ($59<<24>>24)<(0);
 $61 = HEAP32[$5>>2]|0;
 $62 = $59&255;
 $63 = $60 ? $61 : $62;
 $64 = ($58|0)==($63|0);
 if ($64) {
  $65 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,6067,$58)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   $67 = (__Z11make_uniqueI17TransformPaletteAI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $68 = $67;
   $$sroa$057$0 = $68;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $69 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4086)|0);
 $70 = HEAP8[$2>>0]|0;
 $71 = ($70<<24>>24)<(0);
 $72 = HEAP32[$5>>2]|0;
 $73 = $70&255;
 $74 = $71 ? $72 : $73;
 $75 = ($69|0)==($74|0);
 if ($75) {
  $76 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,4086,$69)|0);
  $77 = ($76|0)==(0);
  if ($77) {
   $78 = (__Z11make_uniqueI17TransformPaletteCI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $79 = $78;
   $$sroa$057$0 = $79;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $80 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6039)|0);
 $81 = HEAP8[$2>>0]|0;
 $82 = ($81<<24>>24)<(0);
 $83 = HEAP32[$5>>2]|0;
 $84 = $81&255;
 $85 = $82 ? $83 : $84;
 $86 = ($80|0)==($85|0);
 if ($86) {
  $87 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,6039,$80)|0);
  $88 = ($87|0)==(0);
  if ($88) {
   $89 = (__Z11make_uniqueI19TransformFrameShapeI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $90 = $89;
   $$sroa$057$0 = $90;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $91 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6051)|0);
 $92 = HEAP8[$2>>0]|0;
 $93 = ($92<<24>>24)<(0);
 $94 = HEAP32[$5>>2]|0;
 $95 = $92&255;
 $96 = $93 ? $94 : $95;
 $97 = ($91|0)==($96|0);
 if ($97) {
  $98 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,6051,$91)|0);
  $99 = ($98|0)==(0);
  if ($99) {
   $100 = (__Z11make_uniqueI17TransformFrameDupI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
   $101 = $100;
   $$sroa$057$0 = $101;
   $113 = $$sroa$057$0;
   return ($113|0);
  }
 }
 $102 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6024)|0);
 $103 = HEAP8[$2>>0]|0;
 $104 = ($103<<24>>24)<(0);
 $105 = HEAP32[$5>>2]|0;
 $106 = $103&255;
 $107 = $104 ? $105 : $106;
 $108 = ($102|0)==($107|0);
 if (!($108)) {
  $$sroa$057$0 = 0;
  $113 = $$sroa$057$0;
  return ($113|0);
 }
 $109 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,0,-1,6024,$102)|0);
 $110 = ($109|0)==(0);
 if (!($110)) {
  $$sroa$057$0 = 0;
  $113 = $$sroa$057$0;
  return ($113|0);
 }
 $111 = (__Z11make_uniqueI21TransformFrameCombineI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_()|0);
 $112 = $111;
 $$sroa$057$0 = $112;
 $113 = $$sroa$057$0;
 return ($113|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 return ($1|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __Z11make_uniqueI14TransformYCoCgI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZN14TransformYCoCgI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI15TransformBoundsI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(16)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 __ZN15TransformBoundsI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI16TransformPermuteI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN16TransformPermuteI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI11TransformCBI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 __ZN11TransformCBI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI16TransformPaletteI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN16TransformPaletteI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI17TransformPaletteAI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(24)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN17TransformPaletteAI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI17TransformPaletteCI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (__Znwj(100)|0);
 dest=$0; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN17TransformPaletteCI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI19TransformFrameShapeI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (__Znwj(36)|0);
 dest=$0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZN19TransformFrameShapeI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI17TransformFrameDupI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(20)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 __ZN17TransformFrameDupI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __Z11make_uniqueI21TransformFrameCombineI8BufferIOEJEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(20)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 __ZN21TransformFrameCombineI8BufferIOEC2Ev($0);
 return ($0|0);
}
function __ZN21TransformFrameCombineI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1212);
 return;
}
function __ZN9TransformI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1492);
 return;
}
function __ZN9TransformI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN21TransformFrameCombineI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN9TransformI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN21TransformFrameCombineI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN21TransformFrameCombineI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = $1;
 return;
}
function __ZN21TransformFrameCombineI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16512|0;
 $vararg_buffer = sp;
 $3 = sp + 4|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 63]($1)|0);
 $8 = ($7|0)>(4);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($3,$2,2,226050910);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($3,1,$11)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$vararg_buffer>>2] = $12;
 __Z8v_printfiPKcz(5,3382,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZN21TransformFrameCombineI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$025 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 $7 = ($6|0)<(2);
 $8 = ((($0)) + 5|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 63]($2)|0);
 $14 = ($13|0)<(4);
 $15 = ((($0)) + 4|0);
 $16 = $14&1;
 HEAP8[$15>>0] = $16;
 $17 = ((($1)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$1>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = (($20|0) / 104)&-1;
 $22 = ($20|0)==(0);
 if ($22) {
  $$lcssa = $21;
 } else {
  $$025 = 0;
  while(1) {
   $34 = HEAP32[$1>>2]|0;
   $35 = (($34) + (($$025*104)|0)|0);
   __ZN5Image22ensure_frame_lookbacksEv($35);
   $36 = (($$025) + 1)|0;
   $37 = HEAP32[$17>>2]|0;
   $38 = HEAP32[$1>>2]|0;
   $39 = (($37) - ($38))|0;
   $40 = (($39|0) / 104)&-1;
   $41 = ($36>>>0)<($40>>>0);
   if ($41) {
    $$025 = $36;
   } else {
    $$lcssa = $40;
    break;
   }
  }
 }
 $23 = (($$lcssa) + -1)|0;
 $24 = ((($0)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($23|0)>($25|0);
 $$ = $26 ? $25 : $23;
 $27 = (__Znwj(16)|0);
 $28 = $$&65535;
 $29 = HEAP32[$2>>2]|0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 63]($2)|0);
 $33 = ($32|0)==(4);
 if ($33) {
  $42 = HEAP32[$2>>2]|0;
  $43 = ((($42)) + 12|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_iii[$44 & 63]($2,3)|0);
  $55 = $45;
 } else {
  $55 = 1;
 }
 $46 = HEAP32[$2>>2]|0;
 $47 = ((($46)) + 8|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (FUNCTION_TABLE_ii[$48 & 63]($2)|0);
 $50 = ($49|0)==(4);
 if (!($50)) {
  $56 = 1;
  __ZN13ColorRangesFCC2EsssPK11ColorRanges($27,$28,$55,$56,$2);
  return ($27|0);
 }
 $51 = HEAP32[$2>>2]|0;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (FUNCTION_TABLE_iii[$53 & 63]($2,3)|0);
 $56 = $54;
 __ZN13ColorRangesFCC2EsssPK11ColorRanges($27,$28,$55,$56,$2);
 return ($27|0);
}
function __ZNK21TransformFrameCombineI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$025$042 = 0, $$sroa$031$043 = 0, $$sroa$037$045 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $$sroa$037$045 = $2;
  while(1) {
   __ZN5Image20drop_frame_lookbacksEv($$sroa$037$045);
   $9 = ((($$sroa$037$045)) + 104|0);
   $10 = ($9|0)==($4|0);
   if ($10) {
    break;
   } else {
    $$sroa$037$045 = $9;
   }
  }
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $11 = HEAP32[$1>>2]|0;
  $12 = HEAP32[$3>>2]|0;
  $13 = ($11|0)==($12|0);
  if (!($13)) {
   $$sroa$031$043 = $11;
   while(1) {
    __ZN5Image10drop_alphaEv($$sroa$031$043);
    $14 = ((($$sroa$031$043)) + 104|0);
    $15 = ($14|0)==($12|0);
    if ($15) {
     break;
    } else {
     $$sroa$031$043 = $14;
    }
   }
  }
 }
 $16 = ((($0)) + 5|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  return;
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = HEAP32[$3>>2]|0;
 $21 = ($19|0)==($20|0);
 if ($21) {
  return;
 } else {
  $$sroa$025$042 = $19;
 }
 while(1) {
  __ZN5Image10drop_colorEv($$sroa$025$042);
  $22 = ((($$sroa$025$042)) + 104|0);
  $23 = ($22|0)==($20|0);
  if ($23) {
   break;
  } else {
   $$sroa$025$042 = $22;
  }
 }
 return;
}
function __ZNK9TransformI8BufferIOE20is_palette_transformEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN5Image20drop_frame_lookbacksEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$6 & 127]($2);
 }
 $7 = ((($0)) + 32|0);
 HEAP32[$7>>2] = 4;
 return;
}
function __ZN5Image10drop_alphaEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(4);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 127]($5);
 }
 HEAP32[$1>>2] = 3;
 return;
}
function __ZN5Image10drop_colorEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(2);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 127]($5);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[$11>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 127]($11);
 }
 HEAP32[$1>>2] = 1;
 return;
}
function __ZN5Image22ensure_frame_lookbacksEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(5);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 __ZN5Image12ensure_alphaEv($0);
 $5 = ((($0)) + 20|0);
 $6 = ((($0)) + 24|0);
 HEAP32[$1>>2] = 0;
 $7 = ((($0)) + 36|0);
 $8 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$6,$1,$7)|0);
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$9>>2] = $8;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = HEAP32[$10>>2]|0;
  $13 = ((($12)) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 127]($10);
 }
 HEAP32[$2>>2] = 5;
 STACKTOP = sp;return;
}
function __ZN13ColorRangesFCC2EsssPK11ColorRanges($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1256);
 $5 = ((($0)) + 4|0);
 HEAP16[$5>>1] = $1;
 $6 = ((($0)) + 6|0);
 HEAP16[$6>>1] = $2;
 $7 = ((($0)) + 8|0);
 HEAP16[$7>>1] = $3;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $4;
 return;
}
function __ZN13ColorRangesFCD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK13ColorRangesFC9numPlanesEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK13ColorRangesFC3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(3);
 if ($2) {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iii[$7 & 63]($4,$1)|0);
  $$0 = $8;
  return ($$0|0);
 }
 $9 = ($1|0)==(3);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($0)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $$0 = $11;
 return ($$0|0);
}
function __ZNK13ColorRangesFC3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(3);
 if ($2) {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iii[$7 & 63]($4,$1)|0);
  $$0 = $8;
  return ($$0|0);
 }
 $9 = ($1|0)==(3);
 if ($9) {
  $10 = ((($0)) + 8|0);
  $11 = HEAP16[$10>>1]|0;
  $$0 = $11;
  return ($$0|0);
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP16[$12>>1]|0;
  $$0 = $13;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK13ColorRangesFC6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1|0)>(2);
 if ($5) {
  $6 = (__ZNK13ColorRangesFC3minEi($0,$1)|0);
  HEAP16[$3>>1] = $6;
  $7 = (__ZNK13ColorRangesFC3maxEi($0,$1)|0);
  HEAP16[$4>>1] = $7;
  return;
 } else {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  FUNCTION_TABLE_viiiii[$12 & 31]($9,$1,$2,$3,$4);
  return;
 }
}
function __ZNK13ColorRangesFC4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($1|0)>(2);
 if ($6) {
  __ZNK11ColorRanges4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5);
  return;
 } else {
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiiiii[$11 & 15]($8,$1,$2,$3,$4,$5);
  return;
 }
}
function __ZNK13ColorRangesFC8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK13ColorRangesFC8previousEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN5Image12ensure_alphaEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5Image13ensure_chromaEv($0);
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $cond = ($2|0)==(3);
 if (!($cond)) {
  return;
 }
 __ZN5Image19make_constant_planeEis($0,3,1);
 HEAP32[$1>>2] = 4;
 return;
}
function __Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = $7&65535;
 $9 = HEAP32[$3>>2]|0;
 __ZN5PlaneIhEC2Ejjsi($4,$5,$6,$8,$9);
 return ($4|0);
}
function __ZN5PlaneIhEC2Ejjsi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 __ZN12GeneralPlaneC2Ev($0);
 HEAP32[$0>>2] = (1300);
 $6 = ((($0)) + 4|0);
 $7 = (($1) + -1)|0;
 $8 = $7 >>> $4;
 $9 = (($8) + 1)|0;
 $10 = (($2) + -1)|0;
 $11 = $10 >>> $4;
 $12 = (($11) + 1)|0;
 $13 = Math_imul($9, $12)|0;
 $14 = $3&255;
 HEAP8[$5>>0] = $14;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2EjRKh($6,$13,$5);
 $15 = ((($0)) + 20|0);
 HEAP32[$15>>2] = $9;
 $16 = ((($0)) + 24|0);
 HEAP32[$16>>2] = $12;
 $17 = ((($0)) + 28|0);
 HEAP32[$17>>2] = $4;
 $18 = ((($0)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 36|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$6>>2]|0;
 $21 = ((($0)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[$16>>2]|0;
 $23 = ($22>>>0)>(1);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$15>>2]|0;
 HEAP32[$vararg_buffer>>2] = $24;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $22;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 8;
 __Z8v_printfiPKcz(6,3305,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZN12GeneralPlaneC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1364);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2EjRKh($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP8[$2>>0]|0;
  HEAP8[$8>>0] = $9;
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 1|0);
  HEAP32[$7>>2] = $11;
  $12 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  } else {
   $$0$i = $12;
  }
 }
 STACKTOP = sp;return;
}
function __Z8v_printfiPKcz($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12GeneralPlaneD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $4 = (__Znwj($1)|0);
  $5 = ((($0)) + 4|0);
  HEAP32[$5>>2] = $4;
  HEAP32[$0>>2] = $4;
  $6 = (($4) + ($1)|0);
  $7 = ((($0)) + 8|0);
  HEAP32[$7>>2] = $6;
  __ZNKSt3__26vectorIhNS_9allocatorIhEEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($6|0)==($1|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $6;
 }
 $9 = HEAP32[$0>>2]|0;
 __ZdlPv($9);
 return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($2) + ($5)|0);
 $7 = (($2) + ($1)|0);
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$6,$6,$7);
 return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN5PlaneIhE3setEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3&255;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $1)|0;
 $8 = (($7) + ($2))|0;
 $9 = ((($0)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8)|0);
 HEAP8[$11>>0] = $4;
 return;
}
function __ZNK5PlaneIhE3getEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $1)|0;
 $6 = (($5) + ($2))|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 return ($11|0);
}
function __ZNK5PlaneIhE17prepare_zoomlevelEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 >>> $4;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($5, $7)|0;
 $9 = ((($0)) + 32|0);
 HEAP32[$9>>2] = $8;
 $10 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = $10 >>> $11;
 $13 = ((($0)) + 36|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNK5PlaneIhE8get_fastEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $1)|0;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $2)|0;
 $9 = (($8) + ($5))|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 return ($14|0);
}
function __ZN5PlaneIhE8set_fastEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3&255;
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($6, $1)|0;
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($9, $2)|0;
 $11 = (($10) + ($7))|0;
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11)|0);
 HEAP8[$14>>0] = $4;
 return;
}
function __ZNK12GeneralPlane11is_constantEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK5PlaneIhE15bytes_per_pixelEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN5PlaneIhED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1300);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 __ZN12GeneralPlaneD2Ev($0);
 return;
}
function __ZN5PlaneIhED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5PlaneIhED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN5PlaneIhE3setEijjs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $4&255;
 $6 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $7 = Math_imul($6, $2)|0;
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 >>> $9;
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = Math_imul($10, $12)|0;
 $14 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $15 = Math_imul($14, $3)|0;
 $16 = HEAP32[$8>>2]|0;
 $17 = $15 >>> $16;
 $18 = (($17) + ($13))|0;
 $19 = ((($0)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18)|0);
 HEAP8[$21>>0] = $5;
 return;
}
function __ZNK5PlaneIhE3getEijj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $5 = Math_imul($4, $2)|0;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5 >>> $7;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $13 = Math_imul($12, $3)|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = $13 >>> $14;
 $16 = (($15) + ($11))|0;
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($16)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 return ($21|0);
}
function __ZN5PlaneIhE15normalize_scaleEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN5PlaneIhE14accept_visitorER12PlaneVisitor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$3 & 31]($1,$0);
 return;
}
function __ZN5PlaneIhE13compute_crc32Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $5)|0;
 $9 = (__Z10crc32_fastPKvjj($3,$8,$1)|0);
 return ($9|0);
}
function __ZN12GeneralPlane17zoom_rowpixelsizeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 1)|0;
 $2 = (($1|0) / 2)&-1;
 $3 = 1 << $2;
 return ($3|0);
}
function __ZN12GeneralPlane17zoom_colpixelsizeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0|0) / 2)&-1;
 $2 = 1 << $1;
 return ($2|0);
}
function __ZNK12GeneralPlane15bytes_per_pixelEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN12GeneralPlaneD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12GeneralPlaneD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN12GeneralPlane15normalize_scaleEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN5Image13ensure_chromaEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 1:  {
  __ZN5Image19make_constant_planeEis($0,1,0);
  break;
 }
 case 2:  {
  break;
 }
 default: {
  return;
 }
 }
 __ZN5Image19make_constant_planeEis($0,2,0);
 HEAP32[$1>>2] = 3;
 return;
}
function __ZN5Image19make_constant_planeEis($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP16[$3>>1] = $2;
 $4 = ($1>>>0)>(3);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$5>>2] = 0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$6>>2]|0;
  $9 = ((($8)) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vi[$10 & 127]($6);
 }
 $11 = (__Z11make_uniqueI13ConstantPlaneJRKsEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_($3)|0);
 $12 = HEAP32[$5>>2]|0;
 HEAP32[$5>>2] = $11;
 $13 = ($12|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$12>>2]|0;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$16 & 127]($12);
 STACKTOP = sp;return;
}
function __Z11make_uniqueI13ConstantPlaneJRKsEENSt3__210unique_ptrIT_NS3_14default_deleteIS5_EEEEDpOT0_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $2 = HEAP16[$0>>1]|0;
 __ZN13ConstantPlaneC2Es($1,$2);
 return ($1|0);
}
function __ZN13ConstantPlaneC2Es($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12GeneralPlaneC2Ev($0);
 HEAP32[$0>>2] = (1428);
 $2 = ((($0)) + 4|0);
 HEAP16[$2>>1] = $1;
 return;
}
function __ZN13ConstantPlane3setEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK13ConstantPlane3getEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 return ($4|0);
}
function __ZNK13ConstantPlane17prepare_zoomlevelEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK13ConstantPlane8get_fastEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 return ($4|0);
}
function __ZN13ConstantPlane8set_fastEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK13ConstantPlane11is_constantEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN13ConstantPlaneD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12GeneralPlaneD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN13ConstantPlane3setEijjs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK13ConstantPlane3getEijj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 return ($5|0);
}
function __ZN13ConstantPlane14accept_visitorER12PlaneVisitor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN13ConstantPlane13compute_crc32Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP16[$3>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = (__Z10crc32_fastPKvjj($2,2,$1)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12SymbolChanceI15SimpleBitChanceLi18EEC2Ev($0);
 $4 = ((($0)) + 108|0);
 __ZN20SimpleBitChanceTableC2Eii($4,$2,$3);
 $5 = ((($0)) + 16496|0);
 HEAP32[$5>>2] = $1;
 return;
}
function __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)>(0);
 if ($3) {
  $4 = (($2) - ($1))|0;
  $5 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($0,0,$4)|0);
  $6 = (($5) + ($1))|0;
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ($2|0)<(0);
 if ($7) {
  $8 = (($1) - ($2))|0;
  $9 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($0,$8,0)|0);
  $10 = (($9) + ($2))|0;
  $$0 = $10;
  return ($$0|0);
 } else {
  $11 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($0,$1,$2)|0);
  $$0 = $11;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 108|0);
 $5 = ((($0)) + 16496|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERK20SimpleBitChanceTableR12SymbolChanceIS0_Li18EERS3_($3,$4,$0,$6);
 $7 = (__Z6readerILi18E20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEEiRT0_ii($3,$1,$2)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERK20SimpleBitChanceTableR12SymbolChanceIS0_Li18EERS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $3;
 return;
}
function __Z6readerILi18E20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEEiRT0_ii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$057 = 0, $$054$off0 = 0, $$055 = 0, $$055$ph = 0, $$056 = 0, $$056$ph = 0, $$057$ph = 0, $$059$lcssa = 0, $$05962 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==($2|0);
 if ($3) {
  $$1 = $1;
  return ($$1|0);
 }
 $4 = (__ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE4readE19SymbolChanceBitTypei($0,0,0)|0);
 if ($4) {
  $$1 = 0;
  return ($$1|0);
 }
 $5 = ($1|0)<(0);
 if ($5) {
  $6 = ($2|0)>(0);
  if ($6) {
   $7 = (__ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE4readE19SymbolChanceBitTypei($0,1,0)|0);
   $$054$off0 = $7;
  } else {
   $$054$off0 = 0;
  }
 } else {
  $$054$off0 = 1;
 }
 $8 = (0 - ($1))|0;
 $9 = $$054$off0 ? $2 : $8;
 $10 = (__ZN6maniac4utilL5ilog2Ej($9)|0);
 $11 = (__ZN6maniac4utilL5ilog2Ej(1)|0);
 $12 = ($11|0)<($10|0);
 L11: do {
  if ($12) {
   $13 = $$054$off0&1;
   $$05962 = $11;
   while(1) {
    $14 = $$05962 << 1;
    $15 = $14 | $13;
    $16 = (__ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE4readE19SymbolChanceBitTypei($0,2,$15)|0);
    if ($16) {
     $$059$lcssa = $$05962;
     break L11;
    }
    $17 = (($$05962) + 1)|0;
    $18 = ($17|0)<($10|0);
    if ($18) {
     $$05962 = $17;
    } else {
     $$059$lcssa = $17;
     break;
    }
   }
  } else {
   $$059$lcssa = $11;
  }
 } while(0);
 $19 = 1 << $$059$lcssa;
 $20 = (($19) + -1)|0;
 $$055$ph = $$059$lcssa;$$056$ph = $20;$$057$ph = $19;
 L17: while(1) {
  $$055 = $$055$ph;$$056 = $$056$ph;
  while(1) {
   $21 = ($$055|0)>(0);
   if (!($21)) {
    break L17;
   }
   $24 = $$056 >> 1;
   $25 = (($$055) + -1)|0;
   $26 = 1 << $25;
   $27 = $26 | $$057$ph;
   $28 = ($27|0)>($9|0);
   if ($28) {
    $$055 = $25;$$056 = $24;
   } else {
    break;
   }
  }
  $29 = $24 | $$057$ph;
  $30 = ($29|0)>(0);
  if (!($30)) {
   $$055$ph = $25;$$056$ph = $24;$$057$ph = $27;
   continue;
  }
  $31 = (__ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE4readE19SymbolChanceBitTypei($0,3,$25)|0);
  $$$057 = $31 ? $27 : $$057$ph;
  $$055$ph = $25;$$056$ph = $24;$$057$ph = $$$057;
 }
 $22 = (0 - ($$057$ph))|0;
 $23 = $$054$off0 ? $$057$ph : $22;
 $$1 = $23;
 return ($$1|0);
}
function __ZN20SimpleSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE4readE19SymbolChanceBitTypei($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE3bitE19SymbolChanceBitTypei($4,$1,$2)|0);
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK15SimpleBitChance9get_12bitEv($5)|0);
 $9 = (__ZN8RacInputI11RacConfig248BufferIOE17read_12bit_chanceEt($7,$8)|0);
 $10 = HEAP32[$0>>2]|0;
 __ZN15SimpleBitChance3putEbRK20SimpleBitChanceTable($5,$9,$10);
 return ($9|0);
}
function __ZN6maniac4utilL5ilog2Ej($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $2 = (Math_clz32(($0|0))|0);
 $3 = (31 - ($2))|0;
 $$0 = $1 ? 0 : $3;
 return ($$0|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EE3bitE19SymbolChanceBitTypei($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 3:  {
  $6 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitMantEi($0,$2)|0);
  $$0 = $6;
  return ($$0|0);
  break;
 }
 case 1:  {
  $4 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitSignEv($0)|0);
  $$0 = $4;
  return ($$0|0);
  break;
 }
 case 2:  {
  $5 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE6bitExpEi($0,$2)|0);
  $$0 = $5;
  return ($$0|0);
  break;
 }
 default: {
  $3 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitZeroEv($0)|0);
  $$0 = $3;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZNK15SimpleBitChance9get_12bitEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP16[$0>>1]|0;
 return ($1|0);
}
function __ZN8RacInputI11RacConfig248BufferIOE17read_12bit_chanceEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&65535;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN11RacConfig2419chance_12bit_chanceEij($2,$4)|0);
 $6 = (__ZN8RacInputI11RacConfig248BufferIOE3getEj($0,$5)|0);
 return ($6|0);
}
function __ZN15SimpleBitChance3putEbRK20SimpleBitChanceTable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$0>>1]|0;
 $4 = $3&65535;
 $5 = $1&1;
 $6 = ((($2) + ($5<<13)|0) + ($4<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$0>>1] = $7;
 return;
}
function __ZN11RacConfig2419chance_12bit_chanceEij($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 4095;
 $3 = Math_imul($2, $0)|0;
 $4 = (($3) + 2048)|0;
 $5 = $4 >>> 12;
 $6 = $1 >>> 12;
 $7 = Math_imul($6, $0)|0;
 $8 = (($5) + ($7))|0;
 return ($8|0);
}
function __ZN8RacInputI11RacConfig248BufferIOE3getEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($1))|0;
 $7 = ($3>>>0)<($6>>>0);
 if ($7) {
  HEAP32[$4>>2] = $6;
  __ZN8RacInputI11RacConfig248BufferIOE5inputEv($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  $8 = (($3) - ($6))|0;
  HEAP32[$2>>2] = $8;
  HEAP32[$4>>2] = $1;
  __ZN8RacInputI11RacConfig248BufferIOE5inputEv($0);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8RacInputI11RacConfig248BufferIOE5inputEv($0) {
 $0 = $0|0;
 var $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<(65537);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 8;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$1>>2]|0;
 $8 = $7 << 8;
 HEAP32[$1>>2] = $8;
 $9 = (__ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0)|0);
 $10 = HEAP32[$4>>2]|0;
 $11 = $10 | $9;
 HEAP32[$4>>2] = $11;
 $$pr = HEAP32[$1>>2]|0;
 $12 = ($$pr>>>0)<(65537);
 if (!($12)) {
  return;
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << 8;
 HEAP32[$13>>2] = $15;
 $16 = HEAP32[$1>>2]|0;
 $17 = $16 << 8;
 HEAP32[$1>>2] = $17;
 $18 = (__ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0)|0);
 $19 = HEAP32[$13>>2]|0;
 $20 = $19 | $18;
 HEAP32[$13>>2] = $20;
 return;
}
function __ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZN8BufferIO4getcEv($1)|0);
 return ($2|0);
}
function __ZN8BufferIO4getcEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN8BufferIO13isNotReadableEv($0)|0);
 if ($1) {
  $2 = ((($0)) + 16|0);
  HEAP8[$2>>0] = 1;
  $3 = ((($0)) + 4116|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
  return ($$0|0);
 } else {
  $5 = (__ZN8BufferIO15getBufferedCharEv($0)|0);
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN8BufferIO13isNotReadableEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if (!($6)) {
   $11 = 1;
   return ($11|0);
  }
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ($8|0)>=($9|0);
 $11 = $10;
 return ($11|0);
}
function __ZN8BufferIO15getBufferedCharEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4114|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2&65535)>(4095);
 if ($3) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 17|0);
  $12 = $11;
  FUNCTION_TABLE_viiii[$8 & 15]($5,$10,$12,4096);
  HEAP16[$1>>1] = 0;
 }
 $13 = ((($0)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = HEAP16[$1>>1]|0;
 $17 = (($16) + 1)<<16>>16;
 HEAP16[$1>>1] = $17;
 $18 = $16&65535;
 $19 = (((($0)) + 17|0) + ($18)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 return ($21|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitZeroEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitSignEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2|0);
 return ($1|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EE6bitExpEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 4|0) + ($1<<1)|0);
 return ($2|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitMantEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 72|0) + ($1<<1)|0);
 return ($2|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi18EEC2Ev($0) {
 $0 = $0|0;
 var $$01315 = 0, $$014 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15SimpleBitChanceC2Ev($0);
 $1 = ((($0)) + 2|0);
 __ZN15SimpleBitChanceC2Ev($1);
 $2 = ((($0)) + 4|0);
 __ZN15SimpleBitChanceC2Ev($2);
 $3 = ((($0)) + 6|0);
 __ZN15SimpleBitChanceC2Ev($3);
 $4 = ((($0)) + 8|0);
 __ZN15SimpleBitChanceC2Ev($4);
 $5 = ((($0)) + 10|0);
 __ZN15SimpleBitChanceC2Ev($5);
 $6 = ((($0)) + 12|0);
 __ZN15SimpleBitChanceC2Ev($6);
 $7 = ((($0)) + 14|0);
 __ZN15SimpleBitChanceC2Ev($7);
 $8 = ((($0)) + 16|0);
 __ZN15SimpleBitChanceC2Ev($8);
 $9 = ((($0)) + 18|0);
 __ZN15SimpleBitChanceC2Ev($9);
 $10 = ((($0)) + 20|0);
 __ZN15SimpleBitChanceC2Ev($10);
 $11 = ((($0)) + 22|0);
 __ZN15SimpleBitChanceC2Ev($11);
 $12 = ((($0)) + 24|0);
 __ZN15SimpleBitChanceC2Ev($12);
 $13 = ((($0)) + 26|0);
 __ZN15SimpleBitChanceC2Ev($13);
 $14 = ((($0)) + 28|0);
 __ZN15SimpleBitChanceC2Ev($14);
 $15 = ((($0)) + 30|0);
 __ZN15SimpleBitChanceC2Ev($15);
 $16 = ((($0)) + 32|0);
 __ZN15SimpleBitChanceC2Ev($16);
 $17 = ((($0)) + 34|0);
 __ZN15SimpleBitChanceC2Ev($17);
 $18 = ((($0)) + 36|0);
 __ZN15SimpleBitChanceC2Ev($18);
 $19 = ((($0)) + 38|0);
 __ZN15SimpleBitChanceC2Ev($19);
 $20 = ((($0)) + 40|0);
 __ZN15SimpleBitChanceC2Ev($20);
 $21 = ((($0)) + 42|0);
 __ZN15SimpleBitChanceC2Ev($21);
 $22 = ((($0)) + 44|0);
 __ZN15SimpleBitChanceC2Ev($22);
 $23 = ((($0)) + 46|0);
 __ZN15SimpleBitChanceC2Ev($23);
 $24 = ((($0)) + 48|0);
 __ZN15SimpleBitChanceC2Ev($24);
 $25 = ((($0)) + 50|0);
 __ZN15SimpleBitChanceC2Ev($25);
 $26 = ((($0)) + 52|0);
 __ZN15SimpleBitChanceC2Ev($26);
 $27 = ((($0)) + 54|0);
 __ZN15SimpleBitChanceC2Ev($27);
 $28 = ((($0)) + 56|0);
 __ZN15SimpleBitChanceC2Ev($28);
 $29 = ((($0)) + 58|0);
 __ZN15SimpleBitChanceC2Ev($29);
 $30 = ((($0)) + 60|0);
 __ZN15SimpleBitChanceC2Ev($30);
 $31 = ((($0)) + 62|0);
 __ZN15SimpleBitChanceC2Ev($31);
 $32 = ((($0)) + 64|0);
 __ZN15SimpleBitChanceC2Ev($32);
 $33 = ((($0)) + 66|0);
 __ZN15SimpleBitChanceC2Ev($33);
 $34 = ((($0)) + 68|0);
 __ZN15SimpleBitChanceC2Ev($34);
 $35 = ((($0)) + 70|0);
 __ZN15SimpleBitChanceC2Ev($35);
 $36 = ((($0)) + 72|0);
 __ZN15SimpleBitChanceC2Ev($36);
 $37 = ((($0)) + 74|0);
 __ZN15SimpleBitChanceC2Ev($37);
 $38 = ((($0)) + 76|0);
 __ZN15SimpleBitChanceC2Ev($38);
 $39 = ((($0)) + 78|0);
 __ZN15SimpleBitChanceC2Ev($39);
 $40 = ((($0)) + 80|0);
 __ZN15SimpleBitChanceC2Ev($40);
 $41 = ((($0)) + 82|0);
 __ZN15SimpleBitChanceC2Ev($41);
 $42 = ((($0)) + 84|0);
 __ZN15SimpleBitChanceC2Ev($42);
 $43 = ((($0)) + 86|0);
 __ZN15SimpleBitChanceC2Ev($43);
 $44 = ((($0)) + 88|0);
 __ZN15SimpleBitChanceC2Ev($44);
 $45 = ((($0)) + 90|0);
 __ZN15SimpleBitChanceC2Ev($45);
 $46 = ((($0)) + 92|0);
 __ZN15SimpleBitChanceC2Ev($46);
 $47 = ((($0)) + 94|0);
 __ZN15SimpleBitChanceC2Ev($47);
 $48 = ((($0)) + 96|0);
 __ZN15SimpleBitChanceC2Ev($48);
 $49 = ((($0)) + 98|0);
 __ZN15SimpleBitChanceC2Ev($49);
 $50 = ((($0)) + 100|0);
 __ZN15SimpleBitChanceC2Ev($50);
 $51 = ((($0)) + 102|0);
 __ZN15SimpleBitChanceC2Ev($51);
 $52 = ((($0)) + 104|0);
 __ZN15SimpleBitChanceC2Ev($52);
 $53 = ((($0)) + 106|0);
 __ZN15SimpleBitChanceC2Ev($53);
 $54 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitZeroEv($0)|0);
 __ZN15SimpleBitChance9set_12bitEt($54,1000);
 $55 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitSignEv($0)|0);
 __ZN15SimpleBitChance9set_12bitEt($55,2048);
 $$01315 = 0;
 while(1) {
  $56 = $$01315 << 1;
  $57 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE6bitExpEi($0,$56)|0);
  $58 = (3204 + ($$01315<<1)|0);
  $59 = HEAP16[$58>>1]|0;
  __ZN15SimpleBitChance9set_12bitEt($57,$59);
  $60 = $56 | 1;
  $61 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE6bitExpEi($0,$60)|0);
  __ZN15SimpleBitChance9set_12bitEt($61,$59);
  $62 = (($$01315) + 1)|0;
  $exitcond16 = ($62|0)==(17);
  if ($exitcond16) {
   $$014 = 0;
   break;
  } else {
   $$01315 = $62;
  }
 }
 while(1) {
  $63 = (__ZN12SymbolChanceI15SimpleBitChanceLi18EE7bitMantEi($0,$$014)|0);
  $64 = (3168 + ($$014<<1)|0);
  $65 = HEAP16[$64>>1]|0;
  __ZN15SimpleBitChance9set_12bitEt($63,$65);
  $66 = (($$014) + 1)|0;
  $exitcond = ($66|0)==(18);
  if ($exitcond) {
   break;
  } else {
   $$014 = $66;
  }
 }
 return;
}
function __ZN20SimpleBitChanceTableC2Eii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20SimpleBitChanceTable4initEii($0,$1,$2);
 return;
}
function __ZN20SimpleBitChanceTable4initEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16384|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8192|0);
 $5 = (4096 - ($1))|0;
 __Z11build_tablePtS_jjj($0,$4,4096,$2,$5);
 return;
}
function __ZN15SimpleBitChanceC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[$0>>1] = 2048;
 return;
}
function __ZN15SimpleBitChance9set_12bitEt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[$0>>1] = $1;
 return;
}
function __ZN9TransformI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN9TransformI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN9TransformI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN9TransformI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN9TransformI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__Znwj(8)|0);
 __ZN14DupColorRangesC2EPK11ColorRanges($3,$2);
 return ($3|0);
}
function __ZNK9TransformI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN17TransformFrameDupI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1536);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN17TransformFrameDupI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1536);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN17TransformFrameDupI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17TransformFrameDupI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN17TransformFrameDupI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN17TransformFrameDupI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZN17TransformFrameDupI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$016 = 0, $$016$lcssa = 0, $$01624 = 0, $$025 = 0, $$cast = 0, $$cast$i = 0, $$lobit = 0, $$lobit$not = 0, $$sroa$019$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16512|0;
 $vararg_buffer = sp;
 $3 = sp + 16508|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 $6 = ((($0)) + 4|0);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $$cast$i = $9;
 $$cast = $8;
 $12 = ($$cast|0)==($$cast$i|0);
 if (!($12)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $13 = $scevgep$i$i$i;
  $14 = (($13) - ($9))|0;
  $15 = $14 >>> 2;
  $16 = $15 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($16<<2)|0);
  HEAP32[$7>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($6,$11);
 HEAP32[$5>>2] = -1;
 $17 = HEAP32[$7>>2]|0;
 $18 = ((($0)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17>>>0)<($19>>>0);
 if ($20) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$6,1);
  $21 = HEAP32[$7>>2]|0;
  $22 = HEAP32[$5>>2]|0;
  HEAP32[$21>>2] = $22;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $23 = HEAP32[$7>>2]|0;
  $24 = ((($23)) + 4|0);
  HEAP32[$7>>2] = $24;
 } else {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($6,$5);
 }
 $25 = ((($0)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26>>>0)>(1);
 if ($27) {
  $$025 = 1;
  while(1) {
   $31 = (($$025) + -1)|0;
   $32 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($4,-1,$31)|0);
   HEAP32[$5>>2] = $32;
   $33 = HEAP32[$7>>2]|0;
   $34 = HEAP32[$18>>2]|0;
   $35 = ($33>>>0)<($34>>>0);
   if ($35) {
    __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$6,1);
    $36 = HEAP32[$7>>2]|0;
    $37 = HEAP32[$5>>2]|0;
    HEAP32[$36>>2] = $37;
    __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($3);
    $38 = HEAP32[$7>>2]|0;
    $39 = ((($38)) + 4|0);
    HEAP32[$7>>2] = $39;
   } else {
    __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($6,$5);
   }
   $40 = (($$025) + 1)|0;
   $41 = HEAP32[$25>>2]|0;
   $42 = ($40>>>0)<($41>>>0);
   if ($42) {
    $$025 = $40;
   } else {
    break;
   }
  }
 }
 $28 = HEAP32[$6>>2]|0;
 $29 = HEAP32[$7>>2]|0;
 $30 = ($28|0)==($29|0);
 if ($30) {
  $$016$lcssa = 0;
  HEAP32[$vararg_buffer>>2] = $$016$lcssa;
  __Z8v_printfiPKcz(5,3382,$vararg_buffer);
  STACKTOP = sp;return 1;
 } else {
  $$01624 = 0;$$sroa$019$023 = $28;
 }
 while(1) {
  $43 = HEAP32[$$sroa$019$023>>2]|0;
  $$lobit = $43 >>> 31;
  $$lobit$not = $$lobit ^ 1;
  $$$016 = (($$lobit$not) + ($$01624))|0;
  $44 = ((($$sroa$019$023)) + 4|0);
  $45 = ($44|0)==($29|0);
  if ($45) {
   $$016$lcssa = $$$016;
   break;
  } else {
   $$01624 = $$$016;$$sroa$019$023 = $44;
  }
 }
 HEAP32[$vararg_buffer>>2] = $$016$lcssa;
 __Z8v_printfiPKcz(5,3382,$vararg_buffer);
 STACKTOP = sp;return 1;
}
function __ZN17TransformFrameDupI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $13 = (__Znwj(8)|0);
  __ZN14DupColorRangesC2EPK11ColorRanges($13,$2);
  return ($13|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $$cast = $7;
 $11 = (($10) - ($$cast))|0;
 $12 = (($11|0) / 104)&-1;
 $$011 = 0;
 while(1) {
  $14 = (($9) + ($$011<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($7) + (($$011*104)|0)|0)) + 84|0);
  HEAP32[$16>>2] = $15;
  $17 = (($$011) + 1)|0;
  $18 = ($17>>>0)<($12>>>0);
  if ($18) {
   $$011 = $17;
  } else {
   break;
  }
 }
 $13 = (__Znwj(8)|0);
 __ZN14DupColorRangesC2EPK11ColorRanges($13,$2);
 return ($13|0);
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$8,$13);
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $26;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN19TransformFrameShapeI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1580);
 $1 = ((($0)) + 4|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZN19TransformFrameShapeI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1580);
 $1 = ((($0)) + 16|0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 $2 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($2);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN19TransformFrameShapeI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN19TransformFrameShapeI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN19TransformFrameShapeI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN19TransformFrameShapeI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$2>>2] = $1;
  return;
 } else {
  $5 = ((($0)) + 28|0);
  HEAP32[$5>>2] = $1;
  return;
 }
}
function __ZN19TransformFrameShapeI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01519 = 0, $$01620 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16512|0;
 $vararg_buffer = sp;
 $3 = sp + 16508|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $58 = 1;
  STACKTOP = sp;return ($58|0);
 }
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 28|0);
 $11 = ((($0)) + 8|0);
 $12 = ((($0)) + 12|0);
 $$01620 = 0;
 while(1) {
  $20 = HEAP32[$10>>2]|0;
  $21 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($4,0,$20)|0);
  HEAP32[$5>>2] = $21;
  $22 = HEAP32[$11>>2]|0;
  $23 = HEAP32[$12>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$9,1);
   $25 = HEAP32[$11>>2]|0;
   $26 = HEAP32[$5>>2]|0;
   HEAP32[$25>>2] = $26;
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($27)) + 4|0);
   HEAP32[$11>>2] = $28;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($9,$5);
  }
  $29 = (($$01620) + 1)|0;
  $13 = HEAP32[$6>>2]|0;
  $30 = ($29>>>0)<($13>>>0);
  if ($30) {
   $$01620 = $29;
  } else {
   break;
  }
 }
 $14 = ($13|0)==(0);
 if ($14) {
  $58 = 1;
  STACKTOP = sp;return ($58|0);
 }
 $15 = ((($0)) + 16|0);
 $16 = ((($0)) + 28|0);
 $17 = ((($0)) + 4|0);
 $18 = ((($0)) + 20|0);
 $19 = ((($0)) + 24|0);
 $$01519 = 0;
 while(1) {
  $34 = HEAP32[$16>>2]|0;
  $35 = HEAP32[$17>>2]|0;
  $36 = (($35) + ($$01519<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($34) - ($37))|0;
  $39 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($4,0,$38)|0);
  $40 = (($34) - ($39))|0;
  HEAP32[$5>>2] = $40;
  $41 = HEAP32[$18>>2]|0;
  $42 = HEAP32[$19>>2]|0;
  $43 = ($41>>>0)<($42>>>0);
  if ($43) {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$15,1);
   $44 = HEAP32[$18>>2]|0;
   $45 = HEAP32[$5>>2]|0;
   HEAP32[$44>>2] = $45;
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $46 = HEAP32[$18>>2]|0;
   $47 = ((($46)) + 4|0);
   HEAP32[$18>>2] = $47;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($15,$5);
  }
  $48 = HEAP32[$15>>2]|0;
  $49 = (($48) + ($$01519<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$16>>2]|0;
  $52 = ($50>>>0)>($51>>>0);
  if ($52) {
   break;
  }
  $53 = HEAP32[$17>>2]|0;
  $54 = (($53) + ($$01519<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($50>>>0)<($55>>>0);
  $57 = ($50|0)==(0);
  $or$cond = $57 | $56;
  $32 = (($$01519) + 1)|0;
  if ($or$cond) {
   break;
  }
  $31 = HEAP32[$6>>2]|0;
  $33 = ($32>>>0)<($31>>>0);
  if ($33) {
   $$01519 = $32;
  } else {
   $58 = 1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return ($58|0);
 }
 __Z8e_printfPKcz(3475,$vararg_buffer);
 $58 = 0;
 STACKTOP = sp;return ($58|0);
}
function __ZN19TransformFrameShapeI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02531 = 0, $$02730 = 0, $$029 = 0, $$128 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 104)&-1;
 $8 = ($7>>>0)>(1);
 if (!($8)) {
  $11 = (__Znwj(8)|0);
  __ZN14DupColorRangesC2EPK11ColorRanges($11,$2);
  return ($11|0);
 }
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 16|0);
 $$02531 = 0;$$02730 = 1;
 while(1) {
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + (($$02730*104)|0)|0);
  $14 = (((($12) + (($$02730*104)|0)|0)) + 84|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(-1);
  if ($16) {
   $$2 = $$02531;
  } else {
   $17 = (__ZNK5Image4rowsEv($13)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$2 = $$02531;
   } else {
    $19 = (((($12) + (($$02730*104)|0)|0)) + 60|0);
    $20 = (((($12) + (($$02730*104)|0)|0)) + 72|0);
    $$029 = 0;$$128 = $$02531;
    while(1) {
     $21 = HEAP32[$9>>2]|0;
     $22 = (($21) + ($$128<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = HEAP32[$19>>2]|0;
     $25 = (($24) + ($$029<<2)|0);
     HEAP32[$25>>2] = $23;
     $26 = HEAP32[$10>>2]|0;
     $27 = (($26) + ($$128<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = HEAP32[$20>>2]|0;
     $30 = (($29) + ($$029<<2)|0);
     HEAP32[$30>>2] = $28;
     $31 = (($$128) + 1)|0;
     $32 = (($$029) + 1)|0;
     $33 = (__ZNK5Image4rowsEv($13)|0);
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $$029 = $32;$$128 = $31;
     } else {
      $$2 = $31;
      break;
     }
    }
   }
  }
  $35 = (($$02730) + 1)|0;
  $36 = HEAP32[$3>>2]|0;
  $37 = HEAP32[$1>>2]|0;
  $38 = (($36) - ($37))|0;
  $39 = (($38|0) / 104)&-1;
  $40 = ($35>>>0)<($39>>>0);
  if ($40) {
   $$02531 = $$2;$$02730 = $35;
  } else {
   break;
  }
 }
 $11 = (__Znwj(8)|0);
 __ZN14DupColorRangesC2EPK11ColorRanges($11,$2);
 return ($11|0);
}
function __ZNK5Image4rowsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $26;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN17TransformPaletteCI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $scevgep = 0, $scevgep2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1624);
 $scevgep2 = ((($0)) + 4|0);
 dest=$scevgep2; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $scevgep = ((($0)) + 52|0);
 dest=$scevgep; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN17TransformPaletteCI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1624);
 $1 = ((($0)) + 88|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($1);
 $2 = ((($0)) + 76|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($2);
 $3 = ((($0)) + 64|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($3);
 $4 = ((($0)) + 52|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($4);
 $5 = ((($0)) + 40|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
 $6 = ((($0)) + 28|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($6);
 $7 = ((($0)) + 16|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($7);
 $8 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN17TransformPaletteCI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17TransformPaletteCI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN17TransformPaletteCI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $not$ = ($5|0)<(5);
 return ($not$|0);
}
function __ZN17TransformPaletteCI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03236 = 0, $$03335 = 0, $$03438 = 0, $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16512|0;
 $3 = sp + 16502|0;
 $4 = sp;
 $5 = sp + 16500|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($1)|0);
 $10 = ($9|0)>(0);
 if (!($10)) {
  STACKTOP = sp;return 1;
 }
 $$03438 = 0;
 while(1) {
  $11 = HEAP32[$1>>2]|0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iii[$13 & 63]($1,$$03438)|0);
  $15 = $14 << 16 >> 16;
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 63]($1,$$03438)|0);
  $20 = $19 << 16 >> 16;
  $21 = (($15) - ($20))|0;
  $22 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($4,0,$21)|0);
  $23 = (($22) + 1)|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_iii[$26 & 63]($1,$$03438)|0);
  $28 = ($23|0)==(0);
  if (!($28)) {
   $29 = (((($0)) + 4|0) + (($$03438*12)|0)|0);
   $30 = (((((($0)) + 4|0) + (($$03438*12)|0)|0)) + 4|0);
   $31 = (((((($0)) + 4|0) + (($$03438*12)|0)|0)) + 8|0);
   $$03236 = $22;$$03335 = $27;$$037 = 0;
   while(1) {
    $38 = $$03335 << 16 >> 16;
    $39 = HEAP32[$1>>2]|0;
    $40 = ((($39)) + 16|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iii[$41 & 63]($1,$$03438)|0);
    $43 = $42 << 16 >> 16;
    $sum = (($$03236) + ($38))|0;
    $44 = (($43) - ($sum))|0;
    $45 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE8read_intEii($4,0,$44)|0);
    $46 = (($45) + ($38))|0;
    $47 = $46&65535;
    HEAP16[$5>>1] = $47;
    $48 = HEAP32[$30>>2]|0;
    $49 = HEAP32[$31>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$29,1);
     $51 = HEAP32[$30>>2]|0;
     $52 = HEAP16[$5>>1]|0;
     HEAP16[$51>>1] = $52;
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
     $53 = HEAP32[$30>>2]|0;
     $54 = ((($53)) + 2|0);
     HEAP32[$30>>2] = $54;
    } else {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($29,$5);
    }
    $55 = HEAP32[$29>>2]|0;
    $56 = (($55) + ($$037<<1)|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = $57&65535;
    $59 = (($58) + 1)|0;
    $60 = $59&65535;
    $61 = (($$03236) + -1)|0;
    $62 = (($$037) + 1)|0;
    $exitcond = ($62|0)==($23|0);
    if ($exitcond) {
     break;
    } else {
     $$03236 = $61;$$03335 = $60;$$037 = $62;
    }
   }
  }
  $32 = (($$03438) + 1)|0;
  $33 = HEAP32[$1>>2]|0;
  $34 = ((($33)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_ii[$35 & 63]($1)|0);
  $37 = ($32|0)<($36|0);
  if ($37) {
   $$03438 = $32;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 1;
}
function __ZN17TransformPaletteCI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 __Z8v_printfiPKcz(4,3561,$vararg_buffer);
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 63]($2)|0);
 $8 = ($7|0)>(0);
 if ($8) {
  $$09 = 0;
 } else {
  __Z8v_printfiPKcz(4,3563,$vararg_buffer1);
  $9 = (__Znwj(24)|0);
  __ZN19ColorRangesPaletteCC2EPK11ColorRangesPKi($9,$2,$3);
  STACKTOP = sp;return ($9|0);
 }
 while(1) {
  $10 = (((($0)) + 4|0) + (($$09*12)|0)|0);
  $11 = (((((($0)) + 4|0) + (($$09*12)|0)|0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$10>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = $14 >> 1;
  $16 = (($15) + -1)|0;
  $17 = (($3) + ($$09<<2)|0);
  HEAP32[$17>>2] = $16;
  $18 = ($$09|0)>(0);
  if ($18) {
   __Z8v_printfiPKcz(4,3565,$vararg_buffer3);
  }
  $19 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer5>>2] = $19;
  __Z8v_printfiPKcz(4,3567,$vararg_buffer5);
  $20 = (($$09) + 1)|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (FUNCTION_TABLE_ii[$23 & 63]($2)|0);
  $25 = ($20|0)<($24|0);
  if ($25) {
   $$09 = $20;
  } else {
   break;
  }
 }
 __Z8v_printfiPKcz(4,3563,$vararg_buffer1);
 $9 = (__Znwj(24)|0);
 __ZN19ColorRangesPaletteCC2EPK11ColorRangesPKi($9,$2,$3);
 STACKTOP = sp;return ($9|0);
}
function __ZNK17TransformPaletteCI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03847 = 0, $$03948 = 0, $$04050 = 0, $$sroa$042$053 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  return;
 } else {
  $$sroa$042$053 = $2;
 }
 while(1) {
  $6 = (__ZNK5Image9numPlanesEv($$sroa$042$053)|0);
  $7 = ($6|0)>(0);
  if ($7) {
   $$04050 = 0;
   while(1) {
    __ZN5Image24undo_make_constant_planeEi($$sroa$042$053,$$04050);
    $10 = (__ZNK5Image4rowsEv($$sroa$042$053)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = (((($0)) + 4|0) + (($$04050*12)|0)|0);
     $13 = (((($0)) + 4|0) + (($$04050*12)|0)|0);
     $14 = (((((($0)) + 4|0) + (($$04050*12)|0)|0)) + 4|0);
     $$03948 = 0;
     while(1) {
      $15 = (__ZNK5Image4colsEv($$sroa$042$053)|0);
      $16 = ($15|0)==(0);
      if (!($16)) {
       $$03847 = 0;
       while(1) {
        $23 = (__ZNK5ImageclEijj($$sroa$042$053,$$04050,$$03948,$$03847)|0);
        $24 = $23 << 16 >> 16;
        $25 = ($23<<16>>16)<(0);
        if ($25) {
         label = 12;
        } else {
         $26 = HEAP32[$14>>2]|0;
         $27 = HEAP32[$13>>2]|0;
         $28 = (($26) - ($27))|0;
         $29 = $28 >> 1;
         $30 = ($24|0)<($29|0);
         if ($30) {
          $$0 = $24;
         } else {
          label = 12;
         }
        }
        if ((label|0) == 12) {
         label = 0;
         $$0 = 0;
        }
        $31 = HEAP32[$12>>2]|0;
        $32 = (($31) + ($$0<<1)|0);
        $33 = HEAP16[$32>>1]|0;
        __ZN5Image3setEijjs($$sroa$042$053,$$04050,$$03948,$$03847,$33);
        $34 = (($$03847) + 1)|0;
        $35 = (__ZNK5Image4colsEv($$sroa$042$053)|0);
        $36 = ($34>>>0)<($35>>>0);
        if ($36) {
         $$03847 = $34;
        } else {
         break;
        }
       }
      }
      $20 = (($$03948) + 1)|0;
      $21 = (__ZNK5Image4rowsEv($$sroa$042$053)|0);
      $22 = ($20>>>0)<($21>>>0);
      if ($22) {
       $$03948 = $20;
      } else {
       break;
      }
     }
    }
    $17 = (($$04050) + 1)|0;
    $18 = (__ZNK5Image9numPlanesEv($$sroa$042$053)|0);
    $19 = ($17|0)<($18|0);
    if ($19) {
     $$04050 = $17;
    } else {
     break;
    }
   }
  }
  $8 = ((($$sroa$042$053)) + 104|0);
  $9 = ($8|0)==($4|0);
  if ($9) {
   break;
  } else {
   $$sroa$042$053 = $8;
  }
 }
 return;
}
function __ZN5Image24undo_make_constant_planeEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03170 = 0, $$071 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($1>>>0)>(3);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ($1|0)==(1);
 if ($7) {
  $8 = HEAP32[$5>>2]|0;
  $9 = ((($8)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_ii[$10 & 63]($5)|0);
  $12 = ($11|0)==(1);
  if ($12) {
   $13 = ((($0)) + 20|0);
   $14 = ((($0)) + 24|0);
   HEAP32[$2>>2] = 0;
   $15 = ((($0)) + 36|0);
   $16 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($13,$14,$2,$15)|0);
   $17 = $16;
   $18 = HEAP32[$14>>2]|0;
   $19 = (($18) + -1)|0;
   $20 = HEAP32[$15>>2]|0;
   $21 = $19 >>> $20;
   $22 = ($21|0)==(-1);
   if (!($22)) {
    $$071 = 0;
    while(1) {
     $23 = HEAP32[$13>>2]|0;
     $24 = (($23) + -1)|0;
     $25 = HEAP32[$15>>2]|0;
     $26 = $24 >>> $25;
     $27 = ($26|0)==(-1);
     if (!($27)) {
      $$03170 = 0;
      while(1) {
       $44 = HEAP32[$16>>2]|0;
       $45 = HEAP32[$44>>2]|0;
       $46 = HEAP32[$4>>2]|0;
       $47 = HEAP32[$46>>2]|0;
       $48 = ((($47)) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (FUNCTION_TABLE_iiii[$49 & 63]($46,$$071,$$03170)|0);
       FUNCTION_TABLE_viiii[$45 & 15]($16,$$071,$$03170,$50);
       $51 = (($$03170) + 1)|0;
       $52 = HEAP32[$13>>2]|0;
       $53 = (($52) + -1)|0;
       $54 = HEAP32[$15>>2]|0;
       $55 = $53 >>> $54;
       $56 = (($55) + 1)|0;
       $57 = ($51>>>0)<($56>>>0);
       if ($57) {
        $$03170 = $51;
       } else {
        break;
       }
      }
     }
     $37 = (($$071) + 1)|0;
     $38 = HEAP32[$14>>2]|0;
     $39 = (($38) + -1)|0;
     $40 = HEAP32[$15>>2]|0;
     $41 = $39 >>> $40;
     $42 = (($41) + 1)|0;
     $43 = ($37>>>0)<($42>>>0);
     if ($43) {
      $$071 = $37;
     } else {
      break;
     }
    }
   }
   $28 = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $29 = ($28|0)==(0|0);
   if ($29) {
    HEAP32[$4>>2] = $17;
    STACKTOP = sp;return;
   }
   $30 = HEAP32[$28>>2]|0;
   $31 = ((($30)) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   FUNCTION_TABLE_vi[$32 & 127]($28);
   $$pr = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = $17;
   $33 = ($$pr|0)==(0|0);
   if ($33) {
    STACKTOP = sp;return;
   }
   $34 = HEAP32[$$pr>>2]|0;
   $35 = ((($34)) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   FUNCTION_TABLE_vi[$36 & 127]($$pr);
   STACKTOP = sp;return;
  }
 }
 $58 = HEAP32[$4>>2]|0;
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($59)) + 20|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (FUNCTION_TABLE_ii[$61 & 63]($58)|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = (__ZNK5ImageclEijj($0,$1,0,0)|0);
 HEAP16[$2>>1] = $63;
 $64 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $65 = ($64|0)==(0|0);
 if (!($65)) {
  $66 = HEAP32[$64>>2]|0;
  $67 = ((($66)) + 32|0);
  $68 = HEAP32[$67>>2]|0;
  FUNCTION_TABLE_vi[$68 & 127]($64);
 }
 $69 = ((($0)) + 40|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)<(9);
 L34: do {
  if ($71) {
   $72 = ($1|0)==(0);
   if ($72) {
    $73 = ((($0)) + 20|0);
    $74 = ((($0)) + 24|0);
    $75 = ((($0)) + 36|0);
    $76 = (__Z11make_uniqueI5PlaneIhEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($73,$74,$2,$75)|0);
    $77 = HEAP32[$0>>2]|0;
    HEAP32[$0>>2] = $76;
    $78 = ($77|0)==(0|0);
    if (!($78)) {
     $79 = HEAP32[$77>>2]|0;
     $80 = ((($79)) + 32|0);
     $81 = HEAP32[$80>>2]|0;
     FUNCTION_TABLE_vi[$81 & 127]($77);
    }
   }
   if ($7) {
    $82 = ((($0)) + 20|0);
    $83 = ((($0)) + 24|0);
    $84 = ((($0)) + 36|0);
    $85 = (__Z11make_uniqueI5PlaneIsEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($82,$83,$2,$84)|0);
    $86 = ((($0)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    HEAP32[$86>>2] = $85;
    $88 = ($87|0)==(0|0);
    if ($88) {
     break;
    }
    $89 = HEAP32[$87>>2]|0;
    $90 = ((($89)) + 32|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vi[$91 & 127]($87);
    break;
   }
   switch ($1|0) {
   case 2:  {
    $92 = ((($0)) + 20|0);
    $93 = ((($0)) + 24|0);
    $94 = ((($0)) + 36|0);
    $95 = (__Z11make_uniqueI5PlaneIsEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($92,$93,$2,$94)|0);
    $96 = ((($0)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP32[$96>>2] = $95;
    $98 = ($97|0)==(0|0);
    if ($98) {
     break L34;
    }
    $99 = HEAP32[$97>>2]|0;
    $100 = ((($99)) + 32|0);
    $101 = HEAP32[$100>>2]|0;
    FUNCTION_TABLE_vi[$101 & 127]($97);
    break L34;
    break;
   }
   case 3:  {
    $102 = ((($0)) + 20|0);
    $103 = ((($0)) + 24|0);
    $104 = ((($0)) + 36|0);
    $105 = (__Z11make_uniqueI5PlaneIhEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($102,$103,$2,$104)|0);
    $106 = ((($0)) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$106>>2] = $105;
    $108 = ($107|0)==(0|0);
    if ($108) {
     break L34;
    }
    $109 = HEAP32[$107>>2]|0;
    $110 = ((($109)) + 32|0);
    $111 = HEAP32[$110>>2]|0;
    FUNCTION_TABLE_vi[$111 & 127]($107);
    break L34;
    break;
   }
   default: {
    break L34;
   }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNK5Image4colsEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK5ImageclEijj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($0) + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiii[$8 & 63]($5,$2,$3)|0);
 return ($9|0);
}
function __ZN5Image3setEijjs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viiii[$8 & 15]($6,$2,$3,$4);
 return;
}
function __Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = $7&65535;
 $9 = HEAP32[$3>>2]|0;
 __ZN5PlaneIsEC2Ejjsi($4,$5,$6,$8,$9);
 return ($4|0);
}
function __Z11make_uniqueI5PlaneIhEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP16[$2>>1]|0;
 $8 = HEAP32[$3>>2]|0;
 __ZN5PlaneIhEC2Ejjsi($4,$5,$6,$7,$8);
 return ($4|0);
}
function __Z11make_uniqueI5PlaneIsEJRjS2_RsRiEENSt3__210unique_ptrIT_NS5_14default_deleteIS7_EEEEDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__Znwj(40)|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = HEAP16[$2>>1]|0;
 $8 = HEAP32[$3>>2]|0;
 __ZN5PlaneIsEC2Ejjsi($4,$5,$6,$7,$8);
 return ($4|0);
}
function __ZN5PlaneIsEC2Ejjsi($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = sp + 12|0;
 HEAP16[$5>>1] = $3;
 __ZN12GeneralPlaneC2Ev($0);
 HEAP32[$0>>2] = (1668);
 $6 = ((($0)) + 4|0);
 $7 = (($1) + -1)|0;
 $8 = $7 >>> $4;
 $9 = (($8) + 1)|0;
 $10 = (($2) + -1)|0;
 $11 = $10 >>> $4;
 $12 = (($11) + 1)|0;
 $13 = Math_imul($9, $12)|0;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2EjRKs($6,$13,$5);
 $14 = ((($0)) + 20|0);
 HEAP32[$14>>2] = $9;
 $15 = ((($0)) + 24|0);
 HEAP32[$15>>2] = $12;
 $16 = ((($0)) + 28|0);
 HEAP32[$16>>2] = $4;
 $17 = ((($0)) + 32|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 36|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$6>>2]|0;
 $20 = ((($0)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$15>>2]|0;
 $22 = ($21>>>0)>(1);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$14>>2]|0;
 HEAP32[$vararg_buffer>>2] = $23;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 16;
 __Z8v_printfiPKcz(6,3305,$vararg_buffer);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2EjRKs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP16[$2>>1]|0;
  HEAP16[$8>>1] = $9;
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 2|0);
  HEAP32[$7>>2] = $11;
  $12 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  } else {
   $$0$i = $12;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1|0)<(0);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 1;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<1)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -2|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 1;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<1)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 1;
 $7 = (($2) + ($6<<1)|0);
 $8 = (($2) + ($1<<1)|0);
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN5PlaneIsE3setEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $1)|0;
 $7 = (($6) + ($2))|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<1)|0);
 HEAP16[$10>>1] = $3;
 return;
}
function __ZNK5PlaneIsE3getEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $1)|0;
 $6 = (($5) + ($2))|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 return ($10|0);
}
function __ZNK5PlaneIsE17prepare_zoomlevelEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 >>> $4;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($5, $7)|0;
 $9 = ((($0)) + 32|0);
 HEAP32[$9>>2] = $8;
 $10 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = $10 >>> $11;
 $13 = ((($0)) + 36|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNK5PlaneIsE8get_fastEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = Math_imul($4, $1)|0;
 $6 = ((($0)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($7, $2)|0;
 $9 = (($8) + ($5))|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9<<1)|0);
 $13 = HEAP16[$12>>1]|0;
 return ($13|0);
}
function __ZN5PlaneIsE8set_fastEjjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = Math_imul($5, $1)|0;
 $7 = ((($0)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($8, $2)|0;
 $10 = (($9) + ($6))|0;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10<<1)|0);
 HEAP16[$13>>1] = $3;
 return;
}
function __ZNK5PlaneIsE15bytes_per_pixelEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN5PlaneIsED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1668);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($1);
 __ZN12GeneralPlaneD2Ev($0);
 return;
}
function __ZN5PlaneIsED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5PlaneIsED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN5PlaneIsE3setEijjs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $6 = Math_imul($5, $2)|0;
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 >>> $8;
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $14 = Math_imul($13, $3)|0;
 $15 = HEAP32[$7>>2]|0;
 $16 = $14 >>> $15;
 $17 = (($16) + ($12))|0;
 $18 = ((($0)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($17<<1)|0);
 HEAP16[$20>>1] = $4;
 return;
}
function __ZNK5PlaneIsE3getEijj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN12GeneralPlane17zoom_rowpixelsizeEi($1)|0);
 $5 = Math_imul($4, $2)|0;
 $6 = ((($0)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5 >>> $7;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = (__ZN12GeneralPlane17zoom_colpixelsizeEi($1)|0);
 $13 = Math_imul($12, $3)|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = $13 >>> $14;
 $16 = (($15) + ($11))|0;
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($16<<1)|0);
 $20 = HEAP16[$19>>1]|0;
 return ($20|0);
}
function __ZN5PlaneIsE15normalize_scaleEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN5PlaneIsE14accept_visitorER12PlaneVisitor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 31]($1,$0);
 return;
}
function __ZN5PlaneIsE13compute_crc32Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5 << 1;
 $9 = Math_imul($8, $7)|0;
 $10 = (__Z10crc32_fastPKvjj($3,$9,$1)|0);
 return ($10|0);
}
function __ZN19ColorRangesPaletteCC2EPK11ColorRangesPKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1732);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($2)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 20|0);
 HEAP32[$14>>2] = $13;
 return;
}
function __ZN19ColorRangesPaletteCD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK19ColorRangesPaletteC9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK19ColorRangesPaletteC3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK19ColorRangesPaletteC3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 8|0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 return ($4|0);
}
function __ZNK19ColorRangesPaletteC6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[$3>>1] = 0;
 $5 = (((($0)) + 8|0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6&65535;
 HEAP16[$4>>1] = $7;
 return;
}
function __ZNK19ColorRangesPaletteC8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = ($15>>>0)<($9>>>0);
  $$sroa$speculated$i = $19 ? $9 : $15;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($14))|0;
  $22 = $21 >> 1;
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($2,$$0$i,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP16[$1>>1]|0;
  HEAP16[$24>>1] = $25;
  $26 = HEAP32[$23>>2]|0;
  $27 = ((($26)) + 2|0);
  HEAP32[$23>>2] = $27;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1|0)<(0);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 1;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<1)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<1)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 1;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<1)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 1;
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -2|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 1;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<1)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 1;
 $6 = (($1) + ($5<<1)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 1;
 $11 = (($1) + ($10<<1)|0);
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$6,$11,$6);
 return;
}
function __ZN17TransformPaletteAI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1776);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN17TransformPaletteAI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1776);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseINS_5tupleIJssssEEENS_9allocatorIS2_EEED2Ev($1);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN17TransformPaletteAI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17TransformPaletteAI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN17TransformPaletteAI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ($5|0)<(4);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 63]($1,3)|0);
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iii[$13 & 63]($1,3)|0);
 $15 = ($10<<16>>16)==($14<<16>>16);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($0)) + 22|0);
 HEAP8[$16>>0] = 0;
 $$0 = 1;
 return ($$0|0);
}
function __ZN17TransformPaletteAI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)!=(0);
 $3 = ((($0)) + 20|0);
 $4 = $2&1;
 HEAP8[$3>>0] = $4;
 $5 = ($1|0)>(0);
 $6 = ((($0)) + 21|0);
 if ($5) {
  HEAP8[$6>>0] = 1;
  $7 = ((($0)) + 16|0);
  HEAP32[$7>>2] = $1;
  return;
 } else {
  HEAP8[$6>>0] = 0;
  $8 = (0 - ($1))|0;
  $9 = ((($0)) + 16|0);
  HEAP32[$9>>2] = $8;
  return;
 }
}
function __ZN17TransformPaletteAI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0198 = 0, $$044201 = 0, $$in$sroa$speculate$load$156 = 0, $$sroa$0$0199 = 0, $$sroa$0$1 = 0, $$sroa$6$0$$in$sroa$speculate$load$156 = 0, $$sroa$6$0200 = 0, $$sroa$6$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond67 = 0, $sext$mask = 0, $sext$mask64 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 82560|0;
 $vararg_buffer = sp + 8|0;
 $3 = sp + 82544|0;
 $4 = sp + 66024|0;
 $5 = sp + 49524|0;
 $6 = sp + 33024|0;
 $7 = sp + 16524|0;
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp + 82536|0;
 $11 = sp + 82528|0;
 $12 = sp;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($5,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($6,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($7,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($8,$2,2,226050910);
 $13 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,1,30000)|0);
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($9,2);
 $14 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,0,1)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $141 = ($13|0)==(0);
  if (!($141)) {
   $142 = ((($0)) + 20|0);
   $143 = ((($0)) + 4|0);
   $144 = ((($0)) + 8|0);
   $145 = ((($0)) + 12|0);
   $146 = ((($12)) + 2|0);
   $147 = ((($12)) + 4|0);
   $148 = ((($12)) + 6|0);
   $149 = ((($0)) + 4|0);
   $150 = ((($0)) + 8|0);
   $151 = ((($0)) + 12|0);
   $$0198 = 0;
   while(1) {
    $152 = HEAP32[$1>>2]|0;
    $153 = ((($152)) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (FUNCTION_TABLE_iii[$154 & 63]($1,3)|0);
    $156 = HEAP32[$1>>2]|0;
    $157 = ((($156)) + 16|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = (FUNCTION_TABLE_iii[$158 & 63]($1,3)|0);
    $160 = $155 << 16 >> 16;
    $161 = $159 << 16 >> 16;
    $162 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($8,$160,$161)|0);
    $163 = $162&65535;
    $164 = HEAP8[$142>>0]|0;
    $165 = ($164<<24>>24)!=(0);
    $sext$mask = $162 & 65535;
    $166 = ($sext$mask|0)==(0);
    $or$cond67 = $166 & $165;
    if ($or$cond67) {
     $167 = $12;
     $168 = $167;
     HEAP32[$168>>2] = 0;
     $169 = (($167) + 4)|0;
     $170 = $169;
     HEAP32[$170>>2] = 0;
     $171 = HEAP32[$144>>2]|0;
     $172 = HEAP32[$145>>2]|0;
     $173 = ($171>>>0)<($172>>>0);
     if ($173) {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$143,1);
      $174 = HEAP32[$144>>2]|0;
      $175 = $12;
      $176 = $175;
      $177 = HEAP32[$176>>2]|0;
      $178 = (($175) + 4)|0;
      $179 = $178;
      $180 = HEAP32[$179>>2]|0;
      $181 = $174;
      $182 = $181;
      HEAP16[$182>>1]=$177&65535;HEAP16[$182+2>>1]=$177>>>16;
      $183 = (($181) + 4)|0;
      $184 = $183;
      HEAP16[$184>>1]=$180&65535;HEAP16[$184+2>>1]=$180>>>16;
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
      $185 = HEAP32[$144>>2]|0;
      $186 = ((($185)) + 8|0);
      HEAP32[$144>>2] = $186;
     } else {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($143,$12);
     }
    } else {
     $187 = HEAP32[$1>>2]|0;
     $188 = ((($187)) + 20|0);
     $189 = HEAP32[$188>>2]|0;
     FUNCTION_TABLE_viiiii[$189 & 31]($1,0,$9,$10,$11);
     $190 = HEAP16[$10>>1]|0;
     $191 = $190 << 16 >> 16;
     $192 = HEAP16[$11>>1]|0;
     $193 = $192 << 16 >> 16;
     $194 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($5,$191,$193)|0);
     $195 = $194&65535;
     $196 = HEAP32[$9>>2]|0;
     HEAP16[$196>>1] = $195;
     $197 = HEAP32[$1>>2]|0;
     $198 = ((($197)) + 20|0);
     $199 = HEAP32[$198>>2]|0;
     FUNCTION_TABLE_viiiii[$199 & 31]($1,1,$9,$10,$11);
     $200 = HEAP16[$10>>1]|0;
     $201 = $200 << 16 >> 16;
     $202 = HEAP16[$11>>1]|0;
     $203 = $202 << 16 >> 16;
     $204 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($6,$201,$203)|0);
     $205 = $204&65535;
     $206 = HEAP32[$9>>2]|0;
     $207 = ((($206)) + 2|0);
     HEAP16[$207>>1] = $205;
     $208 = HEAP32[$1>>2]|0;
     $209 = ((($208)) + 20|0);
     $210 = HEAP32[$209>>2]|0;
     FUNCTION_TABLE_viiiii[$210 & 31]($1,2,$9,$10,$11);
     $211 = HEAP16[$10>>1]|0;
     $212 = $211 << 16 >> 16;
     $213 = HEAP16[$11>>1]|0;
     $214 = $213 << 16 >> 16;
     $215 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($7,$212,$214)|0);
     $216 = $215&65535;
     HEAP16[$12>>1] = $163;
     HEAP16[$146>>1] = $195;
     HEAP16[$147>>1] = $205;
     HEAP16[$148>>1] = $216;
     $217 = HEAP32[$150>>2]|0;
     $218 = HEAP32[$151>>2]|0;
     $219 = ($217|0)==($218|0);
     if ($219) {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($149,$12);
     } else {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$149,1);
      $220 = HEAP32[$150>>2]|0;
      $221 = $12;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = $220;
      $228 = $227;
      HEAP16[$228>>1]=$223&65535;HEAP16[$228+2>>1]=$223>>>16;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP16[$230>>1]=$226&65535;HEAP16[$230+2>>1]=$226>>>16;
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
      $231 = HEAP32[$150>>2]|0;
      $232 = ((($231)) + 8|0);
      HEAP32[$150>>2] = $232;
     }
    }
    $233 = (($$0198) + 1)|0;
    $234 = ($233>>>0)<($13>>>0);
    if ($234) {
     $$0198 = $233;
    } else {
     break;
    }
   }
  }
  $235 = ((($0)) + 4|0);
  $236 = ((($0)) + 8|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$235>>2]|0;
  $239 = (($237) - ($238))|0;
  $240 = $239 >> 3;
  HEAP32[$vararg_buffer>>2] = $240;
  __Z8v_printfiPKcz(5,3645,$vararg_buffer);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($9);
  STACKTOP = sp;return 1;
 } else {
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 63]($1,3)|0);
  $20 = HEAP32[$1>>2]|0;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (FUNCTION_TABLE_iii[$22 & 63]($1,0)|0);
  $24 = HEAP32[$1>>2]|0;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_iii[$26 & 63]($1,1)|0);
  $28 = HEAP32[$1>>2]|0;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (FUNCTION_TABLE_iii[$30 & 63]($1,2)|0);
  HEAP16[$10>>1] = $19;
  $32 = ((($10)) + 2|0);
  HEAP16[$32>>1] = $23;
  $33 = ((($10)) + 4|0);
  HEAP16[$33>>1] = $27;
  $34 = ((($10)) + 6|0);
  HEAP16[$34>>1] = $31;
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iii[$37 & 63]($1,3)|0);
  $39 = HEAP32[$1>>2]|0;
  $40 = ((($39)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iii[$41 & 63]($1,0)|0);
  $43 = HEAP32[$1>>2]|0;
  $44 = ((($43)) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_iii[$45 & 63]($1,1)|0);
  $47 = HEAP32[$1>>2]|0;
  $48 = ((($47)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iii[$49 & 63]($1,2)|0);
  HEAP16[$11>>1] = $38;
  $51 = ((($11)) + 2|0);
  HEAP16[$51>>1] = $42;
  $52 = ((($11)) + 4|0);
  HEAP16[$52>>1] = $46;
  $53 = ((($11)) + 6|0);
  HEAP16[$53>>1] = $50;
  $54 = ($13|0)==(0);
  if (!($54)) {
   $55 = ((($0)) + 20|0);
   $56 = ((($0)) + 4|0);
   $57 = ((($0)) + 8|0);
   $58 = ((($0)) + 12|0);
   $59 = ((($12)) + 2|0);
   $60 = ((($12)) + 4|0);
   $61 = ((($12)) + 6|0);
   $62 = ((($0)) + 4|0);
   $63 = ((($0)) + 8|0);
   $64 = ((($0)) + 12|0);
   $$044201 = 0;$$sroa$0$0199 = -1;$$sroa$6$0200 = -1;
   while(1) {
    $65 = HEAP16[$10>>1]|0;
    $66 = $65 << 16 >> 16;
    $67 = HEAP16[$11>>1]|0;
    $68 = $67 << 16 >> 16;
    $69 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($8,$66,$68)|0);
    $70 = $69&65535;
    $71 = HEAP8[$55>>0]|0;
    $72 = ($71<<24>>24)!=(0);
    $sext$mask64 = $69 & 65535;
    $73 = ($sext$mask64|0)==(0);
    $or$cond = $73 & $72;
    if ($or$cond) {
     $74 = $12;
     $75 = $74;
     HEAP32[$75>>2] = 0;
     $76 = (($74) + 4)|0;
     $77 = $76;
     HEAP32[$77>>2] = 0;
     $78 = HEAP32[$57>>2]|0;
     $79 = HEAP32[$58>>2]|0;
     $80 = ($78>>>0)<($79>>>0);
     if ($80) {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$56,1);
      $81 = HEAP32[$57>>2]|0;
      $82 = $12;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = (($82) + 4)|0;
      $86 = $85;
      $87 = HEAP32[$86>>2]|0;
      $88 = $81;
      $89 = $88;
      HEAP16[$89>>1]=$84&65535;HEAP16[$89+2>>1]=$84>>>16;
      $90 = (($88) + 4)|0;
      $91 = $90;
      HEAP16[$91>>1]=$87&65535;HEAP16[$91+2>>1]=$87>>>16;
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
      $92 = HEAP32[$57>>2]|0;
      $93 = ((($92)) + 8|0);
      HEAP32[$57>>2] = $93;
     } else {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($56,$12);
     }
     $$sroa$0$1 = $$sroa$0$0199;$$sroa$6$1 = $$sroa$6$0200;
    } else {
     $94 = ($$sroa$0$0199<<16>>16)==($70<<16>>16);
     $$in$sroa$speculate$load$156 = HEAP16[$32>>1]|0;
     $$sroa$6$0$$in$sroa$speculate$load$156 = $94 ? $$sroa$6$0200 : $$in$sroa$speculate$load$156;
     $95 = $$sroa$6$0$$in$sroa$speculate$load$156 << 16 >> 16;
     $96 = HEAP16[$51>>1]|0;
     $97 = $96 << 16 >> 16;
     $98 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($5,$95,$97)|0);
     $99 = $98&65535;
     $100 = HEAP32[$9>>2]|0;
     HEAP16[$100>>1] = $99;
     $101 = HEAP32[$1>>2]|0;
     $102 = ((($101)) + 20|0);
     $103 = HEAP32[$102>>2]|0;
     FUNCTION_TABLE_viiiii[$103 & 31]($1,1,$9,$33,$52);
     $104 = HEAP16[$33>>1]|0;
     $105 = $104 << 16 >> 16;
     $106 = HEAP16[$52>>1]|0;
     $107 = $106 << 16 >> 16;
     $108 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($6,$105,$107)|0);
     $109 = $108&65535;
     $110 = HEAP32[$9>>2]|0;
     $111 = ((($110)) + 2|0);
     HEAP16[$111>>1] = $109;
     $112 = HEAP32[$1>>2]|0;
     $113 = ((($112)) + 20|0);
     $114 = HEAP32[$113>>2]|0;
     FUNCTION_TABLE_viiiii[$114 & 31]($1,2,$9,$34,$53);
     $115 = HEAP16[$34>>1]|0;
     $116 = $115 << 16 >> 16;
     $117 = HEAP16[$53>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($7,$116,$118)|0);
     $120 = $119&65535;
     HEAP16[$12>>1] = $70;
     HEAP16[$59>>1] = $99;
     HEAP16[$60>>1] = $109;
     HEAP16[$61>>1] = $120;
     $121 = HEAP32[$63>>2]|0;
     $122 = HEAP32[$64>>2]|0;
     $123 = ($121|0)==($122|0);
     if ($123) {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($62,$12);
     } else {
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$62,1);
      $124 = HEAP32[$63>>2]|0;
      $125 = $12;
      $126 = $125;
      $127 = HEAP32[$126>>2]|0;
      $128 = (($125) + 4)|0;
      $129 = $128;
      $130 = HEAP32[$129>>2]|0;
      $131 = $124;
      $132 = $131;
      HEAP16[$132>>1]=$127&65535;HEAP16[$132+2>>1]=$127>>>16;
      $133 = (($131) + 4)|0;
      $134 = $133;
      HEAP16[$134>>1]=$130&65535;HEAP16[$134+2>>1]=$130>>>16;
      __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
      $135 = HEAP32[$63>>2]|0;
      $136 = ((($135)) + 8|0);
      HEAP32[$63>>2] = $136;
     }
     $137 = HEAP16[$12>>1]|0;
     HEAP16[$10>>1] = $137;
     $138 = HEAP16[$59>>1]|0;
     $$sroa$0$1 = $137;$$sroa$6$1 = $138;
    }
    $139 = (($$044201) + 1)|0;
    $140 = ($139>>>0)<($13>>>0);
    if ($140) {
     $$044201 = $139;$$sroa$0$0199 = $$sroa$0$1;$$sroa$6$0200 = $$sroa$6$1;
    } else {
     break;
    }
   }
  }
  $235 = ((($0)) + 4|0);
  $236 = ((($0)) + 8|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$235>>2]|0;
  $239 = (($237) - ($238))|0;
  $240 = $239 >> 3;
  HEAP32[$vararg_buffer>>2] = $240;
  __Z8v_printfiPKcz(5,3645,$vararg_buffer);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($9);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN17TransformPaletteAI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$011$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $$sroa$011$015 = $3;
  while(1) {
   $14 = ((($$sroa$011$015)) + 44|0);
   HEAP8[$14>>0] = 1;
   $15 = ((($$sroa$011$015)) + 56|0);
   HEAP8[$15>>0] = 0;
   $16 = ((($$sroa$011$015)) + 104|0);
   $17 = ($16|0)==($5|0);
   if ($17) {
    break;
   } else {
    $$sroa$011$015 = $16;
   }
  }
 }
 $7 = (__Znwj(12)|0);
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$8>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 3;
 __ZN19ColorRangesPaletteAC2EPK11ColorRangesi($7,$2,$13);
 return ($7|0);
}
function __ZNK17TransformPaletteAI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04249 = 0, $$048 = 0, $$sroa$044$051 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ((($0)) + 4|0);
 $$sroa$044$051 = $2;
 while(1) {
  __ZN5Image24undo_make_constant_planeEi($$sroa$044$051,0);
  __ZN5Image24undo_make_constant_planeEi($$sroa$044$051,1);
  __ZN5Image24undo_make_constant_planeEi($$sroa$044$051,2);
  __ZN5Image24undo_make_constant_planeEi($$sroa$044$051,3);
  $7 = (__ZNK5Image4rowsEv($$sroa$044$051)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $$04249 = 0;
   while(1) {
    $9 = (__ZNK5Image4colsEv($$sroa$044$051)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     $$048 = 0;
     while(1) {
      $17 = (__ZNK5ImageclEijj($$sroa$044$051,1,$$04249,$$048)|0);
      $18 = $17 << 16 >> 16;
      $19 = HEAP32[$6>>2]|0;
      $20 = (((($19) + ($18<<3)|0)) + 2|0);
      $21 = HEAP16[$20>>1]|0;
      __ZN5Image3setEijjs($$sroa$044$051,0,$$04249,$$048,$21);
      $22 = HEAP32[$6>>2]|0;
      $23 = (((($22) + ($18<<3)|0)) + 4|0);
      $24 = HEAP16[$23>>1]|0;
      __ZN5Image3setEijjs($$sroa$044$051,1,$$04249,$$048,$24);
      $25 = HEAP32[$6>>2]|0;
      $26 = (((($25) + ($18<<3)|0)) + 6|0);
      $27 = HEAP16[$26>>1]|0;
      __ZN5Image3setEijjs($$sroa$044$051,2,$$04249,$$048,$27);
      $28 = HEAP32[$6>>2]|0;
      $29 = (($28) + ($18<<3)|0);
      $30 = HEAP16[$29>>1]|0;
      __ZN5Image3setEijjs($$sroa$044$051,3,$$04249,$$048,$30);
      $31 = (($$048) + 1)|0;
      $32 = (__ZNK5Image4colsEv($$sroa$044$051)|0);
      $33 = ($31>>>0)<($32>>>0);
      if ($33) {
       $$048 = $31;
      } else {
       break;
      }
     }
    }
    $14 = (($$04249) + 1)|0;
    $15 = (__ZNK5Image4rowsEv($$sroa$044$051)|0);
    $16 = ($14>>>0)<($15>>>0);
    if ($16) {
     $$04249 = $14;
    } else {
     break;
    }
   }
  }
  $11 = ((($$sroa$044$051)) + 44|0);
  HEAP8[$11>>0] = 0;
  $12 = ((($$sroa$044$051)) + 104|0);
  $13 = ($12|0)==($4|0);
  if ($13) {
   break;
  } else {
   $$sroa$044$051 = $12;
  }
 }
 return;
}
function __ZNK17TransformPaletteAI8BufferIOE20is_palette_transformEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN19ColorRangesPaletteAC2EPK11ColorRangesi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1820);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN19ColorRangesPaletteAD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK19ColorRangesPaletteA9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK19ColorRangesPaletteA3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(3);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($1|0)==(3);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iii[$8 & 63]($5,$1)|0);
 $$0 = $9;
 return ($$0|0);
}
function __ZNK19ColorRangesPaletteA3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 1:  {
  $2 = ((($0)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + 65535)|0;
  $5 = $4&65535;
  $$0 = $5;
  return ($$0|0);
  break;
 }
 case 3:  {
  $$0 = 1;
  return ($$0|0);
  break;
 }
 case 2: case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$10 & 63]($7,$1)|0);
  $$0 = $11;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZNK19ColorRangesPaletteA6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1|0)==(1);
 if ($5) {
  HEAP16[$3>>1] = 0;
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 65535)|0;
  $9 = $8&65535;
  HEAP16[$4>>1] = $9;
  return;
 }
 $10 = ($1|0)<(3);
 if ($10) {
  HEAP16[$3>>1] = 0;
  HEAP16[$4>>1] = 0;
  return;
 }
 $11 = ($1|0)==(3);
 if ($11) {
  HEAP16[$3>>1] = 1;
  HEAP16[$4>>1] = 1;
  return;
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$2,$3,$4);
  return;
 }
}
function __ZNK19ColorRangesPaletteA8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK19ColorRangesPaletteA8previousEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$1);
 __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEj($0,$1);
 return;
}
function __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 3;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 3;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 2;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 3;
  __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEEC2EjjS5_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = $26;
  $28 = HEAPU16[$27>>1]|(HEAPU16[$27+2>>1]<<16);
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAPU16[$30>>1]|(HEAPU16[$30+2>>1]<<16);
  $32 = $25;
  $33 = $32;
  HEAP16[$33>>1]=$28&65535;HEAP16[$33+2>>1]=$28>>>16;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP16[$35>>1]=$31&65535;HEAP16[$35+2>>1]=$31>>>16;
  $36 = HEAP32[$24>>2]|0;
  $37 = ((($36)) + 8|0);
  HEAP32[$24>>2] = $37;
  __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 3;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 3;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 2;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 3;
  __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEEC2EjjS5_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $1;
  $27 = $26;
  $28 = HEAPU16[$27>>1]|(HEAPU16[$27+2>>1]<<16);
  $29 = (($26) + 4)|0;
  $30 = $29;
  $31 = HEAPU16[$30>>1]|(HEAPU16[$30+2>>1]<<16);
  $32 = $25;
  $33 = $32;
  HEAP16[$33>>1]=$28&65535;HEAP16[$33+2>>1]=$28>>>16;
  $34 = (($32) + 4)|0;
  $35 = $34;
  HEAP16[$35>>1]=$31&65535;HEAP16[$35+2>>1]=$31>>>16;
  $36 = HEAP32[$24>>2]|0;
  $37 = ((($36)) + 8|0);
  HEAP32[$24>>2] = $37;
  __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 536870911;
}
function __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEEC2EjjS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(536870911);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 3;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<3)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<3)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 3;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<3)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 3;
 __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferINS_5tupleIJssssEEERNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -8|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<3)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 3;
 $6 = (($1) + ($5<<3)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 3;
 $11 = (($1) + ($10<<3)|0);
 __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 3;
 $7 = (($2) + ($6<<3)|0);
 $8 = (($2) + ($1<<3)|0);
 __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJssssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $$0 = $1;
 while(1) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($2,$0,1);
  $4 = HEAP32[$3>>2]|0;
  HEAP16[$4>>1] = 0;
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 2|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_5tupleIJssssEEENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -8|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<3)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN16TransformPaletteI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1864);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN16TransformPaletteI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1864);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseINS_5tupleIJsssEEENS_9allocatorIS2_EEED2Ev($1);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN16TransformPaletteI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN16TransformPaletteI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN16TransformPaletteI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 63]($1,0)|0);
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 63]($1,2)|0);
  $16 = ($15<<16>>16)==(0);
  if ($16) {
   $17 = HEAP32[$1>>2]|0;
   $18 = ((($17)) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_ii[$19 & 63]($1)|0);
   $21 = ($20|0)>(3);
   if ($21) {
    $22 = HEAP32[$1>>2]|0;
    $23 = ((($22)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_iii[$24 & 63]($1,3)|0);
    $26 = ($25<<16>>16)==(1);
    if ($26) {
     $27 = HEAP32[$1>>2]|0;
     $28 = ((($27)) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_iii[$29 & 63]($1,3)|0);
     $31 = ($30<<16>>16)==(1);
     if ($31) {
      $$0 = 0;
      return ($$0|0);
     }
    }
   }
  }
 }
 $32 = HEAP32[$1>>2]|0;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (FUNCTION_TABLE_iii[$34 & 63]($1,1)|0);
 $36 = HEAP32[$1>>2]|0;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (FUNCTION_TABLE_iii[$38 & 63]($1,1)|0);
 $40 = ($35<<16>>16)==($39<<16>>16);
 if ($40) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ((($41)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_iii[$43 & 63]($1,2)|0);
  $45 = HEAP32[$1>>2]|0;
  $46 = ((($45)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (FUNCTION_TABLE_iii[$47 & 63]($1,2)|0);
  $49 = ($44<<16>>16)==($48<<16>>16);
  if ($49) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $50 = HEAP32[$1>>2]|0;
 $51 = ((($50)) + 8|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (FUNCTION_TABLE_ii[$52 & 63]($1)|0);
 $54 = ($53|0)>(3);
 $55 = ((($0)) + 21|0);
 $$ = $54&1;
 HEAP8[$55>>0] = $$;
 $$0 = 1;
 return ($$0|0);
}
function __ZN16TransformPaletteI8BufferIOE9configureEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(0);
 $3 = ((($0)) + 20|0);
 if ($2) {
  HEAP8[$3>>0] = 1;
  $4 = ((($0)) + 16|0);
  HEAP32[$4>>2] = $1;
  return;
 } else {
  HEAP8[$3>>0] = 0;
  $5 = (0 - ($1))|0;
  $6 = ((($0)) + 16|0);
  HEAP32[$6>>2] = $5;
  return;
 }
}
function __ZN16TransformPaletteI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0124 = 0, $$037123 = 0, $$in$sroa$speculate$load$92 = 0, $$sroa$0$0121 = 0, $$sroa$6$0$$in$sroa$speculate$load$92 = 0, $$sroa$6$0122 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 66080|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 49556|0;
 $4 = sp + 33056|0;
 $5 = sp + 16556|0;
 $6 = sp + 56|0;
 $7 = sp + 44|0;
 $8 = sp + 66068|0;
 $9 = sp + 66062|0;
 $10 = sp + 66056|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($3,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($5,$2,2,226050910);
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($6,$2,2,226050910);
 $11 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($3,1,30000)|0);
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($7,2);
 $12 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($3,0,1)|0);
 $13 = ($12|0)!=(0);
 $14 = $13 ? 3703 : 3710;
 HEAP32[$vararg_buffer>>2] = $11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $14;
 __Z8v_printfiPKcz(10,3719,$vararg_buffer);
 if ($13) {
  $15 = HEAP32[$1>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 63]($1,0)|0);
  $19 = HEAP32[$1>>2]|0;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iii[$21 & 63]($1,1)|0);
  $23 = HEAP32[$1>>2]|0;
  $24 = ((($23)) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iii[$25 & 63]($1,2)|0);
  HEAP16[$8>>1] = $18;
  $27 = ((($8)) + 2|0);
  HEAP16[$27>>1] = $22;
  $28 = ((($8)) + 4|0);
  HEAP16[$28>>1] = $26;
  $29 = HEAP32[$1>>2]|0;
  $30 = ((($29)) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (FUNCTION_TABLE_iii[$31 & 63]($1,0)|0);
  $33 = HEAP32[$1>>2]|0;
  $34 = ((($33)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_iii[$35 & 63]($1,1)|0);
  $37 = HEAP32[$1>>2]|0;
  $38 = ((($37)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iii[$39 & 63]($1,2)|0);
  HEAP16[$9>>1] = $32;
  $41 = ((($9)) + 2|0);
  HEAP16[$41>>1] = $36;
  $42 = ((($9)) + 4|0);
  HEAP16[$42>>1] = $40;
  $43 = ($11|0)==(0);
  if (!($43)) {
   $44 = ((($10)) + 2|0);
   $45 = ((($10)) + 4|0);
   $46 = ((($0)) + 4|0);
   $47 = ((($0)) + 8|0);
   $48 = ((($0)) + 12|0);
   $$037123 = 0;$$sroa$0$0121 = -1;$$sroa$6$0122 = -1;
   while(1) {
    $49 = HEAP16[$8>>1]|0;
    $50 = $49 << 16 >> 16;
    $51 = HEAP16[$9>>1]|0;
    $52 = $51 << 16 >> 16;
    $53 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,$50,$52)|0);
    $54 = $53&65535;
    $55 = HEAP32[$7>>2]|0;
    HEAP16[$55>>1] = $54;
    $56 = HEAP32[$1>>2]|0;
    $57 = ((($56)) + 20|0);
    $58 = HEAP32[$57>>2]|0;
    FUNCTION_TABLE_viiiii[$58 & 31]($1,1,$7,$27,$41);
    $59 = ($$sroa$0$0121<<16>>16)==($54<<16>>16);
    $$in$sroa$speculate$load$92 = HEAP16[$27>>1]|0;
    $$sroa$6$0$$in$sroa$speculate$load$92 = $59 ? $$sroa$6$0122 : $$in$sroa$speculate$load$92;
    $60 = $$sroa$6$0$$in$sroa$speculate$load$92 << 16 >> 16;
    $61 = HEAP16[$41>>1]|0;
    $62 = $61 << 16 >> 16;
    $63 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($5,$60,$62)|0);
    $64 = $63&65535;
    $65 = HEAP32[$7>>2]|0;
    $66 = ((($65)) + 2|0);
    HEAP16[$66>>1] = $64;
    $67 = HEAP32[$1>>2]|0;
    $68 = ((($67)) + 20|0);
    $69 = HEAP32[$68>>2]|0;
    FUNCTION_TABLE_viiiii[$69 & 31]($1,2,$7,$28,$42);
    $70 = HEAP16[$28>>1]|0;
    $71 = $70 << 16 >> 16;
    $72 = HEAP16[$42>>1]|0;
    $73 = $72 << 16 >> 16;
    $74 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($6,$71,$73)|0);
    $75 = $74&65535;
    HEAP16[$10>>1] = $54;
    HEAP16[$44>>1] = $64;
    HEAP16[$45>>1] = $75;
    $76 = HEAP32[$47>>2]|0;
    $77 = HEAP32[$48>>2]|0;
    $78 = ($76|0)==($77|0);
    if ($78) {
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($46,$10);
    } else {
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($vararg_buffer,$46,1);
     $79 = HEAP32[$47>>2]|0;
     ;HEAP16[$79>>1]=HEAP16[$10>>1]|0;HEAP16[$79+2>>1]=HEAP16[$10+2>>1]|0;HEAP16[$79+4>>1]=HEAP16[$10+4>>1]|0;
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer);
     $80 = HEAP32[$47>>2]|0;
     $81 = ((($80)) + 6|0);
     HEAP32[$47>>2] = $81;
    }
    $82 = HEAP16[$10>>1]|0;
    HEAP16[$8>>1] = $82;
    $83 = HEAP16[$44>>1]|0;
    $84 = $82 << 16 >> 16;
    $85 = $83 << 16 >> 16;
    $86 = HEAP16[$45>>1]|0;
    $87 = $86 << 16 >> 16;
    HEAP32[$vararg_buffer2>>2] = $84;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $85;
    $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
    HEAP32[$vararg_ptr6>>2] = $87;
    __Z8v_printfiPKcz(10,3743,$vararg_buffer2);
    $88 = (($$037123) + 1)|0;
    $89 = ($88>>>0)<($11>>>0);
    if ($89) {
     $$037123 = $88;$$sroa$0$0121 = $82;$$sroa$6$0122 = $83;
    } else {
     break;
    }
   }
  }
  $140 = ((($0)) + 4|0);
  $141 = ((($0)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = HEAP32[$140>>2]|0;
  $144 = (($142) - ($143))|0;
  $145 = (($144|0) / 6)&-1;
  HEAP32[$vararg_buffer12>>2] = $145;
  __Z8v_printfiPKcz(5,3645,$vararg_buffer12);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($7);
  STACKTOP = sp;return 1;
 } else {
  $90 = ($11|0)==(0);
  if (!($90)) {
   $91 = ((($10)) + 2|0);
   $92 = ((($10)) + 4|0);
   $93 = ((($0)) + 4|0);
   $94 = ((($0)) + 8|0);
   $95 = ((($0)) + 12|0);
   $$0124 = 0;
   while(1) {
    $96 = HEAP32[$1>>2]|0;
    $97 = ((($96)) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    FUNCTION_TABLE_viiiii[$98 & 31]($1,0,$7,$8,$9);
    $99 = HEAP16[$8>>1]|0;
    $100 = $99 << 16 >> 16;
    $101 = HEAP16[$9>>1]|0;
    $102 = $101 << 16 >> 16;
    $103 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,$100,$102)|0);
    $104 = $103&65535;
    $105 = HEAP32[$7>>2]|0;
    HEAP16[$105>>1] = $104;
    $106 = HEAP32[$1>>2]|0;
    $107 = ((($106)) + 20|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_viiiii[$108 & 31]($1,1,$7,$8,$9);
    $109 = HEAP16[$8>>1]|0;
    $110 = $109 << 16 >> 16;
    $111 = HEAP16[$9>>1]|0;
    $112 = $111 << 16 >> 16;
    $113 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($5,$110,$112)|0);
    $114 = $113&65535;
    $115 = HEAP32[$7>>2]|0;
    $116 = ((($115)) + 2|0);
    HEAP16[$116>>1] = $114;
    $117 = HEAP32[$1>>2]|0;
    $118 = ((($117)) + 20|0);
    $119 = HEAP32[$118>>2]|0;
    FUNCTION_TABLE_viiiii[$119 & 31]($1,2,$7,$8,$9);
    $120 = HEAP16[$8>>1]|0;
    $121 = $120 << 16 >> 16;
    $122 = HEAP16[$9>>1]|0;
    $123 = $122 << 16 >> 16;
    $124 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($6,$121,$123)|0);
    $125 = $124&65535;
    HEAP16[$10>>1] = $104;
    HEAP16[$91>>1] = $114;
    HEAP16[$92>>1] = $125;
    $126 = HEAP32[$94>>2]|0;
    $127 = HEAP32[$95>>2]|0;
    $128 = ($126|0)==($127|0);
    if ($128) {
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($93,$10);
    } else {
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($vararg_buffer,$93,1);
     $129 = HEAP32[$94>>2]|0;
     ;HEAP16[$129>>1]=HEAP16[$10>>1]|0;HEAP16[$129+2>>1]=HEAP16[$10+2>>1]|0;HEAP16[$129+4>>1]=HEAP16[$10+4>>1]|0;
     __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer);
     $130 = HEAP32[$94>>2]|0;
     $131 = ((($130)) + 6|0);
     HEAP32[$94>>2] = $131;
    }
    $132 = HEAP16[$10>>1]|0;
    $133 = $132 << 16 >> 16;
    $134 = HEAP16[$91>>1]|0;
    $135 = $134 << 16 >> 16;
    $136 = HEAP16[$92>>1]|0;
    $137 = $136 << 16 >> 16;
    HEAP32[$vararg_buffer7>>2] = $133;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = $135;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $137;
    __Z8v_printfiPKcz(10,3743,$vararg_buffer7);
    $138 = (($$0124) + 1)|0;
    $139 = ($138>>>0)<($11>>>0);
    if ($139) {
     $$0124 = $138;
    } else {
     break;
    }
   }
  }
  $140 = ((($0)) + 4|0);
  $141 = ((($0)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = HEAP32[$140>>2]|0;
  $144 = (($142) - ($143))|0;
  $145 = (($144|0) / 6)&-1;
  HEAP32[$vararg_buffer12>>2] = $145;
  __Z8v_printfiPKcz(5,3645,$vararg_buffer12);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($7);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN16TransformPaletteI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$012$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $$sroa$012$016 = $3;
  while(1) {
   $14 = ((($$sroa$012$016)) + 44|0);
   HEAP8[$14>>0] = 1;
   $15 = ((($$sroa$012$016)) + 104|0);
   $16 = ($15|0)==($5|0);
   if ($16) {
    break;
   } else {
    $$sroa$012$016 = $15;
   }
  }
 }
 $7 = ((($0)) + 4|0);
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$7>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 6)&-1;
 $13 = (__Znwj(12)|0);
 __ZN18ColorRangesPaletteC2EPK11ColorRangesi($13,$2,$12);
 return ($13|0);
}
function __ZNK16TransformPaletteI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$03946 = 0, $$04047 = 0, $$sroa$042$049 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  return;
 }
 $6 = ((($0)) + 4|0);
 $7 = ((($0)) + 4|0);
 $8 = ((($0)) + 8|0);
 $$sroa$042$049 = $2;
 while(1) {
  __ZN5Image24undo_make_constant_planeEi($$sroa$042$049,0);
  __ZN5Image24undo_make_constant_planeEi($$sroa$042$049,1);
  __ZN5Image24undo_make_constant_planeEi($$sroa$042$049,2);
  $9 = (__ZNK5Image4rowsEv($$sroa$042$049)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$04047 = 0;
   while(1) {
    $11 = (__ZNK5Image4colsEv($$sroa$042$049)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $$03946 = 0;
     while(1) {
      $19 = (__ZNK5ImageclEijj($$sroa$042$049,1,$$04047,$$03946)|0);
      $20 = $19 << 16 >> 16;
      $21 = ($19<<16>>16)<(0);
      if ($21) {
       label = 10;
      } else {
       $22 = HEAP32[$8>>2]|0;
       $23 = HEAP32[$7>>2]|0;
       $24 = (($22) - ($23))|0;
       $25 = (($24|0) / 6)&-1;
       $26 = ($20|0)<($25|0);
       if ($26) {
        $$0 = $20;
       } else {
        label = 10;
       }
      }
      if ((label|0) == 10) {
       label = 0;
       $$0 = 0;
      }
      $27 = HEAP32[$6>>2]|0;
      $28 = (($27) + (($$0*6)|0)|0);
      $29 = HEAP16[$28>>1]|0;
      __ZN5Image3setEijjs($$sroa$042$049,0,$$04047,$$03946,$29);
      $30 = HEAP32[$6>>2]|0;
      $31 = (((($30) + (($$0*6)|0)|0)) + 2|0);
      $32 = HEAP16[$31>>1]|0;
      __ZN5Image3setEijjs($$sroa$042$049,1,$$04047,$$03946,$32);
      $33 = HEAP32[$6>>2]|0;
      $34 = (((($33) + (($$0*6)|0)|0)) + 4|0);
      $35 = HEAP16[$34>>1]|0;
      __ZN5Image3setEijjs($$sroa$042$049,2,$$04047,$$03946,$35);
      $36 = (($$03946) + 1)|0;
      $37 = (__ZNK5Image4colsEv($$sroa$042$049)|0);
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $$03946 = $36;
      } else {
       break;
      }
     }
    }
    $16 = (($$04047) + 1)|0;
    $17 = (__ZNK5Image4rowsEv($$sroa$042$049)|0);
    $18 = ($16>>>0)<($17>>>0);
    if ($18) {
     $$04047 = $16;
    } else {
     break;
    }
   }
  }
  $13 = ((($$sroa$042$049)) + 44|0);
  HEAP8[$13>>0] = 0;
  $14 = ((($$sroa$042$049)) + 104|0);
  $15 = ($14|0)==($4|0);
  if ($15) {
   break;
  } else {
   $$sroa$042$049 = $14;
  }
 }
 return;
}
function __ZNK16TransformPaletteI8BufferIOE20is_palette_transformEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 21|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 return ($3|0);
}
function __ZN18ColorRangesPaletteC2EPK11ColorRangesi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1908);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN18ColorRangesPaletteD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK18ColorRangesPalette9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK18ColorRangesPalette3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)<(3);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 63]($4,$1)|0);
 $$0 = $8;
 return ($$0|0);
}
function __ZNK18ColorRangesPalette3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($0)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 65535)|0;
  $6 = $5&65535;
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ($1|0)<(3);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iii[$12 & 63]($9,$1)|0);
 $$0 = $13;
 return ($$0|0);
}
function __ZNK18ColorRangesPalette6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1|0)==(1);
 if ($5) {
  HEAP16[$3>>1] = 0;
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 65535)|0;
  $9 = $8&65535;
  HEAP16[$4>>1] = $9;
  return;
 }
 $10 = ($1|0)<(3);
 if ($10) {
  HEAP16[$3>>1] = 0;
  HEAP16[$4>>1] = 0;
  return;
 } else {
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_viiiii[$15 & 31]($12,$1,$2,$3,$4);
  return;
 }
}
function __ZNK18ColorRangesPalette8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK18ColorRangesPalette8previousEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 6)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 6)&-1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 6)&-1;
  __ZNSt3__214__split_bufferINS_5tupleIJsssEEERNS_9allocatorIS2_EEEC2EjjS5_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  ;HEAP16[$25>>1]=HEAP16[$1>>1]|0;HEAP16[$25+2>>1]=HEAP16[$1+2>>1]|0;HEAP16[$25+4>>1]=HEAP16[$1+4>>1]|0;
  $26 = HEAP32[$24>>2]|0;
  $27 = ((($26)) + 6|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_5tupleIJsssEEERNS_9allocatorIS2_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 715827882;
}
function __ZNSt3__214__split_bufferINS_5tupleIJsssEEERNS_9allocatorIS2_EEEC2EjjS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(715827882);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = ($1*6)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*6)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*6)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7|0) / -6)&-1;
 $10 = (($8) + (($9*6)|0)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 6)&-1;
 __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE14__annotate_newEj($0,$25);
 return;
}
function __ZNSt3__214__split_bufferINS_5tupleIJsssEEERNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -6|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 6)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + (($10*6)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 6)&-1;
 $6 = (($1) + (($5*6)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 6)&-1;
 $11 = (($1) + (($10*6)|0)|0);
 __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 6)&-1;
 $7 = (($2) + (($6*6)|0)|0);
 $8 = (($2) + (($1*6)|0)|0);
 __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_5tupleIJsssEEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__213__vector_baseINS_5tupleIJsssEEENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -6|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 6)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + (($10*6)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZN11TransformCBI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (1952);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP8[$2>>0] = 0;
 return;
}
function __ZN11TransformCBI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1952);
 $1 = ((($0)) + 8|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   __ZN12ColorBucketsD2Ev($5);
   __ZdlPv($5);
  }
 }
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN11TransformCBI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11TransformCBI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN11TransformCBI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP8[$3>>0] = 0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 63]($1)|0);
 $8 = ($7|0)<(3);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 63]($1,1)|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$15 & 63]($1,1)|0);
 $17 = ($12<<16>>16)==($16<<16>>16);
 if ($17) {
  $18 = HEAP32[$1>>2]|0;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iii[$20 & 63]($1,2)|0);
  $22 = HEAP32[$1>>2]|0;
  $23 = ((($22)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_iii[$24 & 63]($1,2)|0);
  $26 = ($21<<16>>16)==($25<<16>>16);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $27 = HEAP32[$1>>2]|0;
 $28 = ((($27)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (FUNCTION_TABLE_iii[$29 & 63]($1,0)|0);
 $31 = ($30<<16>>16)==(0);
 if ($31) {
  $32 = HEAP32[$1>>2]|0;
  $33 = ((($32)) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iii[$34 & 63]($1,0)|0);
  $36 = ($35<<16>>16)==(0);
  if ($36) {
   $37 = HEAP32[$1>>2]|0;
   $38 = ((($37)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iii[$39 & 63]($1,2)|0);
   $41 = ($40<<16>>16)==(0);
   if ($41) {
    $42 = HEAP32[$1>>2]|0;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_iii[$44 & 63]($1,2)|0);
    $46 = ($45<<16>>16)==(0);
    if ($46) {
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 }
 $47 = HEAP32[$1>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (FUNCTION_TABLE_iii[$49 & 63]($1,0)|0);
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (FUNCTION_TABLE_iii[$53 & 63]($1,0)|0);
 $55 = ($50<<16>>16)==($54<<16>>16);
 if ($55) {
  $56 = HEAP32[$1>>2]|0;
  $57 = ((($56)) + 12|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (FUNCTION_TABLE_iii[$58 & 63]($1,1)|0);
  $60 = HEAP32[$1>>2]|0;
  $61 = ((($60)) + 16|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (FUNCTION_TABLE_iii[$62 & 63]($1,1)|0);
  $64 = ($59<<16>>16)==($63<<16>>16);
  if ($64) {
   $65 = HEAP32[$1>>2]|0;
   $66 = ((($65)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (FUNCTION_TABLE_iii[$67 & 63]($1,2)|0);
   $69 = HEAP32[$1>>2]|0;
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_iii[$71 & 63]($1,2)|0);
   $73 = ($68<<16>>16)==($72<<16>>16);
   if ($73) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 $74 = HEAP32[$1>>2]|0;
 $75 = ((($74)) + 16|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (FUNCTION_TABLE_iii[$76 & 63]($1,0)|0);
 $78 = $77 << 16 >> 16;
 $79 = HEAP32[$1>>2]|0;
 $80 = ((($79)) + 12|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (FUNCTION_TABLE_iii[$81 & 63]($1,0)|0);
 $83 = $82 << 16 >> 16;
 $84 = (($78) - ($83))|0;
 $85 = ($84|0)>(1023);
 if ($85) {
  $$0 = 0;
  return ($$0|0);
 }
 $86 = HEAP32[$1>>2]|0;
 $87 = ((($86)) + 16|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (FUNCTION_TABLE_iii[$88 & 63]($1,1)|0);
 $90 = $89 << 16 >> 16;
 $91 = HEAP32[$1>>2]|0;
 $92 = ((($91)) + 12|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = (FUNCTION_TABLE_iii[$93 & 63]($1,1)|0);
 $95 = $94 << 16 >> 16;
 $96 = (($90) - ($95))|0;
 $97 = ($96|0)>(1023);
 if ($97) {
  $$0 = 0;
  return ($$0|0);
 }
 $98 = HEAP32[$1>>2]|0;
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (FUNCTION_TABLE_iii[$100 & 63]($1,2)|0);
 $102 = $101 << 16 >> 16;
 $103 = HEAP32[$1>>2]|0;
 $104 = ((($103)) + 12|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (FUNCTION_TABLE_iii[$105 & 63]($1,2)|0);
 $107 = $106 << 16 >> 16;
 $108 = (($102) - ($107))|0;
 $109 = ($108|0)>(1023);
 if ($109) {
  $$0 = 0;
  return ($$0|0);
 }
 $110 = HEAP32[$1>>2]|0;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (FUNCTION_TABLE_iii[$112 & 63]($1,1)|0);
 $114 = HEAP32[$1>>2]|0;
 $115 = ((($114)) + 16|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (FUNCTION_TABLE_iii[$116 & 63]($1,1)|0);
 $118 = ($113<<16>>16)==($117<<16>>16);
 if ($118) {
  $$0 = 0;
  return ($$0|0);
 }
 $119 = (__Znwj(132)|0);
 __ZN12ColorBucketsC2EPK11ColorRanges($119,$1);
 HEAP32[$2>>2] = $119;
 $$0 = 1;
 return ($$0|0);
}
function __ZN11TransformCBI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN11TransformCBI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$049$073 = 0, $$sroa$057$074 = 0, $$sroa$065$076 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16544|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = sp + 16536|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($3,$2,2,226050910);
 __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEEC2EjRKS6_($4,6,$3);
 HEAP32[$5>>2] = 0;
 $8 = ((($5)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($5)) + 8|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$6>>2] = 0;
 $10 = ((($6)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($6)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 __ZNK11TransformCBI8BufferIOE11load_bucketERNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24IS0_ELi18EENS2_9allocatorIS8_EEEEPK11ColorRangesiRKNS3_IsNS9_IsEEEESJ_($3,$0,$4,$1,0,$5,$6);
 (__ZN11ColorBucketaSERKS_($13,$3)|0);
 __ZN11ColorBucketD2Ev($3);
 $14 = HEAP32[$12>>2]|0;
 $15 = ((($14)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 HEAP16[$7>>1] = $17;
 $18 = HEAP32[$8>>2]|0;
 $19 = ((($5)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18>>>0)<($20>>>0);
 if ($21) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$5,1);
  $22 = HEAP32[$8>>2]|0;
  $23 = HEAP16[$7>>1]|0;
  HEAP16[$22>>1] = $23;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $24 = HEAP32[$8>>2]|0;
  $25 = ((($24)) + 2|0);
  HEAP32[$8>>2] = $25;
 } else {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($5,$7);
 }
 $26 = HEAP32[$12>>2]|0;
 $27 = ((($26)) + 32|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28&65535;
 HEAP16[$7>>1] = $29;
 $30 = HEAP32[$10>>2]|0;
 $31 = ((($6)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30>>>0)<($32>>>0);
 if ($33) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$6,1);
  $34 = HEAP32[$10>>2]|0;
  $35 = HEAP16[$7>>1]|0;
  HEAP16[$34>>1] = $35;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $36 = HEAP32[$10>>2]|0;
  $37 = ((($36)) + 2|0);
  HEAP32[$10>>2] = $37;
 } else {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($6,$7);
 }
 $38 = HEAP32[$12>>2]|0;
 $39 = ((($38)) + 40|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($38)) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($40|0)==($42|0);
 if (!($43)) {
  $$sroa$065$076 = $40;
  while(1) {
   __ZNK11TransformCBI8BufferIOE11load_bucketERNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24IS0_ELi18EENS2_9allocatorIS8_EEEEPK11ColorRangesiRKNS3_IsNS9_IsEEEESJ_($3,$0,$4,$1,1,$5,$6);
   (__ZN11ColorBucketaSERKS_($$sroa$065$076,$3)|0);
   __ZN11ColorBucketD2Ev($3);
   $53 = HEAP32[$5>>2]|0;
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = (($55) + 1)|0;
   $57 = $56&65535;
   HEAP16[$53>>1] = $57;
   $58 = HEAP32[$6>>2]|0;
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = (($60) + 1)|0;
   $62 = $61&65535;
   HEAP16[$58>>1] = $62;
   $63 = ((($$sroa$065$076)) + 32|0);
   $64 = ($63|0)==($42|0);
   if ($64) {
    break;
   } else {
    $$sroa$065$076 = $63;
   }
  }
 }
 $44 = HEAP32[$1>>2]|0;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_iii[$46 & 63]($1,2)|0);
 $48 = HEAP32[$1>>2]|0;
 $49 = ((($48)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (FUNCTION_TABLE_iii[$50 & 63]($1,2)|0);
 $52 = ($47<<16>>16)<($51<<16>>16);
 if ($52) {
  $65 = HEAP32[$12>>2]|0;
  $66 = ((($65)) + 32|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $67&65535;
  $69 = HEAP32[$5>>2]|0;
  HEAP16[$69>>1] = $68;
  $70 = HEAP32[$12>>2]|0;
  $71 = ((($70)) + 32|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72&65535;
  $74 = HEAP32[$6>>2]|0;
  HEAP16[$74>>1] = $73;
  $75 = HEAP32[$12>>2]|0;
  $76 = ((($75)) + 36|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $77&65535;
  HEAP16[$7>>1] = $78;
  $79 = HEAP32[$8>>2]|0;
  $80 = HEAP32[$19>>2]|0;
  $81 = ($79>>>0)<($80>>>0);
  if ($81) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$5,1);
   $82 = HEAP32[$8>>2]|0;
   $83 = HEAP16[$7>>1]|0;
   HEAP16[$82>>1] = $83;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $84 = HEAP32[$8>>2]|0;
   $85 = ((($84)) + 2|0);
   HEAP32[$8>>2] = $85;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($5,$7);
  }
  $86 = HEAP32[$12>>2]|0;
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 3)|0;
  $90 = $89&65535;
  HEAP16[$7>>1] = $90;
  $91 = HEAP32[$10>>2]|0;
  $92 = HEAP32[$31>>2]|0;
  $93 = ($91>>>0)<($92>>>0);
  if ($93) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$6,1);
   $94 = HEAP32[$10>>2]|0;
   $95 = HEAP16[$7>>1]|0;
   HEAP16[$94>>1] = $95;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $96 = HEAP32[$10>>2]|0;
   $97 = ((($96)) + 2|0);
   HEAP32[$10>>2] = $97;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($6,$7);
  }
  $98 = HEAP32[$12>>2]|0;
  $99 = ((($98)) + 52|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($98)) + 56|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($100|0)==($102|0);
  if (!($103)) {
   $$sroa$057$074 = $100;
   while(1) {
    $104 = HEAP32[$12>>2]|0;
    $105 = ((($104)) + 36|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106&65535;
    $108 = HEAP32[$5>>2]|0;
    $109 = ((($108)) + 2|0);
    HEAP16[$109>>1] = $107;
    $110 = HEAP32[$12>>2]|0;
    $111 = ((($110)) + 36|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + 3)|0;
    $114 = $113&65535;
    $115 = HEAP32[$6>>2]|0;
    $116 = ((($115)) + 2|0);
    HEAP16[$116>>1] = $114;
    $117 = HEAP32[$$sroa$057$074>>2]|0;
    $118 = ((($$sroa$057$074)) + 4|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($117|0)==($119|0);
    if (!($120)) {
     $$sroa$049$073 = $117;
     while(1) {
      __ZNK11TransformCBI8BufferIOE11load_bucketERNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24IS0_ELi18EENS2_9allocatorIS8_EEEEPK11ColorRangesiRKNS3_IsNS9_IsEEEESJ_($3,$0,$4,$1,2,$5,$6);
      (__ZN11ColorBucketaSERKS_($$sroa$049$073,$3)|0);
      __ZN11ColorBucketD2Ev($3);
      $133 = HEAP32[$5>>2]|0;
      $134 = ((($133)) + 2|0);
      $135 = HEAP16[$134>>1]|0;
      $136 = $135&65535;
      $137 = (($136) + 4)|0;
      $138 = $137&65535;
      HEAP16[$134>>1] = $138;
      $139 = HEAP32[$6>>2]|0;
      $140 = ((($139)) + 2|0);
      $141 = HEAP16[$140>>1]|0;
      $142 = $141&65535;
      $143 = (($142) + 4)|0;
      $144 = $143&65535;
      HEAP16[$140>>1] = $144;
      $145 = ((($$sroa$049$073)) + 32|0);
      $146 = ($145|0)==($119|0);
      if ($146) {
       break;
      } else {
       $$sroa$049$073 = $145;
      }
     }
    }
    $121 = HEAP32[$5>>2]|0;
    $122 = HEAP16[$121>>1]|0;
    $123 = $122&65535;
    $124 = (($123) + 1)|0;
    $125 = $124&65535;
    HEAP16[$121>>1] = $125;
    $126 = HEAP32[$6>>2]|0;
    $127 = HEAP16[$126>>1]|0;
    $128 = $127&65535;
    $129 = (($128) + 1)|0;
    $130 = $129&65535;
    HEAP16[$126>>1] = $130;
    $131 = ((($$sroa$057$074)) + 12|0);
    $132 = ($131|0)==($102|0);
    if ($132) {
     break;
    } else {
     $$sroa$057$074 = $131;
    }
   }
  }
 }
 $147 = HEAP32[$1>>2]|0;
 $148 = ((($147)) + 8|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = (FUNCTION_TABLE_ii[$149 & 63]($1)|0);
 $151 = ($150|0)>(3);
 if (!($151)) {
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($6);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
  __ZNSt3__213__vector_baseI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEED2Ev($4);
  STACKTOP = sp;return 1;
 }
 $152 = HEAP32[$12>>2]|0;
 __ZNK11TransformCBI8BufferIOE11load_bucketERNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24IS0_ELi18EENS2_9allocatorIS8_EEEEPK11ColorRangesiRKNS3_IsNS9_IsEEEESJ_($3,$0,$4,$1,3,$5,$6);
 $153 = ((($152)) + 64|0);
 (__ZN11ColorBucketaSERKS_($153,$3)|0);
 __ZN11ColorBucketD2Ev($3);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($6);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
 __ZNSt3__213__vector_baseI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEED2Ev($4);
 STACKTOP = sp;return 1;
}
function __ZN11TransformCBI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$065124 = 0, $$7 = 0, $$sroa$0100$0130 = 0, $$sroa$073$0115 = 0, $$sroa$079$0116 = 0, $$sroa$085$0120 = 0, $$sroa$092$0127 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $3 = sp + 56|0;
 $4 = sp + 44|0;
 $5 = sp + 32|0;
 $6 = sp;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 63]($2,2)|0);
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($11)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iii[$13 & 63]($2,2)|0);
 $15 = ($10<<16>>16)<($14<<16>>16);
 if ($15) {
  HEAP32[$4>>2] = 0;
  $16 = ((($4)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($4)) + 8|0);
  HEAP32[$17>>2] = 0;
  HEAP32[$5>>2] = 0;
  $18 = ((($5)) + 4|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($5)) + 8|0);
  HEAP32[$19>>2] = 0;
  $20 = ((($0)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($21)) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23&65535;
  HEAP16[$6>>1] = $24;
  $25 = HEAP32[$16>>2]|0;
  $26 = ((($4)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($25>>>0)<($27>>>0);
  if ($28) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$4,1);
   $29 = HEAP32[$16>>2]|0;
   $30 = HEAP16[$6>>1]|0;
   HEAP16[$29>>1] = $30;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $31 = HEAP32[$16>>2]|0;
   $32 = ((($31)) + 2|0);
   HEAP32[$16>>2] = $32;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($4,$6);
  }
  $33 = HEAP32[$20>>2]|0;
  $34 = ((($33)) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35&65535;
  HEAP16[$6>>1] = $36;
  $37 = HEAP32[$18>>2]|0;
  $38 = ((($5)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($37>>>0)<($39>>>0);
  if ($40) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$5,1);
   $41 = HEAP32[$18>>2]|0;
   $42 = HEAP16[$6>>1]|0;
   HEAP16[$41>>1] = $42;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $43 = HEAP32[$18>>2]|0;
   $44 = ((($43)) + 2|0);
   HEAP32[$18>>2] = $44;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($5,$6);
  }
  $45 = HEAP32[$20>>2]|0;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $47&65535;
  HEAP16[$6>>1] = $48;
  $49 = HEAP32[$16>>2]|0;
  $50 = HEAP32[$26>>2]|0;
  $51 = ($49>>>0)<($50>>>0);
  if ($51) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$4,1);
   $52 = HEAP32[$16>>2]|0;
   $53 = HEAP16[$6>>1]|0;
   HEAP16[$52>>1] = $53;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $54 = HEAP32[$16>>2]|0;
   $55 = ((($54)) + 2|0);
   HEAP32[$16>>2] = $55;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($4,$6);
  }
  $56 = HEAP32[$20>>2]|0;
  $57 = ((($56)) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 3)|0;
  $60 = $59&65535;
  HEAP16[$6>>1] = $60;
  $61 = HEAP32[$18>>2]|0;
  $62 = HEAP32[$38>>2]|0;
  $63 = ($61>>>0)<($62>>>0);
  if ($63) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$5,1);
   $64 = HEAP32[$18>>2]|0;
   $65 = HEAP16[$6>>1]|0;
   HEAP16[$64>>1] = $65;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $66 = HEAP32[$18>>2]|0;
   $67 = ((($66)) + 2|0);
   HEAP32[$18>>2] = $67;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($5,$6);
  }
  $68 = HEAP32[$20>>2]|0;
  $69 = ((($68)) + 52|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($68)) + 56|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($70|0)==($72|0);
  L19: do {
   if (!($73)) {
    $74 = ((($3)) + 4|0);
    $$sroa$0100$0130 = $70;
    L21: while(1) {
     __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2ERKS4_($3,$$sroa$0100$0130);
     $75 = HEAP32[$20>>2]|0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $77&65535;
     $79 = HEAP32[$4>>2]|0;
     $80 = ((($79)) + 2|0);
     HEAP16[$80>>1] = $78;
     $81 = HEAP32[$20>>2]|0;
     $82 = ((($81)) + 36|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (($83) + 3)|0;
     $85 = $84&65535;
     $86 = HEAP32[$5>>2]|0;
     $87 = ((($86)) + 2|0);
     HEAP16[$87>>1] = $85;
     $88 = HEAP32[$3>>2]|0;
     $89 = HEAP32[$74>>2]|0;
     $90 = ($88|0)==($89|0);
     if (!($90)) {
      $$sroa$092$0127 = $88;
      while(1) {
       __ZN11ColorBucketC2ERKS_($6,$$sroa$092$0127);
       $91 = (__ZNK11ColorBucket5emptyEv($6)|0);
       if ($91) {
        $92 = HEAP32[$4>>2]|0;
        $93 = ((($92)) + 2|0);
        $94 = HEAP16[$93>>1]|0;
        $95 = HEAP32[$5>>2]|0;
        $96 = ((($95)) + 2|0);
        $97 = HEAP16[$96>>1]|0;
        $98 = ($94<<16>>16)>($97<<16>>16);
        if (!($98)) {
         $$065124 = $94;
         while(1) {
          $104 = HEAP32[$20>>2]|0;
          $105 = (__ZN12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($104,1,$4)|0);
          $106 = (__ZN11ColorBucket11removeColorEs($105,$$065124)|0);
          if (!($106)) {
           break L21;
          }
          $107 = HEAP32[$20>>2]|0;
          $108 = (__ZN12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($107,1,$5)|0);
          $109 = (__ZN11ColorBucket11removeColorEs($108,$$065124)|0);
          $102 = (($$065124) + 1)<<16>>16;
          if (!($109)) {
           break L21;
          }
          $99 = HEAP32[$5>>2]|0;
          $100 = ((($99)) + 2|0);
          $101 = HEAP16[$100>>1]|0;
          $103 = ($102<<16>>16)>($101<<16>>16);
          if ($103) {
           break;
          } else {
           $$065124 = $102;
          }
         }
        }
       }
       $110 = HEAP32[$4>>2]|0;
       $111 = ((($110)) + 2|0);
       $112 = HEAP16[$111>>1]|0;
       $113 = $112&65535;
       $114 = (($113) + 4)|0;
       $115 = $114&65535;
       HEAP16[$111>>1] = $115;
       $116 = HEAP32[$5>>2]|0;
       $117 = ((($116)) + 2|0);
       $118 = HEAP16[$117>>1]|0;
       $119 = $118&65535;
       $120 = (($119) + 4)|0;
       $121 = $120&65535;
       HEAP16[$117>>1] = $121;
       __ZN11ColorBucketD2Ev($6);
       $122 = ((($$sroa$092$0127)) + 32|0);
       $123 = ($122|0)==($89|0);
       if ($123) {
        break;
       } else {
        $$sroa$092$0127 = $122;
       }
      }
     }
     $124 = HEAP32[$4>>2]|0;
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&65535;
     $127 = (($126) + 1)|0;
     $128 = $127&65535;
     HEAP16[$124>>1] = $128;
     $129 = HEAP32[$5>>2]|0;
     $130 = HEAP16[$129>>1]|0;
     $131 = $130&65535;
     $132 = (($131) + 1)|0;
     $133 = $132&65535;
     HEAP16[$129>>1] = $133;
     __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($3);
     $134 = ((($$sroa$0100$0130)) + 12|0);
     $135 = ($134|0)==($72|0);
     if ($135) {
      break L19;
     } else {
      $$sroa$0100$0130 = $134;
     }
    }
    __ZN11ColorBucketD2Ev($6);
    __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($3);
    __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
    __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($4);
    $$7 = 0;
    STACKTOP = sp;return ($$7|0);
   }
  } while(0);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($5);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($4);
 }
 $136 = ((($0)) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 __ZN11ColorBucket18prepare_snapvaluesEv($137);
 $138 = HEAP32[$136>>2]|0;
 $139 = ((($138)) + 64|0);
 __ZN11ColorBucket18prepare_snapvaluesEv($139);
 $140 = HEAP32[$136>>2]|0;
 $141 = ((($140)) + 40|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($140)) + 44|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($142|0)==($144|0);
 if (!($145)) {
  $$sroa$085$0120 = $142;
  while(1) {
   __ZN11ColorBucket18prepare_snapvaluesEv($$sroa$085$0120);
   $152 = ((($$sroa$085$0120)) + 32|0);
   $153 = ($152|0)==($144|0);
   if ($153) {
    break;
   } else {
    $$sroa$085$0120 = $152;
   }
  }
 }
 $146 = HEAP32[$136>>2]|0;
 $147 = ((($146)) + 52|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($146)) + 56|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($148|0)==($150|0);
 if (!($151)) {
  $$sroa$079$0116 = $148;
  while(1) {
   $157 = HEAP32[$$sroa$079$0116>>2]|0;
   $158 = ((($$sroa$079$0116)) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157|0)==($159|0);
   if (!($160)) {
    $$sroa$073$0115 = $157;
    while(1) {
     __ZN11ColorBucket18prepare_snapvaluesEv($$sroa$073$0115);
     $163 = ((($$sroa$073$0115)) + 32|0);
     $164 = ($163|0)==($159|0);
     if ($164) {
      break;
     } else {
      $$sroa$073$0115 = $163;
     }
    }
   }
   $161 = ((($$sroa$079$0116)) + 12|0);
   $162 = ($161|0)==($150|0);
   if ($162) {
    break;
   } else {
    $$sroa$079$0116 = $161;
   }
  }
 }
 $154 = ((($0)) + 8|0);
 HEAP8[$154>>0] = 1;
 $155 = (__Znwj(12)|0);
 $156 = HEAP32[$136>>2]|0;
 __ZN13ColorRangesCBC2EPK11ColorRangesP12ColorBuckets($155,$2,$156);
 $$7 = $155;
 STACKTOP = sp;return ($$7|0);
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2ERKS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 5;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$10,$11,$8);
 return;
}
function __ZN11ColorBucketC2ERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($0,$1);
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($2,$3);
 $4 = ((($0)) + 24|0);
 $5 = ((($1)) + 24|0);
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;
 return;
}
function __ZNK11ColorBucket5emptyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($0)) + 26|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($2<<16>>16)>($4<<16>>16);
 return ($5|0);
}
function __ZN11ColorBucketD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($1);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($0);
 return;
}
function __ZN12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0 = $0;
  return ($$0|0);
  break;
 }
 case 1:  {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = ((($0)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) - ($7))|0;
  $9 = ((($0)) + 40|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8<<5)|0);
  $$0 = $11;
  return ($$0|0);
  break;
 }
 case 2:  {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP16[$12>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = ((($0)) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($14) - ($16))|0;
  $18 = ((($0)) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($12)) + 2|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ((($0)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) - ($24))|0;
  $26 = (($25|0) / 4)&-1;
  $27 = (($19) + (($17*12)|0)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($26<<5)|0);
  $$0 = $29;
  return ($$0|0);
  break;
 }
 default: {
  $30 = ((($0)) + 64|0);
  $$0 = $30;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN11ColorBucket11removeColorEs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01637 = 0, $$cast = 0, $$cast$i = 0, $$cast$i$i = 0, $$cast25 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $scevgep$i$i$i = 0, $scevgep$i$i$i17 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i18 = 0, $storemerge36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 2|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $7 = ((($0)) + 12|0);
  $8 = ((($0)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = ($9|0)==($10|0);
  L3: do {
   if (!($11)) {
    $12 = HEAP32[$7>>2]|0;
    $$01637 = 0;$25 = $9;
    while(1) {
     $19 = (($12) + ($$01637<<1)|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = ($20<<16>>16)==($1<<16>>16);
     $17 = (($$01637) + 1)|0;
     if ($21) {
      break;
     }
     $13 = HEAP32[$8>>2]|0;
     $14 = HEAP32[$7>>2]|0;
     $15 = (($13) - ($14))|0;
     $16 = $15 >> 1;
     $18 = ($17>>>0)<($16>>>0);
     if ($18) {
      $$01637 = $17;$25 = $13;
     } else {
      break L3;
     }
    }
    $22 = ((($19)) + 2|0);
    $23 = $22;
    $24 = (($25) - ($23))|0;
    $26 = $24 >> 1;
    $27 = ($26|0)==(0);
    if (!($27)) {
     _memmove(($19|0),($22|0),($24|0))|0;
    }
    $28 = (($19) + ($26<<1)|0);
    $29 = HEAP32[$8>>2]|0;
    $30 = HEAP32[$7>>2]|0;
    $31 = (($29) - ($30))|0;
    $32 = $31 >> 1;
    $$cast$i$i = $29;
    $33 = ($$cast$i$i|0)==($28|0);
    if (!($33)) {
     $scevgep$i$i$i17 = ((($$cast$i$i)) + -2|0);
     $34 = $scevgep$i$i$i17;
     $35 = $28;
     $36 = (($34) - ($35))|0;
     $37 = $36 >>> 1;
     $38 = $37 ^ -1;
     $scevgep4$i$i$i18 = (($$cast$i$i) + ($38<<1)|0);
     HEAP32[$8>>2] = $scevgep4$i$i$i18;
    }
    __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($7,$32);
   }
  } while(0);
  $39 = HEAP32[$8>>2]|0;
  $40 = HEAP32[$7>>2]|0;
  $41 = ($39|0)==($40|0);
  $42 = ((($0)) + 24|0);
  if ($41) {
   HEAP16[$42>>1] = 10000;
   $43 = ((($0)) + 26|0);
   HEAP16[$43>>1] = -10000;
   STACKTOP = sp;return 1;
  }
  $44 = HEAP16[$42>>1]|0;
  $45 = ($44<<16>>16)==($1<<16>>16);
  if ($45) {
   $46 = HEAP32[$7>>2]|0;
   $47 = HEAP16[$46>>1]|0;
   HEAP16[$42>>1] = $47;
  }
  $48 = ((($0)) + 26|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = ($49<<16>>16)==($1<<16>>16);
  if (!($50)) {
   STACKTOP = sp;return 1;
  }
  $51 = HEAP32[$8>>2]|0;
  $52 = HEAP32[$7>>2]|0;
  $53 = (($51) - ($52))|0;
  $54 = $53 >> 1;
  $55 = (($54) + -1)|0;
  $$cast = $52;
  $56 = (($$cast) + ($55<<1)|0);
  $57 = HEAP16[$56>>1]|0;
  HEAP16[$48>>1] = $57;
  STACKTOP = sp;return 1;
 }
 $58 = ((($0)) + 24|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59<<16>>16)==($1<<16>>16);
 if ($60) {
  $61 = (($59) + 1)<<16>>16;
  HEAP16[$58>>1] = $61;
 }
 $62 = ((($0)) + 26|0);
 $63 = HEAP16[$62>>1]|0;
 $64 = ($63<<16>>16)==($1<<16>>16);
 if ($64) {
  $65 = (($63) + -1)<<16>>16;
  HEAP16[$62>>1] = $65;
 }
 $66 = HEAP16[$62>>1]|0;
 $67 = ($66<<16>>16)<($1<<16>>16);
 if ($67) {
  STACKTOP = sp;return 1;
 }
 $68 = HEAP16[$58>>1]|0;
 $69 = ($68<<16>>16)>($1<<16>>16);
 if ($69) {
  STACKTOP = sp;return 1;
 }
 HEAP8[$4>>0] = 1;
 $70 = ((($0)) + 12|0);
 $71 = ((($0)) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$70>>2]|0;
 $74 = (($72) - ($73))|0;
 $75 = $74 >> 1;
 $$cast$i = $73;
 $$cast25 = $72;
 $76 = ($$cast25|0)==($$cast$i|0);
 if (!($76)) {
  $scevgep$i$i$i = ((($$cast25)) + -2|0);
  $77 = $scevgep$i$i$i;
  $78 = (($77) - ($73))|0;
  $79 = $78 >>> 1;
  $80 = $79 ^ -1;
  $scevgep4$i$i$i = (($$cast25) + ($80<<1)|0);
  HEAP32[$71>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($70,$75);
 $81 = HEAP16[$58>>1]|0;
 HEAP16[$3>>1] = $81;
 $82 = HEAP16[$62>>1]|0;
 $83 = ($81<<16>>16)>($82<<16>>16);
 if (!($83)) {
  $84 = ((($0)) + 20|0);
  $storemerge36 = $81;
  while(1) {
   $85 = ($storemerge36<<16>>16)==($1<<16>>16);
   do {
    if (!($85)) {
     $86 = HEAP32[$71>>2]|0;
     $87 = HEAP32[$84>>2]|0;
     $88 = ($86|0)==($87|0);
     if ($88) {
      __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($70,$3);
      break;
     } else {
      __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($2,$70,1);
      $89 = HEAP32[$71>>2]|0;
      $90 = HEAP16[$3>>1]|0;
      HEAP16[$89>>1] = $90;
      __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($2);
      $91 = HEAP32[$71>>2]|0;
      $92 = ((($91)) + 2|0);
      HEAP32[$71>>2] = $92;
      break;
     }
    }
   } while(0);
   $93 = HEAP16[$3>>1]|0;
   $94 = (($93) + 1)<<16>>16;
   HEAP16[$3>>1] = $94;
   $95 = HEAP16[$62>>1]|0;
   $96 = ($94<<16>>16)>($95<<16>>16);
   if ($96) {
    break;
   } else {
    $storemerge36 = $94;
   }
  }
 }
 STACKTOP = sp;return 1;
}
function __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -32|0);
   HEAP32[$3>>2] = $6;
   __ZN11ColorBucketD2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZN11ColorBucket18prepare_snapvaluesEv($0) {
 $0 = $0|0;
 var $$04 = 0, $$cast = 0, $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp + 2|0;
 $2 = sp;
 $3 = ((($0)) + 28|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 1;
 $$cast$i = $8;
 $$cast = $7;
 $11 = ($$cast|0)==($$cast$i|0);
 if (!($11)) {
  $scevgep$i$i$i = ((($$cast)) + -2|0);
  $12 = $scevgep$i$i$i;
  $13 = (($12) - ($8))|0;
  $14 = $13 >>> 1;
  $15 = $14 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($15<<1)|0);
  HEAP32[$6>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($0,$10);
 $16 = ((($0)) + 24|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ((($0)) + 26|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ($17<<16>>16)<($19<<16>>16);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = ((($0)) + 8|0);
 $$04 = $17;
 while(1) {
  $22 = (__ZNK11ColorBucket14snapColor_slowEs($0,$$04)|0);
  HEAP16[$2>>1] = $22;
  $23 = HEAP32[$6>>2]|0;
  $24 = HEAP32[$21>>2]|0;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($1,$0,1);
   $26 = HEAP32[$6>>2]|0;
   $27 = HEAP16[$2>>1]|0;
   HEAP16[$26>>1] = $27;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($1);
   $28 = HEAP32[$6>>2]|0;
   $29 = ((($28)) + 2|0);
   HEAP32[$6>>2] = $29;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($0,$2);
  }
  $30 = (($$04) + 1)<<16>>16;
  $31 = HEAP16[$18>>1]|0;
  $32 = ($30<<16>>16)<($31<<16>>16);
  if ($32) {
   $$04 = $30;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN13ColorRangesCBC2EPK11ColorRangesP12ColorBuckets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (1996);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN13ColorRangesCBD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1996);
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZN12ColorBucketsD2Ev($2);
  __ZdlPv($2);
 }
 __ZN11ColorRangesD2Ev($0);
 return;
}
function __ZN13ColorRangesCBD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN13ColorRangesCBD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK13ColorRangesCB9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK13ColorRangesCB3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 return ($7|0);
}
function __ZNK13ColorRangesCB3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 return ($7|0);
}
function __ZNK13ColorRangesCB6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = (__ZNK13ColorRangesCB6bucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2)|0);
 $6 = ((($5)) + 24|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$3>>1] = $7;
 $8 = ((($5)) + 26|0);
 $9 = HEAP16[$8>>1]|0;
 HEAP16[$4>>1] = $9;
 $10 = HEAP16[$6>>1]|0;
 $11 = HEAP16[$8>>1]|0;
 $12 = ($10<<16>>16)>($11<<16>>16);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 __Z8e_printfPKcz(3790,$vararg_buffer);
 $13 = (__ZNK13ColorRangesCB3minEi($0,$1)|0);
 HEAP16[$3>>1] = $13;
 $14 = (__ZNK13ColorRangesCB3maxEi($0,$1)|0);
 HEAP16[$4>>1] = $14;
 STACKTOP = sp;return;
}
function __ZNK13ColorRangesCB4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $6 = (__ZNK13ColorRangesCB6bucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2)|0);
 $7 = ((($6)) + 24|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$3>>1] = $8;
 $9 = ((($6)) + 26|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$4>>1] = $10;
 $11 = HEAP16[$7>>1]|0;
 $12 = HEAP16[$9>>1]|0;
 $13 = ($11<<16>>16)>($12<<16>>16);
 if ($13) {
  __Z8e_printfPKcz(3790,$vararg_buffer);
  $14 = (__ZNK13ColorRangesCB3minEi($0,$1)|0);
  HEAP16[$5>>1] = $14;
  HEAP16[$3>>1] = $14;
  $15 = (__ZNK13ColorRangesCB3maxEi($0,$1)|0);
  HEAP16[$4>>1] = $15;
  STACKTOP = sp;return;
 } else {
  $16 = HEAP16[$5>>1]|0;
  $17 = (__ZNK11ColorBucket9snapColorEs($6,$16)|0);
  HEAP16[$5>>1] = $17;
  STACKTOP = sp;return;
 }
}
function __ZNK13ColorRangesCB8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK13ColorRangesCB6bucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($4,$1,$2)|0);
 return ($5|0);
}
function __ZNK11ColorBucket9snapColorEs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 16 >> 16;
 $3 = ((($0)) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($4<<16>>16)<($1<<16>>16);
 if (!($6)) {
  $$0 = $4;
  return ($$0|0);
 }
 $7 = ((($0)) + 26|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)>($1<<16>>16);
 if (!($9)) {
  $$0 = $8;
  return ($$0|0);
 }
 $10 = ((($0)) + 28|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$0 = $1;
  return ($$0|0);
 }
 $13 = (($2) - ($5))|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = (($14) + ($13<<1)|0);
 $16 = HEAP16[$15>>1]|0;
 $$0 = $16;
 return ($$0|0);
}
function __ZNK12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$2 = $0;
  return ($$2|0);
  break;
 }
 case 1:  {
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP16[$3>>1]|0;
  $5 = $4 << 16 >> 16;
  $6 = ((($0)) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) - ($7))|0;
  $9 = ($8|0)>(-1);
  if ($9) {
   $10 = ((($0)) + 40|0);
   $11 = ((($0)) + 44|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$10>>2]|0;
   $14 = (($12) - ($13))|0;
   $15 = $14 >> 5;
   $16 = ($8|0)<($15|0);
   if ($16) {
    $17 = HEAP32[$10>>2]|0;
    $18 = (($17) + ($8<<5)|0);
    $$2 = $18;
    return ($$2|0);
   }
  }
  $19 = ((($0)) + 96|0);
  $$2 = $19;
  return ($$2|0);
  break;
 }
 case 2:  {
  $20 = HEAP32[$2>>2]|0;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ((($0)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) - ($24))|0;
  $26 = ((($20)) + 2|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = ((($0)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) - ($30))|0;
  $32 = (($31|0) / 4)&-1;
  $33 = ($25|0)>(-1);
  if ($33) {
   $34 = ((($0)) + 52|0);
   $35 = ((($0)) + 56|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = HEAP32[$34>>2]|0;
   $38 = (($36) - ($37))|0;
   $39 = (($38|0) / 12)&-1;
   $40 = ($25|0)<($39|0);
   $41 = ($31|0)>(-4);
   $or$cond = $41 & $40;
   if ($or$cond) {
    $42 = HEAP32[$34>>2]|0;
    $43 = (($42) + (($25*12)|0)|0);
    $44 = (((($42) + (($25*12)|0)|0)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$43>>2]|0;
    $47 = (($45) - ($46))|0;
    $48 = $47 >> 5;
    $49 = ($32|0)<($48|0);
    if ($49) {
     $50 = HEAP32[$43>>2]|0;
     $51 = (($50) + ($32<<5)|0);
     $$2 = $51;
     return ($$2|0);
    }
   }
  }
  $52 = ((($0)) + 96|0);
  $$2 = $52;
  return ($$2|0);
  break;
 }
 default: {
  $53 = ((($0)) + 64|0);
  $$2 = $53;
  return ($$2|0);
 }
 }
 return (0)|0;
}
function __ZN12ColorBucketsD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 __ZN11ColorBucketD2Ev($1);
 $2 = ((($0)) + 64|0);
 __ZN11ColorBucketD2Ev($2);
 $3 = ((($0)) + 52|0);
 __ZNSt3__213__vector_baseINS_6vectorI11ColorBucketNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($3);
 $4 = ((($0)) + 40|0);
 __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($4);
 __ZN11ColorBucketD2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorI11ColorBucketNS_9allocatorIS2_EEEENS3_IS5_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 1;
 $7 = (($2) + ($6<<1)|0);
 $8 = (($2) + ($1<<1)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 1;
 $13 = (($2) + ($12<<1)|0);
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$8,$13);
 return;
}
function __ZNK11ColorBucket14snapColor_slowEs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$035 = 0, $$031$$032 = 0, $$03146 = 0, $$03245 = 0, $$03544 = 0, $$2 = 0, $$23440 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $ispos37 = 0, $neg = 0, $neg38 = 0, $not$ = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 16 >> 16;
 $3 = ((($0)) + 24|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ($4<<16>>16)<($1<<16>>16);
 if (!($6)) {
  $$2 = $4;
  return ($$2|0);
 }
 $7 = ((($0)) + 26|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)>($1<<16>>16);
 if (!($9)) {
  $$2 = $8;
  return ($$2|0);
 }
 $10 = ((($0)) + 28|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2 = $1;
  return ($$2|0);
 }
 $13 = (($2) - ($5))|0;
 $14 = ((($0)) + 12|0);
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$14>>2]|0;
 $18 = (($16) - ($17))|0;
 $19 = $18 >> 1;
 $20 = ($19>>>0)>(1);
 L10: do {
  if ($20) {
   $ispos = ($13|0)>(-1);
   $neg = (0 - ($13))|0;
   $21 = $ispos ? $13 : $neg;
   $22 = $21&65535;
   $23 = HEAP32[$14>>2]|0;
   $$03146 = 1;$$03245 = 0;$$03544 = $22;
   while(1) {
    $24 = (($23) + ($$03146<<1)|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)==($1<<16>>16);
    if ($26) {
     $$2 = $1;
     break;
    }
    $27 = $25 << 16 >> 16;
    $28 = (($2) - ($27))|0;
    $ispos37 = ($28|0)>(-1);
    $neg38 = (0 - ($28))|0;
    $29 = $ispos37 ? $28 : $neg38;
    $sext = $29 << 16;
    $30 = $sext >> 16;
    $31 = $$03544 << 16 >> 16;
    $32 = ($30|0)<($31|0);
    $$031$$032 = $32 ? $$03146 : $$03245;
    $not$ = ($25<<16>>16)>($1<<16>>16);
    if ($not$) {
     $$23440 = $$031$$032;
     break L10;
    }
    $33 = $29&65535;
    $$$035 = $32 ? $33 : $$03544;
    $34 = (($$03146) + 1)|0;
    $35 = HEAP32[$15>>2]|0;
    $36 = HEAP32[$14>>2]|0;
    $37 = (($35) - ($36))|0;
    $38 = $37 >> 1;
    $39 = ($34>>>0)<($38>>>0);
    if ($39) {
     $$03146 = $34;$$03245 = $$031$$032;$$03544 = $$$035;
    } else {
     $$23440 = $$031$$032;
     break L10;
    }
   }
   return ($$2|0);
  } else {
   $$23440 = 0;
  }
 } while(0);
 $40 = HEAP32[$14>>2]|0;
 $41 = (($40) + ($$23440<<1)|0);
 $42 = HEAP16[$41>>1]|0;
 $$2 = $42;
 return ($$2|0);
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = ($15>>>0)<($9>>>0);
  $$sroa$speculated$i = $19 ? $9 : $15;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($14))|0;
  $22 = $21 >> 1;
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEEC2EjjS3_($2,$$0$i,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP16[$1>>1]|0;
  HEAP16[$24>>1] = $25;
  $26 = HEAP32[$23>>2]|0;
  $27 = ((($26)) + 2|0);
  HEAP32[$23>>2] = $27;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE26__swap_out_circular_bufferERNS_14__split_bufferIsRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIsRNS_9allocatorIsEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 1;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$10,$11,$8);
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 1;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<1)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(134217727);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 5;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<5)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07$i = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = ($1|0)==($2|0);
 if (!($6)) {
  $$07$i = $1;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   __ZN11ColorBucketC2ERKS_($7,$$07$i);
   $8 = ((($$07$i)) + 32|0);
   $9 = HEAP32[$5>>2]|0;
   $10 = ((($9)) + 32|0);
   HEAP32[$5>>2] = $10;
   $11 = ($8|0)==($2|0);
   if ($11) {
    break;
   } else {
    $$07$i = $8;
   }
  }
 }
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 134217727;
}
function __ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 5;
 $7 = (($2) + ($6<<5)|0);
 $8 = (($2) + ($1<<5)|0);
 __ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEEC2EjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  _memcpy(($8|0),($2|0),16500)|0;
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($9)) + 16500|0);
  HEAP32[$7>>2] = $10;
  $11 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK11TransformCBI8BufferIOE11load_bucketERNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24IS0_ELi18EENS2_9allocatorIS8_EEEEPK11ColorRangesiRKNS3_IsNS9_IsEEEESJ_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$044 = 0, $$044$in70 = 0, $$04672 = 0, $$071 = 0, $$off = 0, $$sroa$speculated = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $sext69 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $7 = sp + 6|0;
 $8 = sp + 4|0;
 $9 = sp + 2|0;
 $10 = sp;
 __ZN11ColorBucketC2Ev($0);
 $$off = (($4) + -1)|0;
 $11 = ($$off>>>0)<(2);
 L1: do {
  if ($11) {
   $12 = ((($1)) + 4|0);
   $$04672 = 0;
   while(1) {
    $15 = HEAP32[$12>>2]|0;
    $16 = (__ZNK12ColorBuckets6existsEiRKNSt3__26vectorIsNS0_9allocatorIsEEEES6_($15,$$04672,$5,$6)|0);
    $13 = (($$04672) + 1)|0;
    if (!($16)) {
     break;
    }
    $14 = ($13|0)<($4|0);
    if ($14) {
     $$04672 = $13;
    } else {
     break L1;
    }
   }
   STACKTOP = sp;return;
  }
 } while(0);
 __ZN11TransformCBI8BufferIOE6minmaxEPK11ColorRangesiRKNSt3__26vectorIsNS5_9allocatorIsEEEESB_RsSC_($3,$4,$5,$6,$8,$9);
 $17 = HEAP32[$2>>2]|0;
 $18 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($17,0,1)|0);
 $19 = ($18|0)==(0);
 do {
  if (!($19)) {
   $20 = HEAP16[$8>>1]|0;
   $21 = HEAP16[$9>>1]|0;
   $22 = ($20<<16>>16)==($21<<16>>16);
   if ($22) {
    $23 = ((($0)) + 26|0);
    HEAP16[$23>>1] = $20;
    $24 = ((($0)) + 24|0);
    HEAP16[$24>>1] = $20;
    $25 = ((($0)) + 28|0);
    HEAP8[$25>>0] = 0;
    break;
   }
   $26 = HEAP32[$2>>2]|0;
   $27 = ((($26)) + 16500|0);
   $28 = $20 << 16 >> 16;
   $29 = $21 << 16 >> 16;
   $30 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($27,$28,$29)|0);
   $31 = $30&65535;
   $32 = ((($0)) + 24|0);
   HEAP16[$32>>1] = $31;
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + 33000|0);
   $sext69 = $30 << 16;
   $35 = $sext69 >> 16;
   $36 = HEAP16[$9>>1]|0;
   $37 = $36 << 16 >> 16;
   $38 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($34,$35,$37)|0);
   $39 = $38&65535;
   $40 = ((($0)) + 26|0);
   HEAP16[$40>>1] = $39;
   $41 = HEAP16[$32>>1]|0;
   $42 = $41 << 16 >> 16;
   $sext = $38 << 16;
   $43 = $sext >> 16;
   $44 = ($42|0)==($43|0);
   if ($44) {
    $45 = ((($0)) + 28|0);
    HEAP8[$45>>0] = 0;
    break;
   }
   $46 = (($42) + 1)|0;
   $47 = ($46|0)==($43|0);
   if ($47) {
    $48 = ((($0)) + 28|0);
    HEAP8[$48>>0] = 0;
    break;
   }
   $49 = HEAP32[$2>>2]|0;
   $50 = ((($49)) + 49500|0);
   $51 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($50,0,1)|0);
   $52 = ($51|0)!=(0);
   $53 = ((($0)) + 28|0);
   $54 = $52&1;
   HEAP8[$53>>0] = $54;
   if ($52) {
    $55 = HEAP32[$2>>2]|0;
    $56 = ((($55)) + 66000|0);
    $57 = (2032 + ($4<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = HEAP16[$40>>1]|0;
    $60 = $59 << 16 >> 16;
    $61 = HEAP16[$32>>1]|0;
    $62 = $61 << 16 >> 16;
    $63 = (($60) - ($62))|0;
    $64 = ($63|0)<($58|0);
    $$sroa$speculated = $64 ? $63 : $58;
    $65 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($56,2,$$sroa$speculated)|0);
    $66 = ((($0)) + 12|0);
    $67 = ((($0)) + 16|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($0)) + 20|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($68|0)==($70|0);
    if ($71) {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($66,$32);
    } else {
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($7,$66,1);
     $72 = HEAP32[$67>>2]|0;
     $73 = HEAP16[$32>>1]|0;
     HEAP16[$72>>1] = $73;
     __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($7);
     $74 = HEAP32[$67>>2]|0;
     $75 = ((($74)) + 2|0);
     HEAP32[$67>>2] = $75;
    }
    $76 = (($65) + -1)|0;
    $77 = ($76|0)>(1);
    if ($77) {
     $78 = (1 - ($65))|0;
     $$044$in70 = $32;$$071 = 1;
     while(1) {
      $$044 = HEAP16[$$044$in70>>1]|0;
      $82 = HEAP32[$2>>2]|0;
      $83 = ((($82)) + 82500|0);
      $84 = $$044 << 16 >> 16;
      $85 = (($84) + 1)|0;
      $86 = HEAP16[$40>>1]|0;
      $87 = $86 << 16 >> 16;
      $88 = (($78) + ($$071))|0;
      $89 = (($88) + ($87))|0;
      $90 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($83,$85,$89)|0);
      $91 = $90&65535;
      HEAP16[$10>>1] = $91;
      $92 = HEAP32[$67>>2]|0;
      $93 = HEAP32[$69>>2]|0;
      $94 = ($92>>>0)<($93>>>0);
      if ($94) {
       __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($7,$66,1);
       $95 = HEAP32[$67>>2]|0;
       $96 = HEAP16[$10>>1]|0;
       HEAP16[$95>>1] = $96;
       __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($7);
       $97 = HEAP32[$67>>2]|0;
       $98 = ((($97)) + 2|0);
       HEAP32[$67>>2] = $98;
      } else {
       __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($66,$10);
      }
      $99 = HEAP32[$66>>2]|0;
      $100 = (($99) + ($$071<<1)|0);
      $101 = (($$071) + 1)|0;
      $102 = ($101|0)<($76|0);
      if ($102) {
       $$044$in70 = $100;$$071 = $101;
      } else {
       break;
      }
     }
    }
    $79 = HEAP16[$32>>1]|0;
    $80 = HEAP16[$40>>1]|0;
    $81 = ($79<<16>>16)<($80<<16>>16);
    if ($81) {
     $103 = HEAP32[$67>>2]|0;
     $104 = HEAP32[$69>>2]|0;
     $105 = ($103|0)==($104|0);
     if ($105) {
      __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIRKsEEvOT_($66,$40);
      break;
     } else {
      __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($7,$66,1);
      $106 = HEAP32[$67>>2]|0;
      $107 = HEAP16[$40>>1]|0;
      HEAP16[$106>>1] = $107;
      __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($7);
      $108 = HEAP32[$67>>2]|0;
      $109 = ((($108)) + 2|0);
      HEAP32[$67>>2] = $109;
      break;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN11ColorBucketaSERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE6assignIPsEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$3,$5);
 }
 $6 = ($0|0)==($1|0);
 if ($6) {
  $12 = ((($0)) + 24|0);
  $13 = ((($1)) + 24|0);
  ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP8[$12+4>>0]=HEAP8[$13+4>>0]|0;
  return ($0|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = ((($1)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 __ZNSt3__26vectorIsNS_9allocatorIsEEE6assignIPsEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($7,$9,$11);
 $12 = ((($0)) + 24|0);
 $13 = ((($1)) + 24|0);
 ;HEAP32[$12>>2]=HEAP32[$13>>2]|0;HEAP8[$12+4>>0]=HEAP8[$13+4>>0]|0;
 return ($0|0);
}
function __ZNSt3__213__vector_baseI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -16500|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 16500)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + (($10*16500)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE6assignIPsEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIsNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$cast$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = ($6>>>0)>($11>>>0);
 if ($12) {
  __ZNSt3__26vectorIsNS_9allocatorIsEEE10deallocateEv($0);
  $36 = (__ZNKSt3__26vectorIsNS_9allocatorIsEEE8max_sizeEv($0)|0);
  $37 = ($36>>>0)<($6>>>0);
  if ($37) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($38) - ($39))|0;
  $41 = $40 >> 1;
  $42 = $36 >>> 1;
  $43 = ($41>>>0)<($42>>>0);
  $44 = ($40>>>0)<($6>>>0);
  $$sroa$speculated$i = $44 ? $6 : $40;
  $$0$i = $43 ? $$sroa$speculated$i : $36;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE8allocateEj($0,$$0$i);
  __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$6);
  return;
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($9))|0;
 $16 = $15 >> 1;
 $17 = ($6>>>0)>($16>>>0);
 $18 = (($1) + ($16<<1)|0);
 $$ = $17 ? $18 : $2;
 $19 = HEAP32[$0>>2]|0;
 $20 = $$;
 $21 = (($20) - ($4))|0;
 $22 = $21 >> 1;
 $23 = ($22|0)==(0);
 if (!($23)) {
  _memmove(($19|0),($1|0),($21|0))|0;
 }
 $24 = (($19) + ($22<<1)|0);
 $25 = HEAP32[$13>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 1;
 if ($17) {
  $29 = (($6) - ($28))|0;
  __ZNSt3__26vectorIsNS_9allocatorIsEEE18__construct_at_endIPsEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$$,$2,$29);
  return;
 }
 $$cast$i = $25;
 $30 = ($$cast$i|0)==($24|0);
 if (!($30)) {
  $scevgep$i$i = ((($$cast$i)) + -2|0);
  $31 = $scevgep$i$i;
  $32 = $24;
  $33 = (($31) - ($32))|0;
  $34 = $33 >>> 1;
  $35 = $34 ^ -1;
  $scevgep4$i$i = (($$cast$i) + ($35<<1)|0);
  HEAP32[$13>>2] = $scevgep4$i$i;
 }
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($0,$28);
 return;
}
function __ZNSt3__26vectorIsNS_9allocatorIsEEE10deallocateEv($0) {
 $0 = $0|0;
 var $$cast = 0, $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 1;
 $$cast$i = $5;
 $$cast = $4;
 $8 = ($$cast|0)==($$cast$i|0);
 if (!($8)) {
  $scevgep$i$i$i = ((($$cast)) + -2|0);
  $9 = $scevgep$i$i$i;
  $10 = (($9) - ($5))|0;
  $11 = $10 >>> 1;
  $12 = $11 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($12<<1)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIsNS_9allocatorIsEEE17__annotate_shrinkEj($0,$7);
 $13 = HEAP32[$0>>2]|0;
 __ZdlPv($13);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZN11ColorBucketC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 HEAP16[$1>>1] = 10000;
 $2 = ((($0)) + 26|0);
 HEAP16[$2>>1] = -10000;
 $3 = ((($0)) + 28|0);
 HEAP8[$3>>0] = 1;
 return;
}
function __ZNK12ColorBuckets6existsEiRKNSt3__26vectorIsNS0_9allocatorIsEEEES6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($4,$2);
 L1: do {
  switch ($1|0) {
  case 0:  {
   $5 = HEAP32[$2>>2]|0;
   $6 = HEAP16[$5>>1]|0;
   $7 = HEAP32[$4>>2]|0;
   HEAP16[$7>>1] = $6;
   $8 = HEAP32[$4>>2]|0;
   $9 = HEAP16[$8>>1]|0;
   $10 = HEAP32[$3>>2]|0;
   $11 = HEAP16[$10>>1]|0;
   $12 = ($9<<16>>16)>($11<<16>>16);
   if ($12) {
    $$0 = 0;
   } else {
    while(1) {
     $13 = (__ZNK12ColorBuckets6existsEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$4)|0);
     if ($13) {
      $$0 = 1;
      break L1;
     }
     $14 = HEAP32[$4>>2]|0;
     $15 = HEAP16[$14>>1]|0;
     $16 = (($15) + 1)<<16>>16;
     HEAP16[$14>>1] = $16;
     $17 = HEAP32[$4>>2]|0;
     $18 = HEAP16[$17>>1]|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP16[$19>>1]|0;
     $21 = ($18<<16>>16)>($20<<16>>16);
     if ($21) {
      break;
     }
    }
    $22 = ($1|0)==(1);
    if ($22) {
     label = 6;
    } else {
     $$0 = 0;
    }
   }
   break;
  }
  case 1:  {
   label = 6;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 L7: do {
  if ((label|0) == 6) {
   $23 = HEAP32[$2>>2]|0;
   $24 = HEAP16[$23>>1]|0;
   $25 = HEAP32[$4>>2]|0;
   HEAP16[$25>>1] = $24;
   $26 = HEAP32[$4>>2]|0;
   $27 = HEAP16[$26>>1]|0;
   $28 = HEAP32[$3>>2]|0;
   $29 = HEAP16[$28>>1]|0;
   $30 = ($27<<16>>16)>($29<<16>>16);
   if ($30) {
    $$0 = 0;
   } else {
    $35 = $26;
    while(1) {
     $31 = HEAP32[$2>>2]|0;
     $32 = ((($31)) + 2|0);
     $33 = HEAP16[$32>>1]|0;
     $34 = ((($35)) + 2|0);
     HEAP16[$34>>1] = $33;
     $36 = HEAP32[$4>>2]|0;
     $37 = ((($36)) + 2|0);
     $38 = HEAP16[$37>>1]|0;
     $39 = HEAP32[$3>>2]|0;
     $40 = ((($39)) + 2|0);
     $41 = HEAP16[$40>>1]|0;
     $42 = ($38<<16>>16)>($41<<16>>16);
     if ($42) {
      $$lcssa = $36;
     } else {
      while(1) {
       $43 = (__ZNK12ColorBuckets6existsEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$4)|0);
       if ($43) {
        $$0 = 1;
        break L7;
       }
       $44 = HEAP32[$4>>2]|0;
       $45 = ((($44)) + 2|0);
       $46 = HEAP16[$45>>1]|0;
       $47 = (($46) + 1)<<16>>16;
       HEAP16[$45>>1] = $47;
       $48 = HEAP32[$4>>2]|0;
       $49 = ((($48)) + 2|0);
       $50 = HEAP16[$49>>1]|0;
       $51 = HEAP32[$3>>2]|0;
       $52 = ((($51)) + 2|0);
       $53 = HEAP16[$52>>1]|0;
       $54 = ($50<<16>>16)>($53<<16>>16);
       if ($54) {
        $$lcssa = $48;
        break;
       }
      }
     }
     $55 = HEAP16[$$lcssa>>1]|0;
     $56 = (($55) + 1)<<16>>16;
     HEAP16[$$lcssa>>1] = $56;
     $57 = HEAP32[$4>>2]|0;
     $58 = HEAP16[$57>>1]|0;
     $59 = HEAP32[$3>>2]|0;
     $60 = HEAP16[$59>>1]|0;
     $61 = ($58<<16>>16)>($60<<16>>16);
     if ($61) {
      $$0 = 0;
      break;
     } else {
      $35 = $57;
     }
    }
   }
  }
 } while(0);
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($4);
 STACKTOP = sp;return ($$0|0);
}
function __ZN11TransformCBI8BufferIOE6minmaxEPK11ColorRangesiRKNSt3__26vectorIsNS5_9allocatorIsEEEESB_RsSC_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp + 14|0;
 $7 = sp + 12|0;
 $8 = sp;
 HEAP16[$4>>1] = 10000;
 HEAP16[$5>>1] = -10000;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2ERKS3_($8,$2);
 switch ($1|0) {
 case 0:  {
  $9 = HEAP32[$0>>2]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiiii[$11 & 31]($0,$1,$8,$4,$5);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $12 = HEAP32[$2>>2]|0;
  $13 = HEAP16[$12>>1]|0;
  $14 = HEAP32[$8>>2]|0;
  HEAP16[$14>>1] = $13;
  $15 = HEAP32[$8>>2]|0;
  $16 = HEAP16[$15>>1]|0;
  $17 = HEAP32[$3>>2]|0;
  $18 = HEAP16[$17>>1]|0;
  $19 = ($16<<16>>16)>($18<<16>>16);
  if ($19) {
   __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
   STACKTOP = sp;return;
  }
  while(1) {
   $20 = HEAP32[$0>>2]|0;
   $21 = ((($20)) + 20|0);
   $22 = HEAP32[$21>>2]|0;
   FUNCTION_TABLE_viiiii[$22 & 31]($0,$1,$8,$6,$7);
   $23 = HEAP16[$6>>1]|0;
   $24 = HEAP16[$4>>1]|0;
   $25 = ($23<<16>>16)<($24<<16>>16);
   if ($25) {
    HEAP16[$4>>1] = $23;
   }
   $26 = HEAP16[$7>>1]|0;
   $27 = HEAP16[$5>>1]|0;
   $28 = ($26<<16>>16)>($27<<16>>16);
   if ($28) {
    HEAP16[$5>>1] = $26;
   }
   $29 = HEAP32[$8>>2]|0;
   $30 = HEAP16[$29>>1]|0;
   $31 = (($30) + 1)<<16>>16;
   HEAP16[$29>>1] = $31;
   $32 = HEAP32[$8>>2]|0;
   $33 = HEAP16[$32>>1]|0;
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP16[$34>>1]|0;
   $36 = ($33<<16>>16)>($35<<16>>16);
   if ($36) {
    break;
   }
  }
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $37 = HEAP32[$2>>2]|0;
  $38 = HEAP16[$37>>1]|0;
  $39 = HEAP32[$8>>2]|0;
  HEAP16[$39>>1] = $38;
  $40 = HEAP32[$8>>2]|0;
  $41 = HEAP16[$40>>1]|0;
  $42 = HEAP32[$3>>2]|0;
  $43 = HEAP16[$42>>1]|0;
  $44 = ($41<<16>>16)>($43<<16>>16);
  if ($44) {
   __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
   STACKTOP = sp;return;
  }
  $49 = $40;
  while(1) {
   $45 = HEAP32[$2>>2]|0;
   $46 = ((($45)) + 2|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = ((($49)) + 2|0);
   HEAP16[$48>>1] = $47;
   $50 = HEAP32[$8>>2]|0;
   $51 = ((($50)) + 2|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = HEAP32[$3>>2]|0;
   $54 = ((($53)) + 2|0);
   $55 = HEAP16[$54>>1]|0;
   $56 = ($52<<16>>16)>($55<<16>>16);
   if ($56) {
    $$lcssa = $50;
   } else {
    while(1) {
     $57 = HEAP32[$0>>2]|0;
     $58 = ((($57)) + 20|0);
     $59 = HEAP32[$58>>2]|0;
     FUNCTION_TABLE_viiiii[$59 & 31]($0,$1,$8,$6,$7);
     $60 = HEAP16[$6>>1]|0;
     $61 = HEAP16[$4>>1]|0;
     $62 = ($60<<16>>16)<($61<<16>>16);
     if ($62) {
      HEAP16[$4>>1] = $60;
     }
     $63 = HEAP16[$7>>1]|0;
     $64 = HEAP16[$5>>1]|0;
     $65 = ($63<<16>>16)>($64<<16>>16);
     if ($65) {
      HEAP16[$5>>1] = $63;
     }
     $66 = HEAP32[$8>>2]|0;
     $67 = ((($66)) + 2|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = (($68) + 1)<<16>>16;
     HEAP16[$67>>1] = $69;
     $70 = HEAP32[$8>>2]|0;
     $71 = ((($70)) + 2|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = HEAP32[$3>>2]|0;
     $74 = ((($73)) + 2|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = ($72<<16>>16)>($75<<16>>16);
     if ($76) {
      $$lcssa = $70;
      break;
     }
    }
   }
   $77 = HEAP16[$$lcssa>>1]|0;
   $78 = (($77) + 1)<<16>>16;
   HEAP16[$$lcssa>>1] = $78;
   $79 = HEAP32[$8>>2]|0;
   $80 = HEAP16[$79>>1]|0;
   $81 = HEAP32[$3>>2]|0;
   $82 = HEAP16[$81>>1]|0;
   $83 = ($80<<16>>16)>($82<<16>>16);
   if ($83) {
    break;
   } else {
    $49 = $79;
   }
  }
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $84 = HEAP32[$0>>2]|0;
  $85 = ((($84)) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_viiiii[$86 & 31]($0,$1,$8,$4,$5);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
  STACKTOP = sp;return;
  break;
 }
 default: {
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($8);
  STACKTOP = sp;return;
 }
 }
}
function __ZNK12ColorBuckets6existsEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp + 2|0;
 $5 = sp;
 $6 = ($1|0)>(0);
 if ($6) {
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ((($0)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9|0)<($11|0);
  if ($12) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $13 = ((($0)) + 128|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 63]($14,0)|0);
  $19 = ($8<<16>>16)>($18<<16>>16);
  if ($19) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $20 = ($1|0)>(1);
  if ($20) {
   $21 = HEAP32[$2>>2]|0;
   $22 = ((($21)) + 2|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23 << 16 >> 16;
   $25 = ((($0)) + 36|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($24|0)<($26|0);
   if ($27) {
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
   $28 = ((($0)) + 128|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($30)) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (FUNCTION_TABLE_iii[$32 & 63]($29,1)|0);
   $34 = ($23<<16>>16)>($33<<16>>16);
   if ($34) {
    $$2 = 0;
    STACKTOP = sp;return ($$2|0);
   }
  }
 }
 $35 = HEAP32[$2>>2]|0;
 $36 = (($35) + ($1<<1)|0);
 $37 = HEAP16[$36>>1]|0;
 HEAP16[$5>>1] = $37;
 $38 = ((($0)) + 128|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($40)) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 FUNCTION_TABLE_viiiiii[$42 & 15]($39,$1,$2,$3,$4,$5);
 $43 = HEAP16[$5>>1]|0;
 $44 = HEAP32[$2>>2]|0;
 $45 = (($44) + ($1<<1)|0);
 $46 = HEAP16[$45>>1]|0;
 $47 = ($43<<16>>16)==($46<<16>>16);
 if ($47) {
  $48 = (__ZNK12ColorBuckets10findBucketEiRKNSt3__26vectorIsNS0_9allocatorIsEEEE($0,$1,$2)|0);
  $49 = HEAP32[$2>>2]|0;
  $50 = (($49) + ($1<<1)|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = (__ZNK11ColorBucket14snapColor_slowEs($48,$51)|0);
  $53 = HEAP32[$2>>2]|0;
  $54 = (($53) + ($1<<1)|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = ($52<<16>>16)==($55<<16>>16);
  $$1 = $56;
 } else {
  $$1 = 0;
 }
 $$2 = $$1;
 STACKTOP = sp;return ($$2|0);
}
function __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(260301);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*16500)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*16500)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 260301;
}
function __ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 16500)&-1;
 $7 = (($2) + (($6*16500)|0)|0);
 $8 = (($2) + (($1*16500)|0)|0);
 __ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12ColorBucketsC2EPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 __ZN11ColorBucketC2Ev($0);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($1,0)|0);
 $8 = $7 << 16 >> 16;
 HEAP32[$3>>2] = $8;
 $9 = ((($0)) + 36|0);
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iii[$12 & 63]($1,1)|0);
 $14 = $13 << 16 >> 16;
 HEAP32[$9>>2] = $14;
 $15 = ((($0)) + 40|0);
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_iii[$18 & 63]($1,0)|0);
 $20 = $19 << 16 >> 16;
 $21 = HEAP32[$3>>2]|0;
 $22 = (($20) + 1)|0;
 $23 = (($22) - ($21))|0;
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2Ej($15,$23);
 $24 = ((($0)) + 52|0);
 $25 = HEAP32[$1>>2]|0;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iii[$27 & 63]($1,0)|0);
 $29 = $28 << 16 >> 16;
 $30 = HEAP32[$3>>2]|0;
 $31 = (($29) + 1)|0;
 $32 = (($31) - ($30))|0;
 $33 = HEAP32[$1>>2]|0;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (FUNCTION_TABLE_iii[$35 & 63]($1,1)|0);
 $37 = $36 << 16 >> 16;
 $38 = HEAP32[$9>>2]|0;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = (($40) + 1)|0;
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2Ej($2,$41);
 __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEEC2EjRKS4_($24,$32,$2);
 __ZNSt3__213__vector_baseI11ColorBucketNS_9allocatorIS1_EEED2Ev($2);
 $42 = ((($0)) + 64|0);
 __ZN11ColorBucketC2Ev($42);
 $43 = ((($0)) + 96|0);
 __ZN11ColorBucketC2Ev($43);
 $44 = ((($0)) + 128|0);
 HEAP32[$44>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE8allocateEj($0,$1);
 __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE18__construct_at_endEj($0,$1);
 return;
}
function __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEEC2EjRKS4_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEEC2ERKS4_($8,$2);
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($9)) + 12|0);
  HEAP32[$7>>2] = $10;
  $11 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(357913941);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*12)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*12)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($2) + (($6*12)|0)|0);
 $8 = (($2) + (($1*12)|0)|0);
 __ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS0_I11ColorBucketNS_9allocatorIS1_EEEENS2_IS4_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $$0 = $1;
 while(1) {
  __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($2,$0,1);
  $4 = HEAP32[$3>>2]|0;
  __ZN11ColorBucketC2Ev($4);
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 32|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  __ZNSt3__26vectorI11ColorBucketNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;
  }
 }
 STACKTOP = sp;return;
}
function __ZN16TransformPermuteI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (2056);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN16TransformPermuteI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2056);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN16TransformPermuteI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN16TransformPermuteI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN16TransformPermuteI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 63]($1,0)|0);
 $11 = ($10<<16>>16)<(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iii[$14 & 63]($1,1)|0);
 $16 = ($15<<16>>16)<(0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iii[$19 & 63]($1,2)|0);
 $21 = ($20<<16>>16)<(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$1>>2]|0;
 $24 = ((($23)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 63]($1)|0);
 __ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEj($22,$26);
 $27 = ((($0)) + 16|0);
 HEAP32[$27>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function __ZN16TransformPermuteI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02024 = 0, $$02125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16528|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 28|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($3,$2,2,226050910);
 $6 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($3,0,1)|0);
 $7 = ($6|0)!=(0);
 $8 = ((($0)) + 20|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 if ($7) {
  __Z8v_printfiPKcz(4,3903,$vararg_buffer);
 }
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 $10 = HEAP32[$1>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 63]($1)|0);
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = ((($0)) + 4|0);
  $$02125 = 0;
  while(1) {
   $21 = HEAP32[$1>>2]|0;
   $22 = ((($21)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_ii[$23 & 63]($1)|0);
   $25 = (($24) + -1)|0;
   $26 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($3,0,$25)|0);
   $27 = HEAP32[$15>>2]|0;
   $28 = (($27) + ($$02125<<2)|0);
   HEAP32[$28>>2] = $26;
   $29 = HEAP32[$15>>2]|0;
   $30 = (($29) + ($$02125<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $$02125;
   $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $31;
   __Z8v_printfiPKcz(5,3912,$vararg_buffer1);
   $32 = (($4) + ($$02125)|0);
   HEAP8[$32>>0] = 1;
   $33 = HEAP32[$15>>2]|0;
   $34 = (($33) + ($$02125<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($5) + ($35)|0);
   HEAP8[$36>>0] = 1;
   $37 = (($$02125) + 1)|0;
   $38 = HEAP32[$1>>2]|0;
   $39 = ((($38)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 63]($1)|0);
   $42 = ($37|0)<($41|0);
   if ($42) {
    $$02125 = $37;
   } else {
    break;
   }
  }
 }
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 63]($1)|0);
 $20 = ($19|0)>(0);
 if ($20) {
  $$02024 = 0;
 } else {
  $55 = 1;
  STACKTOP = sp;return ($55|0);
 }
 while(1) {
  $49 = (($4) + ($$02024)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)==(0);
  if ($51) {
   break;
  }
  $52 = (($5) + ($$02024)|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)==(0);
  $47 = (($$02024) + 1)|0;
  if ($54) {
   break;
  }
  $43 = HEAP32[$1>>2]|0;
  $44 = ((($43)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 63]($1)|0);
  $48 = ($47|0)<($46|0);
  if ($48) {
   $$02024 = $47;
  } else {
   $55 = 1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($55|0);
 }
 __Z8e_printfPKcz(3921,$vararg_buffer4);
 $55 = 0;
 STACKTOP = sp;return ($55|0);
}
function __ZN16TransformPermuteI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 $6 = (__Znwj(20)|0);
 $7 = ((($0)) + 4|0);
 if ($5) {
  __ZN18ColorRangesPermuteC2ERKNSt3__26vectorIiNS0_9allocatorIiEEEEPK11ColorRanges($6,$7,$2);
  return ($6|0);
 } else {
  __ZN26ColorRangesPermuteSubtractC2ERKNSt3__26vectorIiNS0_9allocatorIiEEEEPK11ColorRanges($6,$7,$2);
  return ($6|0);
 }
 return (0)|0;
}
function __ZNK16TransformPermuteI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0106 = 0, $$078108 = 0, $$079101 = 0, $$08099 = 0, $$081110 = 0, $$082114 = 0, $$08398 = 0, $$lcssa96 = 0, $$sroa$085$0116 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 16|0);
 $8 = ((($0)) + 4|0);
 $9 = ((($0)) + 20|0);
 $10 = ((($2)) + 2|0);
 $11 = ((($2)) + 4|0);
 $$sroa$085$0116 = $3;
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_ii[$15 & 63]($12)|0);
  $17 = ($16|0)>(0);
  if ($17) {
   $$08398 = 0;
   while(1) {
    __ZN5Image24undo_make_constant_planeEi($$sroa$085$0116,$$08398);
    $20 = (($$08398) + 1)|0;
    $21 = HEAP32[$7>>2]|0;
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 63]($21)|0);
    $26 = ($20|0)<($25|0);
    if ($26) {
     $$08398 = $20;
    } else {
     break;
    }
   }
  }
  $18 = (__ZNK5Image4rowsEv($$sroa$085$0116)|0);
  $19 = ($18|0)==(0);
  if (!($19)) {
   $$082114 = 0;
   while(1) {
    $27 = (__ZNK5Image4colsEv($$sroa$085$0116)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     $$081110 = 0;
     while(1) {
      $31 = HEAP32[$7>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      $33 = ((($32)) + 8|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (FUNCTION_TABLE_ii[$34 & 63]($31)|0);
      $36 = ($35|0)>(0);
      if ($36) {
       $$08099 = 0;
       while(1) {
        $47 = (__ZNK5ImageclEijj($$sroa$085$0116,$$08099,$$082114,$$081110)|0);
        $48 = (($2) + ($$08099<<1)|0);
        HEAP16[$48>>1] = $47;
        $49 = (($$08099) + 1)|0;
        $50 = HEAP32[$7>>2]|0;
        $51 = HEAP32[$50>>2]|0;
        $52 = ((($51)) + 8|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = (FUNCTION_TABLE_ii[$53 & 63]($50)|0);
        $55 = ($49|0)<($54|0);
        if ($55) {
         $$08099 = $49;
        } else {
         break;
        }
       }
      }
      $40 = HEAP32[$7>>2]|0;
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($41)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (FUNCTION_TABLE_ii[$43 & 63]($40)|0);
      $45 = ($44|0)>(0);
      $46 = HEAP32[$8>>2]|0;
      if ($45) {
       $$079101 = 0;$67 = $46;
       while(1) {
        $66 = (($67) + ($$079101<<2)|0);
        $68 = HEAP32[$66>>2]|0;
        $69 = (($2) + ($$079101<<1)|0);
        $70 = HEAP16[$69>>1]|0;
        __ZN5Image3setEijjs($$sroa$085$0116,$68,$$082114,$$081110,$70);
        $71 = (($$079101) + 1)|0;
        $72 = HEAP32[$7>>2]|0;
        $73 = HEAP32[$72>>2]|0;
        $74 = ((($73)) + 8|0);
        $75 = HEAP32[$74>>2]|0;
        $76 = (FUNCTION_TABLE_ii[$75 & 63]($72)|0);
        $77 = ($71|0)<($76|0);
        $78 = HEAP32[$8>>2]|0;
        if ($77) {
         $$079101 = $71;$67 = $78;
        } else {
         $$lcssa96 = $78;
         break;
        }
       }
      } else {
       $$lcssa96 = $46;
      }
      $56 = HEAP32[$$lcssa96>>2]|0;
      $57 = HEAP16[$2>>1]|0;
      __ZN5Image3setEijjs($$sroa$085$0116,$56,$$082114,$$081110,$57);
      $58 = HEAP8[$9>>0]|0;
      $59 = ($58<<24>>24)==(0);
      if ($59) {
       $60 = HEAP32[$7>>2]|0;
       $61 = HEAP32[$60>>2]|0;
       $62 = ((($61)) + 8|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (FUNCTION_TABLE_ii[$63 & 63]($60)|0);
       $65 = ($64|0)>(1);
       if ($65) {
        $$078108 = 1;
        while(1) {
         $79 = HEAP32[$8>>2]|0;
         $80 = (($79) + ($$078108<<2)|0);
         $81 = HEAP32[$80>>2]|0;
         $82 = (($2) + ($$078108<<1)|0);
         $83 = HEAP16[$82>>1]|0;
         __ZN5Image3setEijjs($$sroa$085$0116,$81,$$082114,$$081110,$83);
         $84 = (($$078108) + 1)|0;
         $85 = HEAP32[$7>>2]|0;
         $86 = HEAP32[$85>>2]|0;
         $87 = ((($86)) + 8|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (FUNCTION_TABLE_ii[$88 & 63]($85)|0);
         $90 = ($84|0)<($89|0);
         if ($90) {
          $$078108 = $84;
         } else {
          break;
         }
        }
       }
      } else {
       $91 = HEAP16[$2>>1]|0;
       $92 = $91 << 16 >> 16;
       $93 = $91 << 16 >> 16;
       $94 = $91 << 16 >> 16;
       $95 = HEAP32[$7>>2]|0;
       $96 = HEAP32[$95>>2]|0;
       $97 = ((($96)) + 8|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (FUNCTION_TABLE_ii[$98 & 63]($95)|0);
       $100 = ($99|0)>(1);
       if ($100) {
        $107 = HEAP32[$8>>2]|0;
        $108 = ((($107)) + 4|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = HEAP16[$10>>1]|0;
        $111 = $110 << 16 >> 16;
        $112 = (($92) + ($111))|0;
        $113 = HEAP32[$7>>2]|0;
        $114 = HEAP32[$113>>2]|0;
        $115 = ((($114)) + 16|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = (FUNCTION_TABLE_iii[$116 & 63]($113,$109)|0);
        $118 = $117 << 16 >> 16;
        $119 = ($112|0)>($118|0);
        do {
         if ($119) {
          $120 = HEAP32[$7>>2]|0;
          $121 = HEAP32[$120>>2]|0;
          $122 = ((($121)) + 16|0);
          $123 = HEAP32[$122>>2]|0;
          $124 = HEAP32[$8>>2]|0;
          $125 = ((($124)) + 4|0);
          $126 = HEAP32[$125>>2]|0;
          $127 = (FUNCTION_TABLE_iii[$123 & 63]($120,$126)|0);
          $128 = $127 << 16 >> 16;
          $155 = $128;
         } else {
          $129 = HEAP16[$10>>1]|0;
          $130 = $129 << 16 >> 16;
          $131 = (($93) + ($130))|0;
          $132 = HEAP32[$7>>2]|0;
          $133 = HEAP32[$132>>2]|0;
          $134 = ((($133)) + 12|0);
          $135 = HEAP32[$134>>2]|0;
          $136 = HEAP32[$8>>2]|0;
          $137 = ((($136)) + 4|0);
          $138 = HEAP32[$137>>2]|0;
          $139 = (FUNCTION_TABLE_iii[$135 & 63]($132,$138)|0);
          $140 = $139 << 16 >> 16;
          $141 = ($131|0)<($140|0);
          if ($141) {
           $142 = HEAP32[$7>>2]|0;
           $143 = HEAP32[$142>>2]|0;
           $144 = ((($143)) + 12|0);
           $145 = HEAP32[$144>>2]|0;
           $146 = HEAP32[$8>>2]|0;
           $147 = ((($146)) + 4|0);
           $148 = HEAP32[$147>>2]|0;
           $149 = (FUNCTION_TABLE_iii[$145 & 63]($142,$148)|0);
           $150 = $149 << 16 >> 16;
           $155 = $150;
           break;
          } else {
           $151 = HEAP16[$10>>1]|0;
           $152 = $151 << 16 >> 16;
           $153 = (($94) + ($152))|0;
           $155 = $153;
           break;
          }
         }
        } while(0);
        $154 = $155&65535;
        __ZN5Image3setEijjs($$sroa$085$0116,$109,$$082114,$$081110,$154);
        $156 = HEAP32[$7>>2]|0;
        $157 = HEAP32[$156>>2]|0;
        $158 = ((($157)) + 8|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = (FUNCTION_TABLE_ii[$159 & 63]($156)|0);
        $161 = ($160|0)>(2);
        if ($161) {
         $177 = HEAP32[$8>>2]|0;
         $178 = ((($177)) + 8|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = HEAP16[$11>>1]|0;
         $181 = $180 << 16 >> 16;
         $182 = (($92) + ($181))|0;
         $183 = HEAP32[$7>>2]|0;
         $184 = HEAP32[$183>>2]|0;
         $185 = ((($184)) + 16|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = (FUNCTION_TABLE_iii[$186 & 63]($183,$179)|0);
         $188 = $187 << 16 >> 16;
         $189 = ($182|0)>($188|0);
         do {
          if ($189) {
           $215 = HEAP32[$7>>2]|0;
           $216 = HEAP32[$215>>2]|0;
           $217 = ((($216)) + 16|0);
           $218 = HEAP32[$217>>2]|0;
           $219 = HEAP32[$8>>2]|0;
           $220 = ((($219)) + 8|0);
           $221 = HEAP32[$220>>2]|0;
           $222 = (FUNCTION_TABLE_iii[$218 & 63]($215,$221)|0);
           $223 = $222 << 16 >> 16;
           $225 = $223;
          } else {
           $190 = HEAP16[$11>>1]|0;
           $191 = $190 << 16 >> 16;
           $192 = (($93) + ($191))|0;
           $193 = HEAP32[$7>>2]|0;
           $194 = HEAP32[$193>>2]|0;
           $195 = ((($194)) + 12|0);
           $196 = HEAP32[$195>>2]|0;
           $197 = HEAP32[$8>>2]|0;
           $198 = ((($197)) + 8|0);
           $199 = HEAP32[$198>>2]|0;
           $200 = (FUNCTION_TABLE_iii[$196 & 63]($193,$199)|0);
           $201 = $200 << 16 >> 16;
           $202 = ($192|0)<($201|0);
           if ($202) {
            $206 = HEAP32[$7>>2]|0;
            $207 = HEAP32[$206>>2]|0;
            $208 = ((($207)) + 12|0);
            $209 = HEAP32[$208>>2]|0;
            $210 = HEAP32[$8>>2]|0;
            $211 = ((($210)) + 8|0);
            $212 = HEAP32[$211>>2]|0;
            $213 = (FUNCTION_TABLE_iii[$209 & 63]($206,$212)|0);
            $214 = $213 << 16 >> 16;
            $225 = $214;
            break;
           } else {
            $203 = HEAP16[$11>>1]|0;
            $204 = $203 << 16 >> 16;
            $205 = (($94) + ($204))|0;
            $225 = $205;
            break;
           }
          }
         } while(0);
         $224 = $225&65535;
         __ZN5Image3setEijjs($$sroa$085$0116,$179,$$082114,$$081110,$224);
        }
       }
       $101 = HEAP32[$7>>2]|0;
       $102 = HEAP32[$101>>2]|0;
       $103 = ((($102)) + 8|0);
       $104 = HEAP32[$103>>2]|0;
       $105 = (FUNCTION_TABLE_ii[$104 & 63]($101)|0);
       $106 = ($105|0)>(3);
       if ($106) {
        $$0106 = 3;
        while(1) {
         $162 = HEAP32[$8>>2]|0;
         $163 = (($162) + ($$0106<<2)|0);
         $164 = HEAP32[$163>>2]|0;
         $165 = (($2) + ($$0106<<1)|0);
         $166 = HEAP16[$165>>1]|0;
         __ZN5Image3setEijjs($$sroa$085$0116,$164,$$082114,$$081110,$166);
         $167 = (($$0106) + 1)|0;
         $168 = HEAP32[$7>>2]|0;
         $169 = HEAP32[$168>>2]|0;
         $170 = ((($169)) + 8|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = (FUNCTION_TABLE_ii[$171 & 63]($168)|0);
         $173 = ($167|0)<($172|0);
         if ($173) {
          $$0106 = $167;
         } else {
          break;
         }
        }
       }
      }
      $174 = (($$081110) + 1)|0;
      $175 = (__ZNK5Image4colsEv($$sroa$085$0116)|0);
      $176 = ($174>>>0)<($175>>>0);
      if ($176) {
       $$081110 = $174;
      } else {
       break;
      }
     }
    }
    $37 = (($$082114) + 1)|0;
    $38 = (__ZNK5Image4rowsEv($$sroa$085$0116)|0);
    $39 = ($37>>>0)<($38>>>0);
    if ($39) {
     $$082114 = $37;
    } else {
     break;
    }
   }
  }
  $29 = ((($$sroa$085$0116)) + 104|0);
  $30 = ($29|0)==($5|0);
  if ($30) {
   break;
  } else {
   $$sroa$085$0116 = $29;
  }
 }
 STACKTOP = sp;return;
}
function __ZN26ColorRangesPermuteSubtractC2ERKNSt3__26vectorIiNS0_9allocatorIiEEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (2144);
 $3 = ((($0)) + 4|0);
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($3,$1);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN18ColorRangesPermuteC2ERKNSt3__26vectorIiNS0_9allocatorIiEEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (2100);
 $3 = ((($0)) + 4|0);
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($3,$1);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$10,$11,$8);
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 2;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<2)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorIiNS_9allocatorIiEEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 2;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZN18ColorRangesPermuteD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2100);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 __ZN11ColorRangesD2Ev($0);
 return;
}
function __ZN18ColorRangesPermuteD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN18ColorRangesPermuteD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK18ColorRangesPermute9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK18ColorRangesPermute3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$6 & 63]($3,$10)|0);
 return ($11|0);
}
function __ZNK18ColorRangesPermute3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$6 & 63]($3,$10)|0);
 return ($11|0);
}
function __ZNK18ColorRangesPermute8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN26ColorRangesPermuteSubtractD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2144);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 __ZN11ColorRangesD2Ev($0);
 return;
}
function __ZN26ColorRangesPermuteSubtractD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN26ColorRangesPermuteSubtractD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK26ColorRangesPermuteSubtract9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK26ColorRangesPermuteSubtract3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = ($1|0)>(2);
 $or$cond = $2 | $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iii[$8 & 63]($5,$12)|0);
 if ($or$cond) {
  $$0 = $13;
  return ($$0|0);
 }
 $14 = $13&65535;
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$9>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_iii[$18 & 63]($15,$20)|0);
 $22 = $21&65535;
 $23 = (($14) - ($22))|0;
 $24 = $23&65535;
 $$0 = $24;
 return ($$0|0);
}
function __ZNK26ColorRangesPermuteSubtract3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = ($1|0)>(2);
 $or$cond = $2 | $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iii[$8 & 63]($5,$12)|0);
 if ($or$cond) {
  $$0 = $13;
  return ($$0|0);
 }
 $14 = $13&65535;
 $15 = HEAP32[$4>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$9>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_iii[$18 & 63]($15,$20)|0);
 $22 = $21&65535;
 $23 = (($14) - ($22))|0;
 $24 = $23&65535;
 $$0 = $24;
 return ($$0|0);
}
function __ZNK26ColorRangesPermuteSubtract6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1|0)==(0);
 $6 = ($1|0)>(2);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $7 = (__ZNK26ColorRangesPermuteSubtract3minEi($0,$1)|0);
  HEAP16[$3>>1] = $7;
  $8 = (__ZNK26ColorRangesPermuteSubtract3maxEi($0,$1)|0);
  $storemerge = $8;
  HEAP16[$4>>1] = $storemerge;
  return;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($1<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$13 & 63]($10,$17)|0);
  $19 = $18&65535;
  $20 = HEAP32[$2>>2]|0;
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($19) - ($22))|0;
  $24 = $23&65535;
  HEAP16[$3>>1] = $24;
  $25 = HEAP32[$9>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$14>>2]|0;
  $30 = (($29) + ($1<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (FUNCTION_TABLE_iii[$28 & 63]($25,$31)|0);
  $33 = $32&65535;
  $34 = HEAP32[$2>>2]|0;
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = (($33) - ($36))|0;
  $38 = $37&65535;
  $storemerge = $38;
  HEAP16[$4>>1] = $storemerge;
  return;
 }
}
function __ZNK26ColorRangesPermuteSubtract8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($1>>>0);
 if ($7) {
  $8 = (($1) - ($6))|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEj($0,$8);
  return;
 }
 $9 = ($6>>>0)>($1>>>0);
 if (!($9)) {
  return;
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($1<<2)|0);
 $$cast$i = $3;
 $12 = ($$cast$i|0)==($11|0);
 if (!($12)) {
  $scevgep$i$i = ((($$cast$i)) + -4|0);
  $13 = $scevgep$i$i;
  $14 = $11;
  $15 = (($13) - ($14))|0;
  $16 = $15 >>> 2;
  $17 = $16 ^ -1;
  $scevgep4$i$i = (($$cast$i) + ($17<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 __ZNKSt3__26vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($0,$6);
 return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 if (!($9)) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endEj($0,$1);
  STACKTOP = sp;return;
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$5>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 2;
 $15 = (($14) + ($1))|0;
 $16 = (__ZNKSt3__26vectorIiNS_9allocatorIiEEE8max_sizeEv($0)|0);
 $17 = ($16>>>0)<($15>>>0);
 if ($17) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = $16 >>> 1;
 $24 = ($22>>>0)<($23>>>0);
 $25 = $21 >> 1;
 $26 = ($25>>>0)<($15>>>0);
 $$sroa$speculated$i = $26 ? $15 : $25;
 $$0$i = $24 ? $$sroa$speculated$i : $16;
 $27 = HEAP32[$5>>2]|0;
 $28 = (($27) - ($20))|0;
 $29 = $28 >> 2;
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($2,$$0$i,$29,$10);
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEj($2,$1);
 __ZNSt3__26vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($0,$2);
 __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $$0 = $1;
 while(1) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($2,$0,1);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$4>>2] = 0;
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 4|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIiRNS_9allocatorIiEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$promoted = 0, $2 = 0, $3 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$promoted = HEAP32[$2>>2]|0;
 $3 = $1 << 2;
 _memset(($$promoted|0),0,($3|0))|0;
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$2>>2] = $scevgep;
 return;
}
function __ZN15TransformBoundsI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (2188);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN15TransformBoundsI8BufferIOED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2188);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($1);
 __ZN9TransformI8BufferIOED2Ev($0);
 return;
}
function __ZN15TransformBoundsI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15TransformBoundsI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN15TransformBoundsI8BufferIOE23undo_redo_during_decodeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN15TransformBoundsI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02136 = 0, $$1 = 0, $$4 = 0, $$cast = 0, $$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0;
 var $sext = 0, $sext24 = 0, $sext34 = 0, $sext35 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16528|0;
 $vararg_buffer = sp;
 $3 = sp + 16516|0;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($1)|0);
 $10 = ($9|0)>(4);
 if ($10) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($4,$2,2,226050910);
 $11 = ((($0)) + 4|0);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = (($13) - ($14))|0;
 $16 = $15 >> 2;
 $$cast$i = $14;
 $$cast = $13;
 $17 = ($$cast|0)==($$cast$i|0);
 if (!($17)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $18 = $scevgep$i$i$i;
  $19 = (($18) - ($14))|0;
  $20 = $19 >>> 2;
  $21 = $20 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($21<<2)|0);
  HEAP32[$12>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_shrinkEj($11,$16);
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_ii[$24 & 63]($1)|0);
 $26 = ($25|0)>(0);
 L7: do {
  if ($26) {
   $27 = ((($5)) + 2|0);
   $28 = ((($0)) + 12|0);
   $$02136 = 0;
   while(1) {
    $29 = HEAP32[$1>>2]|0;
    $30 = ((($29)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (FUNCTION_TABLE_iii[$31 & 63]($1,$$02136)|0);
    $33 = $32 << 16 >> 16;
    $34 = HEAP32[$1>>2]|0;
    $35 = ((($34)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_iii[$36 & 63]($1,$$02136)|0);
    $38 = $37 << 16 >> 16;
    $39 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,$33,$38)|0);
    $40 = $39&65535;
    $sext = $39 << 16;
    $41 = $sext >> 16;
    $42 = HEAP32[$1>>2]|0;
    $43 = ((($42)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_iii[$44 & 63]($1,$$02136)|0);
    $46 = $45 << 16 >> 16;
    $47 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($4,$41,$46)|0);
    $48 = $47&65535;
    $sext34 = $39 << 16;
    $49 = $sext34 >> 16;
    $sext24 = $47 << 16;
    $50 = $sext24 >> 16;
    $51 = ($49|0)>($50|0);
    if ($51) {
     $$1 = 0;
     break L7;
    }
    $52 = HEAP32[$1>>2]|0;
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (FUNCTION_TABLE_iii[$54 & 63]($1,$$02136)|0);
    $56 = ($40<<16>>16)<($55<<16>>16);
    if ($56) {
     $$1 = 0;
     break L7;
    }
    $57 = HEAP32[$1>>2]|0;
    $58 = ((($57)) + 16|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_iii[$59 & 63]($1,$$02136)|0);
    $61 = ($48<<16>>16)>($60<<16>>16);
    if ($61) {
     $$1 = 0;
     break L7;
    }
    HEAP16[$5>>1] = $40;
    HEAP16[$27>>1] = $48;
    $62 = HEAP32[$12>>2]|0;
    $63 = HEAP32[$28>>2]|0;
    $64 = ($62>>>0)<($63>>>0);
    if ($64) {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$11,1);
     $65 = HEAP32[$12>>2]|0;
     $66 = HEAP32[$5>>2]|0;
     HEAP16[$65>>1]=$66&65535;HEAP16[$65+2>>1]=$66>>>16;
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
     $67 = HEAP32[$12>>2]|0;
     $68 = ((($67)) + 4|0);
     HEAP32[$12>>2] = $68;
    } else {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($11,$5);
    }
    $sext35 = $47 << 16;
    $69 = $sext35 >> 16;
    HEAP32[$vararg_buffer>>2] = $$02136;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $49;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $69;
    __Z8v_printfiPKcz(5,3998,$vararg_buffer);
    $70 = (($$02136) + 1)|0;
    $71 = HEAP32[$1>>2]|0;
    $72 = ((($71)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (FUNCTION_TABLE_ii[$73 & 63]($1)|0);
    $75 = ($70|0)<($74|0);
    if ($75) {
     $$02136 = $70;
    } else {
     $$1 = 1;
     break;
    }
   }
  } else {
   $$1 = 1;
  }
 } while(0);
 $$4 = $$1;
 STACKTOP = sp;return ($$4|0);
}
function __ZN15TransformBoundsI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$06$in = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 if ($6) {
  $7 = (__Znwj(16)|0);
  $8 = ((($0)) + 4|0);
  __ZN17StaticColorRangesC2ERNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEE($7,$8);
  $$06$in = $7;
  return ($$06$in|0);
 } else {
  $9 = (__Znwj(20)|0);
  $10 = ((($0)) + 4|0);
  __ZN17ColorRangesBoundsC2ERKNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEEPK11ColorRanges($9,$10,$2);
  $$06$in = $9;
  return ($$06$in|0);
 }
 return (0)|0;
}
function __ZN17ColorRangesBoundsC2ERKNSt3__26vectorINS0_4pairIssEENS0_9allocatorIS3_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (2232);
 $3 = ((($0)) + 4|0);
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEC2ERKS5_($3,$1);
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN17ColorRangesBoundsD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2232);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($1);
 __ZN11ColorRangesD2Ev($0);
 return;
}
function __ZN17ColorRangesBoundsD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN17ColorRangesBoundsD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK17ColorRangesBounds9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function __ZNK17ColorRangesBounds3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1<<2)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($7<<16>>16)<($11<<16>>16);
 $$sroa$speculated = $12 ? $11 : $7;
 return ($$sroa$speculated|0);
}
function __ZNK17ColorRangesBounds3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,$1)|0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((($9) + ($1<<2)|0)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)<($7<<16>>16);
 $$sroa$speculated = $12 ? $11 : $7;
 return ($$sroa$speculated|0);
}
function __ZNK17ColorRangesBounds6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0: case 3:  {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($1<<2)|0);
  $8 = HEAP16[$7>>1]|0;
  HEAP16[$3>>1] = $8;
  $9 = HEAP32[$5>>2]|0;
  $10 = (((($9) + ($1<<2)|0)) + 2|0);
  $11 = HEAP16[$10>>1]|0;
  HEAP16[$4>>1] = $11;
  return;
  break;
 }
 default: {
 }
 }
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$2,$3,$4);
 $17 = HEAP16[$3>>1]|0;
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + ($1<<2)|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ($17<<16>>16)<($21<<16>>16);
 if ($22) {
  HEAP16[$3>>1] = $21;
 }
 $23 = HEAP16[$4>>1]|0;
 $24 = HEAP32[$18>>2]|0;
 $25 = (((($24) + ($1<<2)|0)) + 2|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = ($23<<16>>16)>($26<<16>>16);
 if ($27) {
  HEAP16[$4>>1] = $26;
 }
 $28 = HEAP16[$3>>1]|0;
 $29 = HEAP16[$4>>1]|0;
 $30 = ($28<<16>>16)>($29<<16>>16);
 if (!($30)) {
  return;
 }
 $31 = HEAP32[$18>>2]|0;
 $32 = (($31) + ($1<<2)|0);
 $33 = HEAP16[$32>>1]|0;
 HEAP16[$3>>1] = $33;
 $34 = HEAP32[$18>>2]|0;
 $35 = (((($34) + ($1<<2)|0)) + 2|0);
 $36 = HEAP16[$35>>1]|0;
 HEAP16[$4>>1] = $36;
 return;
}
function __ZNK17ColorRangesBounds4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0: case 3:  {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($1<<2)|0);
  $9 = HEAP16[$8>>1]|0;
  HEAP16[$3>>1] = $9;
  $10 = HEAP32[$6>>2]|0;
  $11 = (((($10) + ($1<<2)|0)) + 2|0);
  $12 = HEAP16[$11>>1]|0;
  HEAP16[$4>>1] = $12;
  break;
 }
 default: {
  $13 = ((($0)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_viiiiii[$17 & 15]($14,$1,$2,$3,$4,$5);
  $18 = HEAP16[$3>>1]|0;
  $19 = ((($0)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($1<<2)|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = ($18<<16>>16)<($22<<16>>16);
  if ($23) {
   HEAP16[$3>>1] = $22;
  }
  $24 = HEAP16[$4>>1]|0;
  $25 = HEAP32[$19>>2]|0;
  $26 = (((($25) + ($1<<2)|0)) + 2|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = ($24<<16>>16)>($27<<16>>16);
  if ($28) {
   HEAP16[$4>>1] = $27;
  }
  $29 = HEAP16[$3>>1]|0;
  $30 = HEAP16[$4>>1]|0;
  $31 = ($29<<16>>16)>($30<<16>>16);
  if ($31) {
   $32 = HEAP32[$19>>2]|0;
   $33 = (($32) + ($1<<2)|0);
   $34 = HEAP16[$33>>1]|0;
   HEAP16[$3>>1] = $34;
   $35 = HEAP32[$19>>2]|0;
   $36 = (((($35) + ($1<<2)|0)) + 2|0);
   $37 = HEAP16[$36>>1]|0;
   HEAP16[$4>>1] = $37;
  }
 }
 }
 $38 = HEAP16[$5>>1]|0;
 $39 = HEAP16[$4>>1]|0;
 $40 = ($38<<16>>16)>($39<<16>>16);
 if ($40) {
  HEAP16[$5>>1] = $39;
 }
 $41 = HEAP16[$5>>1]|0;
 $42 = HEAP16[$3>>1]|0;
 $43 = ($41<<16>>16)<($42<<16>>16);
 if (!($43)) {
  return;
 }
 HEAP16[$5>>1] = $42;
 return;
}
function __ZNK17ColorRangesBounds8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($0,$2,$7,$8,$13);
 return;
}
function __ZN14TransformYCoCgI8BufferIOEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOEC2Ev($0);
 HEAP32[$0>>2] = (2276);
 return;
}
function __ZN14TransformYCoCgI8BufferIOED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN9TransformI8BufferIOED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN14TransformYCoCgI8BufferIOE4initEPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sroa$speculated = 0, $$sroa$speculated22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $addconv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 63]($1)|0);
 $6 = ($5|0)<(3);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 63]($1,0)|0);
 $11 = ($10<<16>>16)<(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iii[$14 & 63]($1,1)|0);
 $16 = ($15<<16>>16)<(0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iii[$19 & 63]($1,2)|0);
 $21 = ($20<<16>>16)<(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = HEAP32[$1>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_iii[$24 & 63]($1,0)|0);
 $26 = HEAP32[$1>>2]|0;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_iii[$28 & 63]($1,0)|0);
 $30 = ($25<<16>>16)==($29<<16>>16);
 if ($30) {
  $$0 = 0;
  return ($$0|0);
 }
 $31 = HEAP32[$1>>2]|0;
 $32 = ((($31)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_iii[$33 & 63]($1,1)|0);
 $35 = HEAP32[$1>>2]|0;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iii[$37 & 63]($1,1)|0);
 $39 = ($34<<16>>16)==($38<<16>>16);
 if ($39) {
  $$0 = 0;
  return ($$0|0);
 }
 $40 = HEAP32[$1>>2]|0;
 $41 = ((($40)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (FUNCTION_TABLE_iii[$42 & 63]($1,2)|0);
 $44 = HEAP32[$1>>2]|0;
 $45 = ((($44)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (FUNCTION_TABLE_iii[$46 & 63]($1,2)|0);
 $48 = ($43<<16>>16)==($47<<16>>16);
 if ($48) {
  $$0 = 0;
  return ($$0|0);
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = ((($49)) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (FUNCTION_TABLE_iii[$51 & 63]($1,0)|0);
 $53 = HEAP32[$1>>2]|0;
 $54 = ((($53)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (FUNCTION_TABLE_iii[$55 & 63]($1,1)|0);
 $57 = ($52<<16>>16)<($56<<16>>16);
 $58 = HEAP32[$1>>2]|0;
 $59 = ((($58)) + 16|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (FUNCTION_TABLE_iii[$60 & 63]($1,2)|0);
 $$sroa$speculated22 = $57 ? $56 : $52;
 $62 = ($$sroa$speculated22<<16>>16)<($61<<16>>16);
 $$sroa$speculated = $62 ? $61 : $$sroa$speculated22;
 $63 = (($$sroa$speculated<<16>>16) / 4)&-1;
 $addconv = (($63) + 1)<<16>>16;
 $64 = $addconv << 16 >> 16;
 $65 = ((($0)) + 4|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($0)) + 8|0);
 HEAP32[$66>>2] = $1;
 $$0 = 1;
 return ($$0|0);
}
function __ZN14TransformYCoCgI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__Znwj(12)|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __ZN16ColorRangesYCoCgC2EiPK11ColorRanges($3,$5,$2);
 return ($3|0);
}
function __ZNK14TransformYCoCgI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$07185 = 0, $$072 = 0, $$073 = 0, $$074 = 0, $$084 = 0, $$77 = 0, $$78 = 0, $$sroa$080$087 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $sext75 = 0, $sext76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 63]($3,0)|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$11 & 63]($8,1)|0);
 $13 = HEAP32[$2>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iii[$16 & 63]($13,2)|0);
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($1)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)==($20|0);
 if ($21) {
  return;
 }
 $22 = $12 << 16 >> 16;
 $23 = $17 << 16 >> 16;
 $24 = $7 << 16 >> 16;
 $$sroa$080$087 = $18;
 while(1) {
  __ZN5Image24undo_make_constant_planeEi($$sroa$080$087,0);
  __ZN5Image24undo_make_constant_planeEi($$sroa$080$087,1);
  __ZN5Image24undo_make_constant_planeEi($$sroa$080$087,2);
  $25 = (__ZNK5Image4rowsEv($$sroa$080$087)|0);
  $26 = ($25|0)==(0);
  if (!($26)) {
   $$07185 = 0;
   while(1) {
    $27 = (__ZNK5Image4colsEv($$sroa$080$087)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     $$084 = 0;
     while(1) {
      $34 = (__ZNK5ImageclEijj($$sroa$080$087,0,$$07185,$$084)|0);
      $35 = (__ZNK5ImageclEijj($$sroa$080$087,1,$$07185,$$084)|0);
      $36 = (__ZNK5ImageclEijj($$sroa$080$087,2,$$07185,$$084)|0);
      $37 = $34 << 16 >> 16;
      $38 = $36 << 16 >> 16;
      $39 = (0 - ($38))|0;
      $40 = $39 >>> 1;
      $41 = (($37) - ($40))|0;
      $42 = $41&65535;
      $43 = (1 - ($38))|0;
      $44 = $43 >>> 1;
      $45 = $35 << 16 >> 16;
      $46 = $45 >>> 1;
      $47 = (($37) - ($46))|0;
      $48 = (($47) + ($44))|0;
      $49 = $48&65535;
      $sext = $48 << 16;
      $50 = $sext >> 16;
      $51 = (($50) + ($45))|0;
      $sext75 = $51 << 16;
      $52 = ($sext75|0)<(0);
      if ($52) {
       $$072 = 0;
      } else {
       $53 = $sext75 >> 16;
       $54 = $51&65535;
       $55 = ($53|0)>($24|0);
       $$ = $55 ? $7 : $54;
       $$072 = $$;
      }
      $sext76 = $41 << 16;
      $56 = ($sext76|0)<(0);
      $57 = $sext76 >> 16;
      $58 = ($57|0)>($22|0);
      $$77 = $58 ? $12 : $42;
      $$073 = $56 ? 0 : $$77;
      $59 = ($sext|0)<(0);
      $60 = ($50|0)>($23|0);
      $$78 = $60 ? $17 : $49;
      $$074 = $59 ? 0 : $$78;
      __ZN5Image3setEijjs($$sroa$080$087,0,$$07185,$$084,$$072);
      __ZN5Image3setEijjs($$sroa$080$087,1,$$07185,$$084,$$073);
      __ZN5Image3setEijjs($$sroa$080$087,2,$$07185,$$084,$$074);
      $61 = (($$084) + 1)|0;
      $62 = (__ZNK5Image4colsEv($$sroa$080$087)|0);
      $63 = ($61>>>0)<($62>>>0);
      if ($63) {
       $$084 = $61;
      } else {
       break;
      }
     }
    }
    $31 = (($$07185) + 1)|0;
    $32 = (__ZNK5Image4rowsEv($$sroa$080$087)|0);
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $$07185 = $31;
    } else {
     break;
    }
   }
  }
  $29 = ((($$sroa$080$087)) + 104|0);
  $30 = ($29|0)==($20|0);
  if ($30) {
   break;
  } else {
   $$sroa$080$087 = $29;
  }
 }
 return;
}
function __ZN16ColorRangesYCoCgC2EiPK11ColorRanges($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesC2Ev($0);
 HEAP32[$0>>2] = (2320);
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $2;
 return;
}
function __ZN16ColorRangesYCoCgD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11ColorRangesD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK16ColorRangesYCoCg9numPlanesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($2)|0);
 return ($6|0);
}
function __ZNK16ColorRangesYCoCg3minEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 1:  {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = Math_imul($3, -4)|0;
  $5 = $4 | 1;
  $6 = $5&65535;
  $$0 = $6;
  return ($$0|0);
  break;
 }
 case 2:  {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = Math_imul($8, -4)|0;
  $10 = $9 | 1;
  $11 = $10&65535;
  $$0 = $11;
  return ($$0|0);
  break;
 }
 case 0:  {
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iii[$16 & 63]($13,$1)|0);
  $$0 = $17;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZNK16ColorRangesYCoCg3maxEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 << 2;
  $5 = (($4) + 65535)|0;
  $6 = $5&65535;
  $$0 = $6;
  return ($$0|0);
  break;
 }
 case 1:  {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 << 2;
  $10 = (($9) + 65535)|0;
  $11 = $10&65535;
  $$0 = $11;
  return ($$0|0);
  break;
 }
 case 2:  {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 << 2;
  $15 = (($14) + 65535)|0;
  $16 = $15&65535;
  $$0 = $16;
  return ($$0|0);
  break;
 }
 default: {
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iii[$21 & 63]($18,$1)|0);
  $$0 = $22;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZNK16ColorRangesYCoCg6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 1:  {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = HEAP16[$7>>1]|0;
  $9 = (__ZL10get_min_cois($6,$8)|0);
  HEAP16[$3>>1] = $9;
  $10 = HEAP32[$5>>2]|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = HEAP16[$11>>1]|0;
  $13 = (__ZL10get_max_cois($10,$12)|0);
  HEAP16[$4>>1] = $13;
  return;
  break;
 }
 case 2:  {
  $14 = ((($0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$2>>2]|0;
  $17 = HEAP16[$16>>1]|0;
  $18 = ((($16)) + 2|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = (__ZL10get_min_cgiss($15,$17,$19)|0);
  HEAP16[$3>>1] = $20;
  $21 = HEAP32[$14>>2]|0;
  $22 = HEAP32[$2>>2]|0;
  $23 = HEAP16[$22>>1]|0;
  $24 = ((($22)) + 2|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = (__ZL10get_max_cgiss($21,$23,$25)|0);
  HEAP16[$4>>1] = $26;
  return;
  break;
 }
 case 0:  {
  HEAP16[$3>>1] = 0;
  $27 = ((($0)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__ZL9get_max_yi($28)|0);
  HEAP16[$4>>1] = $29;
  return;
  break;
 }
 default: {
  $30 = ((($0)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_viiiii[$34 & 31]($31,$1,$2,$3,$4);
  return;
 }
 }
}
function __ZNK16ColorRangesYCoCg8isStaticEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZL10get_min_cois($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 16 >> 16;
 $3 = (($0) + -1)|0;
 $4 = ($2|0)<($3|0);
 do {
  if ($4) {
   $5 = $2 << 2;
   $6 = (-3 - ($5))|0;
   $$0$in = $6;
  } else {
   $7 = ($0*3)|0;
   $8 = ($2|0)<($7|0);
   if ($8) {
    $13 = Math_imul($0, -4)|0;
    $14 = $13 | 1;
    $$0$in = $14;
    break;
   } else {
    $9 = $0 << 2;
    $10 = (1 - ($9))|0;
    $11 = (($10) + ($2))|0;
    $12 = $11 << 2;
    $$0$in = $12;
    break;
   }
  }
 } while(0);
 $$0 = $$0$in&65535;
 return ($$0|0);
}
function __ZL10get_max_cois($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 16 >> 16;
 $3 = (($0) + -1)|0;
 $4 = ($2|0)<($3|0);
 do {
  if ($4) {
   $5 = $2 << 2;
   $6 = $5 | 3;
   $$0$in = $6;
  } else {
   $7 = ($0*3)|0;
   $8 = ($2|0)<($7|0);
   $9 = $0 << 2;
   if ($8) {
    $14 = (($9) + 65535)|0;
    $$0$in = $14;
    break;
   } else {
    $10 = (1 - ($7))|0;
    $11 = (($10) + ($2))|0;
    $12 = $11 << 2;
    $13 = (($9) - ($12))|0;
    $$0$in = $13;
    break;
   }
  }
 } while(0);
 $$0 = $$0$in&65535;
 return ($$0|0);
}
function __ZL10get_min_cgiss($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $$neg32 = 0, $$neg33 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0;
 var $ispos23 = 0, $neg = 0, $neg24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 << 16 >> 16;
 $4 = (__ZL10get_min_cois($0,$1)|0);
 $5 = ($4<<16>>16)>($2<<16>>16);
 if ($5) {
  $6 = $0 << 3;
  $$0$in = $6;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $7 = (__ZL10get_max_cois($0,$1)|0);
 $8 = ($7<<16>>16)<($2<<16>>16);
 if ($8) {
  $9 = $0 << 3;
  $$0$in = $9;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $10 = $1 << 16 >> 16;
 $11 = (($0) + -1)|0;
 $12 = ($10|0)<($11|0);
 if ($12) {
  $13 = $10 << 1;
  $14 = $13 | 1;
  $15 = (0 - ($14))|0;
  $$0$in = $15;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $16 = ($0*3)|0;
 $17 = ($10|0)<($16|0);
 if ($17) {
  $26 = $10 << 1;
  $27 = $26 | 1;
  $ispos = ($2<<16>>16)>(-1);
  $neg = (0 - ($3))|0;
  $28 = $ispos ? $3 : $neg;
  $29 = (($28) + 1)|0;
  $$neg33 = (($29|0) / -2)&-1;
  $30 = (($0) + 2147483647)|0;
  $31 = (($30) + ($16))|0;
  $32 = (($31) - ($10))|0;
  $33 = (($32) + ($$neg33))|0;
  $34 = $33 << 1;
  $35 = ($34|0)<($27|0);
  $$sroa$speculated = $35 ? $34 : $27;
  $36 = (0 - ($$sroa$speculated))|0;
  $$0$in = $36;
  $$0 = $$0$in&65535;
  return ($$0|0);
 } else {
  $18 = $0 << 2;
  $19 = (($18) + 2147483647)|0;
  $20 = (($19) - ($10))|0;
  $ispos23 = ($2<<16>>16)>(-1);
  $neg24 = (0 - ($3))|0;
  $21 = $ispos23 ? $3 : $neg24;
  $22 = (($21) + 1)|0;
  $$neg32 = (($22|0) / -2)&-1;
  $23 = (($20) + ($$neg32))|0;
  $24 = $23 << 1;
  $25 = (0 - ($24))|0;
  $$0$in = $25;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZL10get_max_cgiss($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$in = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ispos = 0, $ispos23 = 0, $neg = 0, $neg24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 << 16 >> 16;
 $4 = (__ZL10get_min_cois($0,$1)|0);
 $5 = ($4<<16>>16)>($2<<16>>16);
 if ($5) {
  $6 = Math_imul($0, -8)|0;
  $$0$in = $6;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $7 = (__ZL10get_max_cois($0,$1)|0);
 $8 = ($7<<16>>16)<($2<<16>>16);
 if ($8) {
  $9 = Math_imul($0, -8)|0;
  $$0$in = $9;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $10 = $1 << 16 >> 16;
 $11 = (($0) + -1)|0;
 $12 = ($10|0)<($11|0);
 if ($12) {
  $13 = $10 << 1;
  $14 = $13 | 1;
  $ispos23 = ($2<<16>>16)>(-1);
  $neg24 = (0 - ($3))|0;
  $15 = $ispos23 ? $3 : $neg24;
  $16 = (($15|0) / 2)&-1;
  $17 = $16 << 1;
  $18 = (($14) - ($17))|0;
  $$0$in = $18;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 $19 = ($0*3)|0;
 $20 = ($10|0)<($19|0);
 if ($20) {
  $25 = Math_imul($0, -4)|0;
  $26 = $0 << 1;
  $27 = (1 - ($26))|0;
  $28 = (($27) + ($10))|0;
  $29 = $28 << 1;
  $30 = (($29) + ($25))|0;
  $31 = Math_imul($0, -2)|0;
  $32 = (($10) - ($0))|0;
  $33 = $32 << 1;
  $ispos = ($2<<16>>16)>(-1);
  $neg = (0 - ($3))|0;
  $34 = $ispos ? $3 : $neg;
  $35 = (($34|0) / 2)&-1;
  $36 = $35 << 1;
  $37 = (($31) + -1)|0;
  $38 = (($37) - ($33))|0;
  $39 = (($38) + ($36))|0;
  $40 = ($30|0)<($39|0);
  $$sroa$speculated = $40 ? $39 : $30;
  $41 = (0 - ($$sroa$speculated))|0;
  $$0$in = $41;
  $$0 = $$0$in&65535;
  return ($$0|0);
 } else {
  $21 = $0 << 2;
  $22 = (($21) + -1)|0;
  $23 = (($22) - ($10))|0;
  $24 = $23 << 1;
  $$0$in = $24;
  $$0 = $$0$in&65535;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZL9get_max_yi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 << 2;
 $2 = (($1) + 65535)|0;
 $3 = $2&65535;
 return ($3|0);
}
function __GLOBAL__sub_I_common_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_4();
 ___cxx_global_var_init_1();
 return;
}
function ___cxx_global_var_init_4() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20flifEncodingOptionalC2Ev(22336);
 HEAP32[(22340)>>2] = 2;
 HEAP32[(22344)>>2] = 19;
 HEAP32[(22348)>>2] = 2;
 HEAP32[(22352)>>2] = -1;
 HEAP32[(22356)>>2] = 1;
 HEAP32[(22360)>>2] = 1;
 HEAP32[(22364)>>2] = 100;
 HEAP32[(22368)>>2] = 1;
 ;HEAP32[(22372)>>2]=0|0;HEAP32[(22372)+4>>2]=0|0;HEAP32[(22372)+8>>2]=0|0;HEAP32[(22372)+12>>2]=0|0;HEAP32[(22372)+16>>2]=0|0;HEAP32[(22372)+20>>2]=0|0;HEAP32[(22372)+24>>2]=0|0;HEAP32[(22372)+28>>2]=0|0;
 return;
}
function ___cxx_global_var_init_1() {
 var $$ptr = 0, $$ptr10 = 0, $$ptr11 = 0, $$ptr12 = 0, $$ptr13 = 0, $$ptr14 = 0, $$ptr15 = 0, $$ptr4 = 0, $$ptr5 = 0, $$ptr6 = 0, $$ptr7 = 0, $$ptr8 = 0, $$ptr9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $0 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4086)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,4086,$1);
 $$ptr = ((($0)) + 12|0);
 ;HEAP32[$$ptr>>2]=0|0;HEAP32[$$ptr+4>>2]=0|0;HEAP32[$$ptr+8>>2]=0|0;
 $2 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4102)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr,4102,$2);
 $$ptr4 = ((($0)) + 24|0);
 ;HEAP32[$$ptr4>>2]=0|0;HEAP32[$$ptr4+4>>2]=0|0;HEAP32[$$ptr4+8>>2]=0|0;
 $3 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4108)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr4,4108,$3);
 $$ptr5 = ((($0)) + 36|0);
 ;HEAP32[$$ptr5>>2]=0|0;HEAP32[$$ptr5+4>>2]=0|0;HEAP32[$$ptr5+8>>2]=0|0;
 $4 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4120)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr5,4120,$4);
 $$ptr6 = ((($0)) + 48|0);
 ;HEAP32[$$ptr6>>2]=0|0;HEAP32[$$ptr6+4>>2]=0|0;HEAP32[$$ptr6+8>>2]=0|0;
 $5 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4134)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr6,4134,$5);
 $$ptr7 = ((($0)) + 60|0);
 ;HEAP32[$$ptr7>>2]=0|0;HEAP32[$$ptr7+4>>2]=0|0;HEAP32[$$ptr7+8>>2]=0|0;
 $6 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6067)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr7,6067,$6);
 $$ptr8 = ((($0)) + 72|0);
 ;HEAP32[$$ptr8>>2]=0|0;HEAP32[$$ptr8+4>>2]=0|0;HEAP32[$$ptr8+8>>2]=0|0;
 $7 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4141)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr8,4141,$7);
 $$ptr9 = ((($0)) + 84|0);
 ;HEAP32[$$ptr9>>2]=0|0;HEAP32[$$ptr9+4>>2]=0|0;HEAP32[$$ptr9+8>>2]=0|0;
 $8 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4149)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr9,4149,$8);
 $$ptr10 = ((($0)) + 96|0);
 ;HEAP32[$$ptr10>>2]=0|0;HEAP32[$$ptr10+4>>2]=0|0;HEAP32[$$ptr10+8>>2]=0|0;
 $9 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4163)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr10,4163,$9);
 $$ptr11 = ((($0)) + 108|0);
 ;HEAP32[$$ptr11>>2]=0|0;HEAP32[$$ptr11+4>>2]=0|0;HEAP32[$$ptr11+8>>2]=0|0;
 $10 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4173)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr11,4173,$10);
 $$ptr12 = ((($0)) + 120|0);
 ;HEAP32[$$ptr12>>2]=0|0;HEAP32[$$ptr12+4>>2]=0|0;HEAP32[$$ptr12+8>>2]=0|0;
 $11 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6051)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr12,6051,$11);
 $$ptr13 = ((($0)) + 132|0);
 ;HEAP32[$$ptr13>>2]=0|0;HEAP32[$$ptr13+4>>2]=0|0;HEAP32[$$ptr13+8>>2]=0|0;
 $12 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6039)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr13,6039,$12);
 $$ptr14 = ((($0)) + 144|0);
 ;HEAP32[$$ptr14>>2]=0|0;HEAP32[$$ptr14+4>>2]=0|0;HEAP32[$$ptr14+8>>2]=0|0;
 $13 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6024)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr14,6024,$13);
 $$ptr15 = ((($0)) + 156|0);
 ;HEAP32[$$ptr15>>2]=0|0;HEAP32[$$ptr15+4>>2]=0|0;HEAP32[$$ptr15+8>>2]=0|0;
 $14 = (__ZNSt3__211char_traitsIcE6lengthEPKc(4183)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($$ptr15,4183,$14);
 HEAP32[5580] = 0;
 HEAP32[(22324)>>2] = 0;
 HEAP32[(22328)>>2] = 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj(22320,14);
 $15 = ((($0)) + 168|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_j(22320,$0,$15,14);
 $16 = ((($0)) + 156|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
 $17 = ((($0)) + 144|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($17);
 $18 = ((($0)) + 132|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
 $19 = ((($0)) + 120|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $20 = ((($0)) + 108|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 $21 = ((($0)) + 96|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 $22 = ((($0)) + 84|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 $23 = ((($0)) + 72|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 $24 = ((($0)) + 60|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24);
 $25 = ((($0)) + 48|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($25);
 $26 = ((($0)) + 36|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($26);
 $27 = ((($0)) + 24|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($27);
 $28 = ((($0)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(357913941);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*12)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*12)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPKS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESD_SD_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07$i = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = ($1|0)==($2|0);
 if (!($6)) {
  $$07$i = $1;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($7,$$07$i);
   $8 = ((($$07$i)) + 12|0);
   $9 = HEAP32[$5>>2]|0;
   $10 = ((($9)) + 12|0);
   HEAP32[$5>>2] = $10;
   $11 = ($8|0)==($2|0);
   if ($11) {
    break;
   } else {
    $$07$i = $8;
   }
  }
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($2) + (($6*12)|0)|0);
 $8 = (($2) + (($1*12)|0)|0);
 __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN20flifEncodingOptionalC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 return;
}
function __Z24initPropRanges_scanlinesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0105 = 0, $$cast = 0, $$cast$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $$cast$i = $7;
 $$cast = $6;
 $10 = ($$cast|0)==($$cast$i|0);
 if (!($10)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $11 = $scevgep$i$i$i;
  $12 = (($11) - ($7))|0;
  $13 = $12 >>> 2;
  $14 = $13 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($14<<2)|0);
  HEAP32[$5>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_shrinkEj($0,$9);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_iii[$17 & 63]($1,$2)|0);
 $19 = $18 << 16 >> 16;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 63]($1,$2)|0);
 $24 = $23 << 16 >> 16;
 $25 = (($19) - ($24))|0;
 $26 = (($24) - ($19))|0;
 $27 = ($2|0)<(3);
 if ($27) {
  $28 = ($2|0)>(0);
  if ($28) {
   $29 = ((($4)) + 2|0);
   $30 = ((($0)) + 8|0);
   $$0105 = 0;
   while(1) {
    $36 = HEAP32[$1>>2]|0;
    $37 = ((($36)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 63]($1,$$0105)|0);
    $40 = HEAP32[$1>>2]|0;
    $41 = ((($40)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iii[$42 & 63]($1,$$0105)|0);
    HEAP16[$4>>1] = $39;
    HEAP16[$29>>1] = $43;
    $44 = HEAP32[$5>>2]|0;
    $45 = HEAP32[$30>>2]|0;
    $46 = ($44>>>0)<($45>>>0);
    if ($46) {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
     $47 = HEAP32[$5>>2]|0;
     $48 = HEAP32[$4>>2]|0;
     HEAP16[$47>>1]=$48&65535;HEAP16[$47+2>>1]=$48>>>16;
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
     $49 = HEAP32[$5>>2]|0;
     $50 = ((($49)) + 4|0);
     HEAP32[$5>>2] = $50;
    } else {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
    }
    $51 = (($$0105) + 1)|0;
    $exitcond = ($51|0)==($2|0);
    if ($exitcond) {
     break;
    } else {
     $$0105 = $51;
    }
   }
  }
  $31 = HEAP32[$1>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 63]($1)|0);
  $35 = ($34|0)>(3);
  if ($35) {
   $52 = HEAP32[$1>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_iii[$54 & 63]($1,3)|0);
   $56 = HEAP32[$1>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_iii[$58 & 63]($1,3)|0);
   HEAP16[$4>>1] = $55;
   $60 = ((($4)) + 2|0);
   HEAP16[$60>>1] = $59;
   $61 = HEAP32[$5>>2]|0;
   $62 = ((($0)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61>>>0)<($63>>>0);
   if ($64) {
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
    $65 = HEAP32[$5>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    HEAP16[$65>>1]=$66&65535;HEAP16[$65+2>>1]=$66>>>16;
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
    $67 = HEAP32[$5>>2]|0;
    $68 = ((($67)) + 4|0);
    HEAP32[$5>>2] = $68;
   } else {
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
   }
  }
 }
 HEAP16[$4>>1] = $18;
 $69 = ((($4)) + 2|0);
 HEAP16[$69>>1] = $23;
 $70 = HEAP32[$5>>2]|0;
 $71 = ((($0)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($70>>>0)<($72>>>0);
 if ($73) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$4>>2]|0;
  HEAP16[$74>>1]=$75&65535;HEAP16[$74+2>>1]=$75>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $76 = HEAP32[$5>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$5>>2] = $77;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = 0;
 $78 = ((($4)) + 2|0);
 HEAP16[$78>>1] = 2;
 $79 = HEAP32[$5>>2]|0;
 $80 = HEAP32[$71>>2]|0;
 $81 = ($79>>>0)<($80>>>0);
 if ($81) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $82 = HEAP32[$5>>2]|0;
  $83 = HEAP32[$4>>2]|0;
  HEAP16[$82>>1]=$83&65535;HEAP16[$82+2>>1]=$83>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $84 = HEAP32[$5>>2]|0;
  $85 = ((($84)) + 4|0);
  HEAP32[$5>>2] = $85;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 $86 = $25&65535;
 HEAP16[$4>>1] = $86;
 $87 = ((($4)) + 2|0);
 $88 = $26&65535;
 HEAP16[$87>>1] = $88;
 $89 = HEAP32[$5>>2]|0;
 $90 = HEAP32[$71>>2]|0;
 $91 = ($89>>>0)<($90>>>0);
 if ($91) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $92 = HEAP32[$5>>2]|0;
  $93 = HEAP32[$4>>2]|0;
  HEAP16[$92>>1]=$93&65535;HEAP16[$92+2>>1]=$93>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $94 = HEAP32[$5>>2]|0;
  $95 = ((($94)) + 4|0);
  HEAP32[$5>>2] = $95;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $86;
 $96 = ((($4)) + 2|0);
 HEAP16[$96>>1] = $88;
 $97 = HEAP32[$5>>2]|0;
 $98 = HEAP32[$71>>2]|0;
 $99 = ($97>>>0)<($98>>>0);
 if ($99) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $100 = HEAP32[$5>>2]|0;
  $101 = HEAP32[$4>>2]|0;
  HEAP16[$100>>1]=$101&65535;HEAP16[$100+2>>1]=$101>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $102 = HEAP32[$5>>2]|0;
  $103 = ((($102)) + 4|0);
  HEAP32[$5>>2] = $103;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $86;
 $104 = ((($4)) + 2|0);
 HEAP16[$104>>1] = $88;
 $105 = HEAP32[$5>>2]|0;
 $106 = HEAP32[$71>>2]|0;
 $107 = ($105>>>0)<($106>>>0);
 if ($107) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $108 = HEAP32[$5>>2]|0;
  $109 = HEAP32[$4>>2]|0;
  HEAP16[$108>>1]=$109&65535;HEAP16[$108+2>>1]=$109>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $110 = HEAP32[$5>>2]|0;
  $111 = ((($110)) + 4|0);
  HEAP32[$5>>2] = $111;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $86;
 $112 = ((($4)) + 2|0);
 HEAP16[$112>>1] = $88;
 $113 = HEAP32[$5>>2]|0;
 $114 = HEAP32[$71>>2]|0;
 $115 = ($113>>>0)<($114>>>0);
 if ($115) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $116 = HEAP32[$5>>2]|0;
  $117 = HEAP32[$4>>2]|0;
  HEAP16[$116>>1]=$117&65535;HEAP16[$116+2>>1]=$117>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $118 = HEAP32[$5>>2]|0;
  $119 = ((($118)) + 4|0);
  HEAP32[$5>>2] = $119;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $86;
 $120 = ((($4)) + 2|0);
 HEAP16[$120>>1] = $88;
 $121 = HEAP32[$5>>2]|0;
 $122 = HEAP32[$71>>2]|0;
 $123 = ($121>>>0)<($122>>>0);
 if ($123) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $124 = HEAP32[$5>>2]|0;
  $125 = HEAP32[$4>>2]|0;
  HEAP16[$124>>1]=$125&65535;HEAP16[$124+2>>1]=$125>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $126 = HEAP32[$5>>2]|0;
  $127 = ((($126)) + 4|0);
  HEAP32[$5>>2] = $127;
  STACKTOP = sp;return;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
  STACKTOP = sp;return;
 }
}
function __ZNK5Image8getPlaneEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __Z7median3IsET_S0_S0_S0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0<<16>>16)<($1<<16>>16);
 if ($3) {
  $4 = ($1<<16>>16)<($2<<16>>16);
  if ($4) {
   $$0 = $1;
  } else {
   $5 = ($0<<16>>16)<($2<<16>>16);
   $6 = $5 ? $2 : $0;
   $$0 = $6;
  }
 } else {
  $7 = ($0<<16>>16)<($2<<16>>16);
  if ($7) {
   $$0 = $0;
  } else {
   $8 = ($1<<16>>16)<($2<<16>>16);
   $9 = $8 ? $2 : $1;
   $$0 = $9;
  }
 }
 return ($$0|0);
}
function __Z14initPropRangesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0135 = 0, $$cast = 0, $$cast$i = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $$cast$i = $7;
 $$cast = $6;
 $10 = ($$cast|0)==($$cast$i|0);
 if (!($10)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $11 = $scevgep$i$i$i;
  $12 = (($11) - ($7))|0;
  $13 = $12 >>> 2;
  $14 = $13 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($14<<2)|0);
  HEAP32[$5>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE17__annotate_shrinkEj($0,$9);
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_iii[$17 & 63]($1,$2)|0);
 $19 = $18 << 16 >> 16;
 $20 = HEAP32[$1>>2]|0;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iii[$22 & 63]($1,$2)|0);
 $24 = $23 << 16 >> 16;
 $25 = (($19) - ($24))|0;
 $26 = (($24) - ($19))|0;
 $27 = ($2|0)<(3);
 if ($27) {
  $28 = ($2|0)>(0);
  if ($28) {
   $29 = ((($4)) + 2|0);
   $30 = ((($0)) + 8|0);
   $$0135 = 0;
   while(1) {
    $36 = HEAP32[$1>>2]|0;
    $37 = ((($36)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iii[$38 & 63]($1,$$0135)|0);
    $40 = HEAP32[$1>>2]|0;
    $41 = ((($40)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iii[$42 & 63]($1,$$0135)|0);
    HEAP16[$4>>1] = $39;
    HEAP16[$29>>1] = $43;
    $44 = HEAP32[$5>>2]|0;
    $45 = HEAP32[$30>>2]|0;
    $46 = ($44>>>0)<($45>>>0);
    if ($46) {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
     $47 = HEAP32[$5>>2]|0;
     $48 = HEAP32[$4>>2]|0;
     HEAP16[$47>>1]=$48&65535;HEAP16[$47+2>>1]=$48>>>16;
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
     $49 = HEAP32[$5>>2]|0;
     $50 = ((($49)) + 4|0);
     HEAP32[$5>>2] = $50;
    } else {
     __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
    }
    $51 = (($$0135) + 1)|0;
    $exitcond = ($51|0)==($2|0);
    if ($exitcond) {
     break;
    } else {
     $$0135 = $51;
    }
   }
  }
  $31 = HEAP32[$1>>2]|0;
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 63]($1)|0);
  $35 = ($34|0)>(3);
  if ($35) {
   $52 = HEAP32[$1>>2]|0;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_iii[$54 & 63]($1,3)|0);
   $56 = HEAP32[$1>>2]|0;
   $57 = ((($56)) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_iii[$58 & 63]($1,3)|0);
   HEAP16[$4>>1] = $55;
   $60 = ((($4)) + 2|0);
   HEAP16[$60>>1] = $59;
   $61 = HEAP32[$5>>2]|0;
   $62 = ((($0)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61>>>0)<($63>>>0);
   if ($64) {
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
    $65 = HEAP32[$5>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    HEAP16[$65>>1]=$66&65535;HEAP16[$65+2>>1]=$66>>>16;
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
    $67 = HEAP32[$5>>2]|0;
    $68 = ((($67)) + 4|0);
    HEAP32[$5>>2] = $68;
   } else {
    __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
   }
  }
 }
 HEAP16[$4>>1] = 0;
 $69 = ((($4)) + 2|0);
 HEAP16[$69>>1] = 2;
 $70 = HEAP32[$5>>2]|0;
 $71 = ((($0)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($70>>>0)<($72>>>0);
 if ($73) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $74 = HEAP32[$5>>2]|0;
  $75 = HEAP32[$4>>2]|0;
  HEAP16[$74>>1]=$75&65535;HEAP16[$74+2>>1]=$75>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $76 = HEAP32[$5>>2]|0;
  $77 = ((($76)) + 4|0);
  HEAP32[$5>>2] = $77;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 $$off = (($2) + -1)|0;
 $78 = ($$off>>>0)<(2);
 if ($78) {
  $79 = HEAP32[$1>>2]|0;
  $80 = ((($79)) + 12|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_iii[$81 & 63]($1,0)|0);
  $83 = $82&65535;
  $84 = HEAP32[$1>>2]|0;
  $85 = ((($84)) + 16|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_iii[$86 & 63]($1,0)|0);
  $88 = $87&65535;
  $89 = (($83) - ($88))|0;
  $90 = HEAP32[$1>>2]|0;
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (FUNCTION_TABLE_iii[$92 & 63]($1,0)|0);
  $94 = $93&65535;
  $95 = HEAP32[$1>>2]|0;
  $96 = ((($95)) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (FUNCTION_TABLE_iii[$97 & 63]($1,0)|0);
  $99 = $98&65535;
  $100 = (($94) - ($99))|0;
  $101 = $89&65535;
  HEAP16[$4>>1] = $101;
  $102 = ((($4)) + 2|0);
  $103 = $100&65535;
  HEAP16[$102>>1] = $103;
  $104 = HEAP32[$5>>2]|0;
  $105 = HEAP32[$71>>2]|0;
  $106 = ($104>>>0)<($105>>>0);
  if ($106) {
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
   $107 = HEAP32[$5>>2]|0;
   $108 = HEAP32[$4>>2]|0;
   HEAP16[$107>>1]=$108&65535;HEAP16[$107+2>>1]=$108>>>16;
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $109 = HEAP32[$5>>2]|0;
   $110 = ((($109)) + 4|0);
   HEAP32[$5>>2] = $110;
  } else {
   __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
  }
 }
 $111 = $25&65535;
 HEAP16[$4>>1] = $111;
 $112 = ((($4)) + 2|0);
 $113 = $26&65535;
 HEAP16[$112>>1] = $113;
 $114 = HEAP32[$5>>2]|0;
 $115 = HEAP32[$71>>2]|0;
 $116 = ($114>>>0)<($115>>>0);
 if ($116) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $117 = HEAP32[$5>>2]|0;
  $118 = HEAP32[$4>>2]|0;
  HEAP16[$117>>1]=$118&65535;HEAP16[$117+2>>1]=$118>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $119 = HEAP32[$5>>2]|0;
  $120 = ((($119)) + 4|0);
  HEAP32[$5>>2] = $120;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $111;
 $121 = ((($4)) + 2|0);
 HEAP16[$121>>1] = $113;
 $122 = HEAP32[$5>>2]|0;
 $123 = HEAP32[$71>>2]|0;
 $124 = ($122>>>0)<($123>>>0);
 if ($124) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $125 = HEAP32[$5>>2]|0;
  $126 = HEAP32[$4>>2]|0;
  HEAP16[$125>>1]=$126&65535;HEAP16[$125+2>>1]=$126>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $127 = HEAP32[$5>>2]|0;
  $128 = ((($127)) + 4|0);
  HEAP32[$5>>2] = $128;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $111;
 $129 = ((($4)) + 2|0);
 HEAP16[$129>>1] = $113;
 $130 = HEAP32[$5>>2]|0;
 $131 = HEAP32[$71>>2]|0;
 $132 = ($130>>>0)<($131>>>0);
 if ($132) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $133 = HEAP32[$5>>2]|0;
  $134 = HEAP32[$4>>2]|0;
  HEAP16[$133>>1]=$134&65535;HEAP16[$133+2>>1]=$134>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $135 = HEAP32[$5>>2]|0;
  $136 = ((($135)) + 4|0);
  HEAP32[$5>>2] = $136;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $111;
 $137 = ((($4)) + 2|0);
 HEAP16[$137>>1] = $113;
 $138 = HEAP32[$5>>2]|0;
 $139 = HEAP32[$71>>2]|0;
 $140 = ($138>>>0)<($139>>>0);
 if ($140) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $141 = HEAP32[$5>>2]|0;
  $142 = HEAP32[$4>>2]|0;
  HEAP16[$141>>1]=$142&65535;HEAP16[$141+2>>1]=$142>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $143 = HEAP32[$5>>2]|0;
  $144 = ((($143)) + 4|0);
  HEAP32[$5>>2] = $144;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $18;
 $145 = ((($4)) + 2|0);
 HEAP16[$145>>1] = $23;
 $146 = HEAP32[$5>>2]|0;
 $147 = HEAP32[$71>>2]|0;
 $148 = ($146>>>0)<($147>>>0);
 if ($148) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $149 = HEAP32[$5>>2]|0;
  $150 = HEAP32[$4>>2]|0;
  HEAP16[$149>>1]=$150&65535;HEAP16[$149+2>>1]=$150>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $151 = HEAP32[$5>>2]|0;
  $152 = ((($151)) + 4|0);
  HEAP32[$5>>2] = $152;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 $153 = ($2|0)==(2);
 if ($153) {
  STACKTOP = sp;return;
 }
 HEAP16[$4>>1] = $111;
 $154 = ((($4)) + 2|0);
 HEAP16[$154>>1] = $113;
 $155 = HEAP32[$5>>2]|0;
 $156 = HEAP32[$71>>2]|0;
 $157 = ($155>>>0)<($156>>>0);
 if ($157) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $158 = HEAP32[$5>>2]|0;
  $159 = HEAP32[$4>>2]|0;
  HEAP16[$158>>1]=$159&65535;HEAP16[$158+2>>1]=$159>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $160 = HEAP32[$5>>2]|0;
  $161 = ((($160)) + 4|0);
  HEAP32[$5>>2] = $161;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 HEAP16[$4>>1] = $111;
 $162 = ((($4)) + 2|0);
 HEAP16[$162>>1] = $113;
 $163 = HEAP32[$5>>2]|0;
 $164 = HEAP32[$71>>2]|0;
 $165 = ($163>>>0)<($164>>>0);
 if ($165) {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($3,$0,1);
  $166 = HEAP32[$5>>2]|0;
  $167 = HEAP32[$4>>2]|0;
  HEAP16[$166>>1]=$167&65535;HEAP16[$166+2>>1]=$167>>>16;
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $168 = HEAP32[$5>>2]|0;
  $169 = ((($168)) + 4|0);
  HEAP32[$5>>2] = $169;
 } else {
  __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0,$4);
 }
 STACKTOP = sp;return;
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0138 = 0, $$1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5Image9numPlanesEv($2)|0);
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $15 = HEAP32[$0>>2]|0;
  HEAP16[$15>>1] = $14;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 $16 = (($6) + 1)|0;
 $17 = (__ZNK5Image4rowsEi($2,$5)|0);
 $18 = ($16>>>0)<($17>>>0);
 $19 = (($7) + 1)|0;
 $20 = (__ZNK5Image4colsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($6) + -1)|0;
 $23 = (__ZNK5PlaneIhE8get_fastEjj($3,$22,$7)|0);
 $24 = ($7|0)!=(0);
 if ($24) {
  $25 = (($7) + -1)|0;
  $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$25)|0);
  $27 = (($7) + -1)|0;
  $28 = (__ZNK5PlaneIhE8get_fastEjj($3,$22,$27)|0);
  $40 = $26;$43 = $28;
 } else {
  $40 = $23;$43 = $23;
 }
 if ($21) {
  $29 = (__ZNK5PlaneIhE8get_fastEjj($3,$22,$19)|0);
  $70 = $29;
 } else {
  $70 = $23;
 }
 $or$cond = $24 & $18;
 if ($or$cond) {
  $30 = (($7) + -1)|0;
  $31 = (__ZNK5PlaneIhE8get_fastEjj($3,$16,$30)|0);
  $47 = $31;
 } else {
  $47 = $40;
 }
 if ($18) {
  $32 = (__ZNK5PlaneIhE8get_fastEjj($3,$16,$7)|0);
  $35 = $32;
 } else {
  $35 = $40;
 }
 $33 = $23 << 16 >> 16;
 $34 = $35 << 16 >> 16;
 $36 = (($34) + ($33))|0;
 $37 = $36 >>> 1;
 $38 = $37&65535;
 $39 = $40 << 16 >> 16;
 $41 = (($39) + ($33))|0;
 $42 = $43 << 16 >> 16;
 $44 = (($41) - ($42))|0;
 $45 = $44&65535;
 $46 = $47 << 16 >> 16;
 $48 = (($39) - ($46))|0;
 $49 = (($48) + ($34))|0;
 $50 = $49&65535;
 $51 = (__Z7median3IsET_S0_S0_S0_($38,$45,$50)|0);
 $52 = $51 << 16 >> 16;
 $sext = $37 << 16;
 $53 = $sext >> 16;
 $54 = ($52|0)==($53|0);
 $sext139 = $44 << 16;
 $55 = $sext139 >> 16;
 $56 = ($52|0)==($55|0);
 $$ = $56 ? 1 : 2;
 $$0138 = $54 ? 0 : $$;
 $57 = (($$0) + 1)|0;
 $58 = HEAP32[$0>>2]|0;
 $59 = (($58) + ($$0<<1)|0);
 HEAP16[$59>>1] = $$0138;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $38;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $51;
  break;
 }
 default: {
  $60 = (__Z7median3IsET_S0_S0_S0_($23,$35,$40)|0);
  HEAP16[$11>>1] = $60;
 }
 }
 $61 = HEAP32[$1>>2]|0;
 $62 = ((($61)) + 24|0);
 $63 = HEAP32[$62>>2]|0;
 FUNCTION_TABLE_viiiiii[$63 & 15]($1,0,$0,$8,$9,$11);
 $64 = (($33) - ($34))|0;
 $65 = $64&65535;
 $66 = $$0 | 2;
 $67 = HEAP32[$0>>2]|0;
 $68 = (($67) + ($57<<1)|0);
 HEAP16[$68>>1] = $65;
 $69 = $70 << 16 >> 16;
 $71 = (($69) + ($42))|0;
 $72 = $71 >>> 1;
 $73 = (($33) - ($72))|0;
 $74 = $73&65535;
 $75 = (($66) + 1)|0;
 $76 = HEAP32[$0>>2]|0;
 $77 = (($76) + ($66<<1)|0);
 HEAP16[$77>>1] = $74;
 $78 = (($46) + ($42))|0;
 $79 = $78 >>> 1;
 $80 = (($39) - ($79))|0;
 $81 = $80&65535;
 $82 = (($66) + 2)|0;
 $83 = HEAP32[$0>>2]|0;
 $84 = (($83) + ($75<<1)|0);
 HEAP16[$84>>1] = $81;
 $brmerge$demorgan = $18 & $21;
 if ($brmerge$demorgan) {
  $85 = (__ZNK5PlaneIhE8get_fastEjj($3,$16,$19)|0);
  $87 = $85;
 } else {
  $87 = $35;
 }
 $86 = $87 << 16 >> 16;
 $88 = (($86) + ($46))|0;
 $89 = $88 >>> 1;
 $90 = (($34) - ($89))|0;
 $91 = $90&65535;
 $92 = (($66) + 3)|0;
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + ($82<<1)|0);
 HEAP16[$94>>1] = $91;
 $95 = HEAP16[$11>>1]|0;
 $96 = $$0 | 6;
 $97 = HEAP32[$0>>2]|0;
 $98 = (($97) + ($92<<1)|0);
 HEAP16[$98>>1] = $95;
 $99 = ($6>>>0)>(1);
 if ($99) {
  $100 = (($6) + -2)|0;
  $101 = (__ZNK5PlaneIhE8get_fastEjj($3,$100,$7)|0);
  $102 = $101&65535;
  $103 = (($102) - ($33))|0;
  $104 = $103&65535;
  $105 = HEAP32[$0>>2]|0;
  $106 = (($105) + ($96<<1)|0);
  HEAP16[$106>>1] = $104;
 } else {
  $107 = HEAP32[$0>>2]|0;
  $108 = (($107) + ($96<<1)|0);
  HEAP16[$108>>1] = 0;
 }
 $$1 = (($96) + 1)|0;
 $109 = ($7>>>0)>(1);
 if ($109) {
  $110 = (($7) + -2)|0;
  $111 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$110)|0);
  $112 = $111&65535;
  $113 = (($112) - ($39))|0;
  $114 = $113&65535;
  $115 = HEAP32[$0>>2]|0;
  $116 = (($115) + ($$1<<1)|0);
  HEAP16[$116>>1] = $114;
  $119 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($119|0);
 } else {
  $117 = HEAP32[$0>>2]|0;
  $118 = (($117) + ($$1<<1)|0);
  HEAP16[$118>>1] = 0;
  $119 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($119|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0137 = 0, $$1 = 0, $$not = 0, $$not139 = 0, $$not139144 = 0, $$not139146 = 0, $$not141 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge142 = 0, $sext = 0;
 var $sext138 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5Image9numPlanesEv($2)|0);
 $13 = ($12|0)>(3);
 if ($13) {
  $14 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $15 = HEAP32[$0>>2]|0;
  HEAP16[$15>>1] = $14;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 $16 = (($6) + 1)|0;
 $17 = (__ZNK5Image4rowsEi($2,$5)|0);
 $18 = ($16>>>0)<($17>>>0);
 $19 = (($7) + 1)|0;
 $20 = (__ZNK5Image4colsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($7) + -1)|0;
 $23 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$22)|0);
 $24 = ($6|0)!=(0);
 if ($24) {
  $25 = (($6) + -1)|0;
  $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$25,$7)|0);
  $27 = (($6) + -1)|0;
  $28 = (__ZNK5PlaneIhE8get_fastEjj($3,$27,$22)|0);
  $$not = $24 ^ 1;
  $$not139 = $21 ^ 1;
  $brmerge = $$not | $$not139;
  if ($brmerge) {
   $$not139146 = $$not139;$39 = $26;$41 = $28;$46 = $26;
  } else {
   $29 = (__ZNK5PlaneIhE8get_fastEjj($3,$25,$19)|0);
   $$not139146 = $$not139;$39 = $26;$41 = $28;$46 = $29;
  }
 } else {
  $$not139144 = $21 ^ 1;
  $$not139146 = $$not139144;$39 = $23;$41 = $23;$46 = $23;
 }
 if ($18) {
  $30 = (__ZNK5PlaneIhE8get_fastEjj($3,$16,$22)|0);
  $69 = $30;
 } else {
  $69 = $23;
 }
 if ($21) {
  $31 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$19)|0);
  $34 = $31;
 } else {
  $34 = $39;
 }
 $32 = $23 << 16 >> 16;
 $33 = $34 << 16 >> 16;
 $35 = (($33) + ($32))|0;
 $36 = $35 >>> 1;
 $37 = $36&65535;
 $38 = $39 << 16 >> 16;
 $40 = $41 << 16 >> 16;
 $42 = (($32) - ($40))|0;
 $43 = (($42) + ($38))|0;
 $44 = $43&65535;
 $45 = $46 << 16 >> 16;
 $47 = (($38) - ($45))|0;
 $48 = (($47) + ($33))|0;
 $49 = $48&65535;
 $50 = (__Z7median3IsET_S0_S0_S0_($37,$44,$49)|0);
 $51 = $50 << 16 >> 16;
 $sext = $36 << 16;
 $52 = $sext >> 16;
 $53 = ($51|0)==($52|0);
 $sext138 = $43 << 16;
 $54 = $sext138 >> 16;
 $55 = ($51|0)==($54|0);
 $$ = $55 ? 1 : 2;
 $$0137 = $53 ? 0 : $$;
 $56 = (($$0) + 1)|0;
 $57 = HEAP32[$0>>2]|0;
 $58 = (($57) + ($$0<<1)|0);
 HEAP16[$58>>1] = $$0137;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $37;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $50;
  break;
 }
 default: {
  $59 = (__Z7median3IsET_S0_S0_S0_($39,$23,$34)|0);
  HEAP16[$11>>1] = $59;
 }
 }
 $60 = HEAP32[$1>>2]|0;
 $61 = ((($60)) + 24|0);
 $62 = HEAP32[$61>>2]|0;
 FUNCTION_TABLE_viiiiii[$62 & 15]($1,0,$0,$8,$9,$11);
 $63 = (($32) - ($33))|0;
 $64 = $63&65535;
 $65 = $$0 | 2;
 $66 = HEAP32[$0>>2]|0;
 $67 = (($66) + ($56<<1)|0);
 HEAP16[$67>>1] = $64;
 $68 = $69 << 16 >> 16;
 $70 = (($68) + ($40))|0;
 $71 = $70 >>> 1;
 $72 = (($32) - ($71))|0;
 $73 = $72&65535;
 $74 = (($65) + 1)|0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + ($65<<1)|0);
 HEAP16[$76>>1] = $73;
 $77 = (($45) + ($40))|0;
 $78 = $77 >>> 1;
 $79 = (($38) - ($78))|0;
 $80 = $79&65535;
 $81 = (($65) + 2)|0;
 $82 = HEAP32[$0>>2]|0;
 $83 = (($82) + ($74<<1)|0);
 HEAP16[$83>>1] = $80;
 $$not141 = $18 ^ 1;
 $brmerge142 = $$not139146 | $$not141;
 if ($brmerge142) {
  $86 = $34;
 } else {
  $84 = (__ZNK5PlaneIhE8get_fastEjj($3,$16,$19)|0);
  $86 = $84;
 }
 $85 = $86 << 16 >> 16;
 $87 = (($85) + ($45))|0;
 $88 = $87 >>> 1;
 $89 = (($33) - ($88))|0;
 $90 = $89&65535;
 $91 = (($65) + 3)|0;
 $92 = HEAP32[$0>>2]|0;
 $93 = (($92) + ($81<<1)|0);
 HEAP16[$93>>1] = $90;
 $94 = HEAP16[$11>>1]|0;
 $95 = $$0 | 6;
 $96 = HEAP32[$0>>2]|0;
 $97 = (($96) + ($91<<1)|0);
 HEAP16[$97>>1] = $94;
 $98 = ($6>>>0)>(1);
 if ($98) {
  $99 = (($6) + -2)|0;
  $100 = (__ZNK5PlaneIhE8get_fastEjj($3,$99,$7)|0);
  $101 = $100&65535;
  $102 = (($101) - ($38))|0;
  $103 = $102&65535;
  $104 = HEAP32[$0>>2]|0;
  $105 = (($104) + ($95<<1)|0);
  HEAP16[$105>>1] = $103;
 } else {
  $106 = HEAP32[$0>>2]|0;
  $107 = (($106) + ($95<<1)|0);
  HEAP16[$107>>1] = 0;
 }
 $$1 = (($95) + 1)|0;
 $108 = ($7>>>0)>(1);
 if ($108) {
  $109 = (($7) + -2)|0;
  $110 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$109)|0);
  $111 = $110&65535;
  $112 = (($111) - ($32))|0;
  $113 = $112&65535;
  $114 = HEAP32[$0>>2]|0;
  $115 = (($114) + ($$1<<1)|0);
  HEAP16[$115>>1] = $113;
  $118 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($118|0);
 } else {
  $116 = HEAP32[$0>>2]|0;
  $117 = (($116) + ($$1<<1)|0);
  HEAP16[$117>>1] = 0;
  $118 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0155 = 0, $$1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5Image9numPlanesEv($2)|0);
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  $$0 = 2;
 } else {
  $$0 = 1;
 }
 $19 = (($6) + 1)|0;
 $20 = (__ZNK5Image4rowsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($7) + 1)|0;
 $23 = (__ZNK5Image4colsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($6) + -1)|0;
 $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$25,$7)|0);
 $27 = ($7|0)!=(0);
 if ($27) {
  $28 = (($7) + -1)|0;
  $29 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$28)|0);
  $30 = (($7) + -1)|0;
  $31 = (__ZNK5PlaneIhE8get_fastEjj($3,$25,$30)|0);
  $43 = $29;$46 = $31;
 } else {
  $43 = $26;$46 = $26;
 }
 if ($24) {
  $32 = (__ZNK5PlaneIhE8get_fastEjj($3,$25,$22)|0);
  $87 = $32;
 } else {
  $87 = $26;
 }
 $or$cond = $27 & $21;
 if ($or$cond) {
  $33 = (($7) + -1)|0;
  $34 = (__ZNK5PlaneIhE8get_fastEjj($3,$19,$33)|0);
  $50 = $34;
 } else {
  $50 = $43;
 }
 if ($21) {
  $35 = (__ZNK5PlaneIhE8get_fastEjj($3,$19,$7)|0);
  $38 = $35;
 } else {
  $38 = $43;
 }
 $36 = $26 << 16 >> 16;
 $37 = $38 << 16 >> 16;
 $39 = (($37) + ($36))|0;
 $40 = $39 >>> 1;
 $41 = $40&65535;
 $42 = $43 << 16 >> 16;
 $44 = (($42) + ($36))|0;
 $45 = $46 << 16 >> 16;
 $47 = (($44) - ($45))|0;
 $48 = $47&65535;
 $49 = $50 << 16 >> 16;
 $51 = (($42) - ($49))|0;
 $52 = (($51) + ($37))|0;
 $53 = $52&65535;
 $54 = (__Z7median3IsET_S0_S0_S0_($41,$48,$53)|0);
 $55 = $54 << 16 >> 16;
 $sext = $40 << 16;
 $56 = $sext >> 16;
 $57 = ($55|0)==($56|0);
 $sext156 = $47 << 16;
 $58 = $sext156 >> 16;
 $59 = ($55|0)==($58|0);
 $$ = $59 ? 1 : 2;
 $$0155 = $57 ? 0 : $$;
 $60 = (($$0) + 1)|0;
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + ($$0<<1)|0);
 HEAP16[$62>>1] = $$0155;
 $63 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$7)|0);
 $64 = $63&65535;
 $65 = (__ZNK13ConstantPlane8get_fastEjj($4,$25,$7)|0);
 $66 = $65 << 16 >> 16;
 $67 = $21 ? $19 : $25;
 $68 = (__ZNK13ConstantPlane8get_fastEjj($4,$67,$7)|0);
 $69 = $68 << 16 >> 16;
 $70 = (($69) + ($66))|0;
 $71 = $70 >>> 1;
 $72 = (($64) - ($71))|0;
 $73 = $72&65535;
 $74 = (($$0) + 2)|0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + ($60<<1)|0);
 HEAP16[$76>>1] = $73;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $41;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $54;
  break;
 }
 default: {
  $77 = (__Z7median3IsET_S0_S0_S0_($26,$38,$43)|0);
  HEAP16[$11>>1] = $77;
 }
 }
 $78 = HEAP32[$1>>2]|0;
 $79 = ((($78)) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 FUNCTION_TABLE_viiiiii[$80 & 15]($1,1,$0,$8,$9,$11);
 $81 = (($36) - ($37))|0;
 $82 = $81&65535;
 $83 = (($$0) + 3)|0;
 $84 = HEAP32[$0>>2]|0;
 $85 = (($84) + ($74<<1)|0);
 HEAP16[$85>>1] = $82;
 $86 = $87 << 16 >> 16;
 $88 = (($86) + ($45))|0;
 $89 = $88 >>> 1;
 $90 = (($36) - ($89))|0;
 $91 = $90&65535;
 $92 = $$0 | 4;
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + ($83<<1)|0);
 HEAP16[$94>>1] = $91;
 $95 = (($49) + ($45))|0;
 $96 = $95 >>> 1;
 $97 = (($42) - ($96))|0;
 $98 = $97&65535;
 $99 = (($92) + 1)|0;
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + ($92<<1)|0);
 HEAP16[$101>>1] = $98;
 $brmerge$demorgan = $21 & $24;
 if ($brmerge$demorgan) {
  $102 = (__ZNK5PlaneIhE8get_fastEjj($3,$19,$22)|0);
  $104 = $102;
 } else {
  $104 = $38;
 }
 $103 = $104 << 16 >> 16;
 $105 = (($103) + ($49))|0;
 $106 = $105 >>> 1;
 $107 = (($37) - ($106))|0;
 $108 = $107&65535;
 $109 = (($92) + 2)|0;
 $110 = HEAP32[$0>>2]|0;
 $111 = (($110) + ($99<<1)|0);
 HEAP16[$111>>1] = $108;
 $112 = HEAP16[$11>>1]|0;
 $113 = (($92) + 3)|0;
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + ($109<<1)|0);
 HEAP16[$115>>1] = $112;
 $116 = ($6>>>0)>(1);
 if ($116) {
  $117 = (($6) + -2)|0;
  $118 = (__ZNK5PlaneIhE8get_fastEjj($3,$117,$7)|0);
  $119 = $118&65535;
  $120 = (($119) - ($36))|0;
  $121 = $120&65535;
  $122 = HEAP32[$0>>2]|0;
  $123 = (($122) + ($113<<1)|0);
  HEAP16[$123>>1] = $121;
 } else {
  $124 = HEAP32[$0>>2]|0;
  $125 = (($124) + ($113<<1)|0);
  HEAP16[$125>>1] = 0;
 }
 $$1 = (($92) + 4)|0;
 $126 = ($7>>>0)>(1);
 if ($126) {
  $127 = (($7) + -2)|0;
  $128 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$127)|0);
  $129 = $128&65535;
  $130 = (($129) - ($42))|0;
  $131 = $130&65535;
  $132 = HEAP32[$0>>2]|0;
  $133 = (($132) + ($$1<<1)|0);
  HEAP16[$133>>1] = $131;
  $136 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($136|0);
 } else {
  $134 = HEAP32[$0>>2]|0;
  $135 = (($134) + ($$1<<1)|0);
  HEAP16[$135>>1] = 0;
  $136 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($136|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0154 = 0, $$1 = 0, $$not = 0, $$not156 = 0, $$not156161 = 0, $$not156163 = 0, $$not158 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge159 = 0, $sext = 0, $sext155 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5Image9numPlanesEv($2)|0);
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  $$0 = 2;
 } else {
  $$0 = 1;
 }
 $19 = (($6) + 1)|0;
 $20 = (__ZNK5Image4rowsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($7) + 1)|0;
 $23 = (__ZNK5Image4colsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($7) + -1)|0;
 $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$25)|0);
 $27 = ($6|0)!=(0);
 if ($27) {
  $28 = (($6) + -1)|0;
  $29 = (__ZNK5PlaneIhE8get_fastEjj($3,$28,$7)|0);
  $30 = (($6) + -1)|0;
  $31 = (__ZNK5PlaneIhE8get_fastEjj($3,$30,$25)|0);
  $$not = $27 ^ 1;
  $$not156 = $24 ^ 1;
  $brmerge = $$not | $$not156;
  if ($brmerge) {
   $$not156163 = $$not156;$42 = $29;$44 = $31;$49 = $29;
  } else {
   $32 = (__ZNK5PlaneIhE8get_fastEjj($3,$28,$22)|0);
   $$not156163 = $$not156;$42 = $29;$44 = $31;$49 = $32;
  }
 } else {
  $$not156161 = $24 ^ 1;
  $$not156163 = $$not156161;$42 = $26;$44 = $26;$49 = $26;
 }
 if ($21) {
  $33 = (__ZNK5PlaneIhE8get_fastEjj($3,$19,$25)|0);
  $86 = $33;
 } else {
  $86 = $26;
 }
 if ($24) {
  $34 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$22)|0);
  $37 = $34;
 } else {
  $37 = $42;
 }
 $35 = $26 << 16 >> 16;
 $36 = $37 << 16 >> 16;
 $38 = (($36) + ($35))|0;
 $39 = $38 >>> 1;
 $40 = $39&65535;
 $41 = $42 << 16 >> 16;
 $43 = $44 << 16 >> 16;
 $45 = (($35) - ($43))|0;
 $46 = (($45) + ($41))|0;
 $47 = $46&65535;
 $48 = $49 << 16 >> 16;
 $50 = (($41) - ($48))|0;
 $51 = (($50) + ($36))|0;
 $52 = $51&65535;
 $53 = (__Z7median3IsET_S0_S0_S0_($40,$47,$52)|0);
 $54 = $53 << 16 >> 16;
 $sext = $39 << 16;
 $55 = $sext >> 16;
 $56 = ($54|0)==($55|0);
 $sext155 = $46 << 16;
 $57 = $sext155 >> 16;
 $58 = ($54|0)==($57|0);
 $$ = $58 ? 1 : 2;
 $$0154 = $56 ? 0 : $$;
 $59 = (($$0) + 1)|0;
 $60 = HEAP32[$0>>2]|0;
 $61 = (($60) + ($$0<<1)|0);
 HEAP16[$61>>1] = $$0154;
 $62 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$7)|0);
 $63 = $62&65535;
 $64 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$25)|0);
 $65 = $64 << 16 >> 16;
 $66 = $24 ? $22 : $25;
 $67 = (__ZNK13ConstantPlane8get_fastEjj($4,$6,$66)|0);
 $68 = $67 << 16 >> 16;
 $69 = (($68) + ($65))|0;
 $70 = $69 >>> 1;
 $71 = (($63) - ($70))|0;
 $72 = $71&65535;
 $73 = (($$0) + 2)|0;
 $74 = HEAP32[$0>>2]|0;
 $75 = (($74) + ($59<<1)|0);
 HEAP16[$75>>1] = $72;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $40;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $53;
  break;
 }
 default: {
  $76 = (__Z7median3IsET_S0_S0_S0_($42,$26,$37)|0);
  HEAP16[$11>>1] = $76;
 }
 }
 $77 = HEAP32[$1>>2]|0;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 FUNCTION_TABLE_viiiiii[$79 & 15]($1,1,$0,$8,$9,$11);
 $80 = (($35) - ($36))|0;
 $81 = $80&65535;
 $82 = (($$0) + 3)|0;
 $83 = HEAP32[$0>>2]|0;
 $84 = (($83) + ($73<<1)|0);
 HEAP16[$84>>1] = $81;
 $85 = $86 << 16 >> 16;
 $87 = (($85) + ($43))|0;
 $88 = $87 >>> 1;
 $89 = (($35) - ($88))|0;
 $90 = $89&65535;
 $91 = $$0 | 4;
 $92 = HEAP32[$0>>2]|0;
 $93 = (($92) + ($82<<1)|0);
 HEAP16[$93>>1] = $90;
 $94 = (($48) + ($43))|0;
 $95 = $94 >>> 1;
 $96 = (($41) - ($95))|0;
 $97 = $96&65535;
 $98 = (($91) + 1)|0;
 $99 = HEAP32[$0>>2]|0;
 $100 = (($99) + ($91<<1)|0);
 HEAP16[$100>>1] = $97;
 $$not158 = $21 ^ 1;
 $brmerge159 = $$not156163 | $$not158;
 if ($brmerge159) {
  $103 = $37;
 } else {
  $101 = (__ZNK5PlaneIhE8get_fastEjj($3,$19,$22)|0);
  $103 = $101;
 }
 $102 = $103 << 16 >> 16;
 $104 = (($102) + ($48))|0;
 $105 = $104 >>> 1;
 $106 = (($36) - ($105))|0;
 $107 = $106&65535;
 $108 = (($91) + 2)|0;
 $109 = HEAP32[$0>>2]|0;
 $110 = (($109) + ($98<<1)|0);
 HEAP16[$110>>1] = $107;
 $111 = HEAP16[$11>>1]|0;
 $112 = (($91) + 3)|0;
 $113 = HEAP32[$0>>2]|0;
 $114 = (($113) + ($108<<1)|0);
 HEAP16[$114>>1] = $111;
 $115 = ($6>>>0)>(1);
 if ($115) {
  $116 = (($6) + -2)|0;
  $117 = (__ZNK5PlaneIhE8get_fastEjj($3,$116,$7)|0);
  $118 = $117&65535;
  $119 = (($118) - ($41))|0;
  $120 = $119&65535;
  $121 = HEAP32[$0>>2]|0;
  $122 = (($121) + ($112<<1)|0);
  HEAP16[$122>>1] = $120;
 } else {
  $123 = HEAP32[$0>>2]|0;
  $124 = (($123) + ($112<<1)|0);
  HEAP16[$124>>1] = 0;
 }
 $$1 = (($91) + 4)|0;
 $125 = ($7>>>0)>(1);
 if ($125) {
  $126 = (($7) + -2)|0;
  $127 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$126)|0);
  $128 = $127&65535;
  $129 = (($128) - ($35))|0;
  $130 = $129&65535;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + ($$1<<1)|0);
  HEAP16[$132>>1] = $130;
  $135 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($135|0);
 } else {
  $133 = HEAP32[$0>>2]|0;
  $134 = (($133) + ($$1<<1)|0);
  HEAP16[$134>>1] = 0;
  $135 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($135|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0155 = 0, $$1 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext156 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5Image9numPlanesEv($2)|0);
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  $$0 = 2;
 } else {
  $$0 = 1;
 }
 $19 = (($6) + 1)|0;
 $20 = (__ZNK5Image4rowsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($7) + 1)|0;
 $23 = (__ZNK5Image4colsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($6) + -1)|0;
 $26 = (__ZNK5PlaneIsE8get_fastEjj($3,$25,$7)|0);
 $27 = ($7|0)!=(0);
 if ($27) {
  $28 = (($7) + -1)|0;
  $29 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$28)|0);
  $30 = (($7) + -1)|0;
  $31 = (__ZNK5PlaneIsE8get_fastEjj($3,$25,$30)|0);
  $43 = $29;$46 = $31;
 } else {
  $43 = $26;$46 = $26;
 }
 if ($24) {
  $32 = (__ZNK5PlaneIsE8get_fastEjj($3,$25,$22)|0);
  $87 = $32;
 } else {
  $87 = $26;
 }
 $or$cond = $27 & $21;
 if ($or$cond) {
  $33 = (($7) + -1)|0;
  $34 = (__ZNK5PlaneIsE8get_fastEjj($3,$19,$33)|0);
  $50 = $34;
 } else {
  $50 = $43;
 }
 if ($21) {
  $35 = (__ZNK5PlaneIsE8get_fastEjj($3,$19,$7)|0);
  $38 = $35;
 } else {
  $38 = $43;
 }
 $36 = $26 << 16 >> 16;
 $37 = $38 << 16 >> 16;
 $39 = (($37) + ($36))|0;
 $40 = $39 >>> 1;
 $41 = $40&65535;
 $42 = $43 << 16 >> 16;
 $44 = (($42) + ($36))|0;
 $45 = $46 << 16 >> 16;
 $47 = (($44) - ($45))|0;
 $48 = $47&65535;
 $49 = $50 << 16 >> 16;
 $51 = (($42) - ($49))|0;
 $52 = (($51) + ($37))|0;
 $53 = $52&65535;
 $54 = (__Z7median3IsET_S0_S0_S0_($41,$48,$53)|0);
 $55 = $54 << 16 >> 16;
 $sext = $40 << 16;
 $56 = $sext >> 16;
 $57 = ($55|0)==($56|0);
 $sext156 = $47 << 16;
 $58 = $sext156 >> 16;
 $59 = ($55|0)==($58|0);
 $$ = $59 ? 1 : 2;
 $$0155 = $57 ? 0 : $$;
 $60 = (($$0) + 1)|0;
 $61 = HEAP32[$0>>2]|0;
 $62 = (($61) + ($$0<<1)|0);
 HEAP16[$62>>1] = $$0155;
 $63 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $64 = $63&65535;
 $65 = (__ZNK5PlaneIhE8get_fastEjj($4,$25,$7)|0);
 $66 = $65 << 16 >> 16;
 $67 = $21 ? $19 : $25;
 $68 = (__ZNK5PlaneIhE8get_fastEjj($4,$67,$7)|0);
 $69 = $68 << 16 >> 16;
 $70 = (($69) + ($66))|0;
 $71 = $70 >>> 1;
 $72 = (($64) - ($71))|0;
 $73 = $72&65535;
 $74 = (($$0) + 2)|0;
 $75 = HEAP32[$0>>2]|0;
 $76 = (($75) + ($60<<1)|0);
 HEAP16[$76>>1] = $73;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $41;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $54;
  break;
 }
 default: {
  $77 = (__Z7median3IsET_S0_S0_S0_($26,$38,$43)|0);
  HEAP16[$11>>1] = $77;
 }
 }
 $78 = HEAP32[$1>>2]|0;
 $79 = ((($78)) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 FUNCTION_TABLE_viiiiii[$80 & 15]($1,1,$0,$8,$9,$11);
 $81 = (($36) - ($37))|0;
 $82 = $81&65535;
 $83 = (($$0) + 3)|0;
 $84 = HEAP32[$0>>2]|0;
 $85 = (($84) + ($74<<1)|0);
 HEAP16[$85>>1] = $82;
 $86 = $87 << 16 >> 16;
 $88 = (($86) + ($45))|0;
 $89 = $88 >>> 1;
 $90 = (($36) - ($89))|0;
 $91 = $90&65535;
 $92 = $$0 | 4;
 $93 = HEAP32[$0>>2]|0;
 $94 = (($93) + ($83<<1)|0);
 HEAP16[$94>>1] = $91;
 $95 = (($49) + ($45))|0;
 $96 = $95 >>> 1;
 $97 = (($42) - ($96))|0;
 $98 = $97&65535;
 $99 = (($92) + 1)|0;
 $100 = HEAP32[$0>>2]|0;
 $101 = (($100) + ($92<<1)|0);
 HEAP16[$101>>1] = $98;
 $brmerge$demorgan = $21 & $24;
 if ($brmerge$demorgan) {
  $102 = (__ZNK5PlaneIsE8get_fastEjj($3,$19,$22)|0);
  $104 = $102;
 } else {
  $104 = $38;
 }
 $103 = $104 << 16 >> 16;
 $105 = (($103) + ($49))|0;
 $106 = $105 >>> 1;
 $107 = (($37) - ($106))|0;
 $108 = $107&65535;
 $109 = (($92) + 2)|0;
 $110 = HEAP32[$0>>2]|0;
 $111 = (($110) + ($99<<1)|0);
 HEAP16[$111>>1] = $108;
 $112 = HEAP16[$11>>1]|0;
 $113 = (($92) + 3)|0;
 $114 = HEAP32[$0>>2]|0;
 $115 = (($114) + ($109<<1)|0);
 HEAP16[$115>>1] = $112;
 $116 = ($6>>>0)>(1);
 if ($116) {
  $117 = (($6) + -2)|0;
  $118 = (__ZNK5PlaneIsE8get_fastEjj($3,$117,$7)|0);
  $119 = $118&65535;
  $120 = (($119) - ($36))|0;
  $121 = $120&65535;
  $122 = HEAP32[$0>>2]|0;
  $123 = (($122) + ($113<<1)|0);
  HEAP16[$123>>1] = $121;
 } else {
  $124 = HEAP32[$0>>2]|0;
  $125 = (($124) + ($113<<1)|0);
  HEAP16[$125>>1] = 0;
 }
 $$1 = (($92) + 4)|0;
 $126 = ($7>>>0)>(1);
 if ($126) {
  $127 = (($7) + -2)|0;
  $128 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$127)|0);
  $129 = $128&65535;
  $130 = (($129) - ($42))|0;
  $131 = $130&65535;
  $132 = HEAP32[$0>>2]|0;
  $133 = (($132) + ($$1<<1)|0);
  HEAP16[$133>>1] = $131;
  $136 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($136|0);
 } else {
  $134 = HEAP32[$0>>2]|0;
  $135 = (($134) + ($$1<<1)|0);
  HEAP16[$135>>1] = 0;
  $136 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($136|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0154 = 0, $$1 = 0, $$not = 0, $$not156 = 0, $$not156161 = 0, $$not156163 = 0, $$not158 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge159 = 0, $sext = 0, $sext155 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5Image9numPlanesEv($2)|0);
 $15 = ($14|0)>(3);
 if ($15) {
  $16 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $17 = HEAP32[$0>>2]|0;
  $18 = ((($17)) + 2|0);
  HEAP16[$18>>1] = $16;
  $$0 = 2;
 } else {
  $$0 = 1;
 }
 $19 = (($6) + 1)|0;
 $20 = (__ZNK5Image4rowsEi($2,$5)|0);
 $21 = ($19>>>0)<($20>>>0);
 $22 = (($7) + 1)|0;
 $23 = (__ZNK5Image4colsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($7) + -1)|0;
 $26 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$25)|0);
 $27 = ($6|0)!=(0);
 if ($27) {
  $28 = (($6) + -1)|0;
  $29 = (__ZNK5PlaneIsE8get_fastEjj($3,$28,$7)|0);
  $30 = (($6) + -1)|0;
  $31 = (__ZNK5PlaneIsE8get_fastEjj($3,$30,$25)|0);
  $$not = $27 ^ 1;
  $$not156 = $24 ^ 1;
  $brmerge = $$not | $$not156;
  if ($brmerge) {
   $$not156163 = $$not156;$42 = $29;$44 = $31;$49 = $29;
  } else {
   $32 = (__ZNK5PlaneIsE8get_fastEjj($3,$28,$22)|0);
   $$not156163 = $$not156;$42 = $29;$44 = $31;$49 = $32;
  }
 } else {
  $$not156161 = $24 ^ 1;
  $$not156163 = $$not156161;$42 = $26;$44 = $26;$49 = $26;
 }
 if ($21) {
  $33 = (__ZNK5PlaneIsE8get_fastEjj($3,$19,$25)|0);
  $86 = $33;
 } else {
  $86 = $26;
 }
 if ($24) {
  $34 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$22)|0);
  $37 = $34;
 } else {
  $37 = $42;
 }
 $35 = $26 << 16 >> 16;
 $36 = $37 << 16 >> 16;
 $38 = (($36) + ($35))|0;
 $39 = $38 >>> 1;
 $40 = $39&65535;
 $41 = $42 << 16 >> 16;
 $43 = $44 << 16 >> 16;
 $45 = (($35) - ($43))|0;
 $46 = (($45) + ($41))|0;
 $47 = $46&65535;
 $48 = $49 << 16 >> 16;
 $50 = (($41) - ($48))|0;
 $51 = (($50) + ($36))|0;
 $52 = $51&65535;
 $53 = (__Z7median3IsET_S0_S0_S0_($40,$47,$52)|0);
 $54 = $53 << 16 >> 16;
 $sext = $39 << 16;
 $55 = $sext >> 16;
 $56 = ($54|0)==($55|0);
 $sext155 = $46 << 16;
 $57 = $sext155 >> 16;
 $58 = ($54|0)==($57|0);
 $$ = $58 ? 1 : 2;
 $$0154 = $56 ? 0 : $$;
 $59 = (($$0) + 1)|0;
 $60 = HEAP32[$0>>2]|0;
 $61 = (($60) + ($$0<<1)|0);
 HEAP16[$61>>1] = $$0154;
 $62 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $63 = $62&65535;
 $64 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$25)|0);
 $65 = $64 << 16 >> 16;
 $66 = $24 ? $22 : $25;
 $67 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$66)|0);
 $68 = $67 << 16 >> 16;
 $69 = (($68) + ($65))|0;
 $70 = $69 >>> 1;
 $71 = (($63) - ($70))|0;
 $72 = $71&65535;
 $73 = (($$0) + 2)|0;
 $74 = HEAP32[$0>>2]|0;
 $75 = (($74) + ($59<<1)|0);
 HEAP16[$75>>1] = $72;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $40;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $53;
  break;
 }
 default: {
  $76 = (__Z7median3IsET_S0_S0_S0_($42,$26,$37)|0);
  HEAP16[$11>>1] = $76;
 }
 }
 $77 = HEAP32[$1>>2]|0;
 $78 = ((($77)) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 FUNCTION_TABLE_viiiiii[$79 & 15]($1,1,$0,$8,$9,$11);
 $80 = (($35) - ($36))|0;
 $81 = $80&65535;
 $82 = (($$0) + 3)|0;
 $83 = HEAP32[$0>>2]|0;
 $84 = (($83) + ($73<<1)|0);
 HEAP16[$84>>1] = $81;
 $85 = $86 << 16 >> 16;
 $87 = (($85) + ($43))|0;
 $88 = $87 >>> 1;
 $89 = (($35) - ($88))|0;
 $90 = $89&65535;
 $91 = $$0 | 4;
 $92 = HEAP32[$0>>2]|0;
 $93 = (($92) + ($82<<1)|0);
 HEAP16[$93>>1] = $90;
 $94 = (($48) + ($43))|0;
 $95 = $94 >>> 1;
 $96 = (($41) - ($95))|0;
 $97 = $96&65535;
 $98 = (($91) + 1)|0;
 $99 = HEAP32[$0>>2]|0;
 $100 = (($99) + ($91<<1)|0);
 HEAP16[$100>>1] = $97;
 $$not158 = $21 ^ 1;
 $brmerge159 = $$not156163 | $$not158;
 if ($brmerge159) {
  $103 = $37;
 } else {
  $101 = (__ZNK5PlaneIsE8get_fastEjj($3,$19,$22)|0);
  $103 = $101;
 }
 $102 = $103 << 16 >> 16;
 $104 = (($102) + ($48))|0;
 $105 = $104 >>> 1;
 $106 = (($36) - ($105))|0;
 $107 = $106&65535;
 $108 = (($91) + 2)|0;
 $109 = HEAP32[$0>>2]|0;
 $110 = (($109) + ($98<<1)|0);
 HEAP16[$110>>1] = $107;
 $111 = HEAP16[$11>>1]|0;
 $112 = (($91) + 3)|0;
 $113 = HEAP32[$0>>2]|0;
 $114 = (($113) + ($108<<1)|0);
 HEAP16[$114>>1] = $111;
 $115 = ($6>>>0)>(1);
 if ($115) {
  $116 = (($6) + -2)|0;
  $117 = (__ZNK5PlaneIsE8get_fastEjj($3,$116,$7)|0);
  $118 = $117&65535;
  $119 = (($118) - ($41))|0;
  $120 = $119&65535;
  $121 = HEAP32[$0>>2]|0;
  $122 = (($121) + ($112<<1)|0);
  HEAP16[$122>>1] = $120;
 } else {
  $123 = HEAP32[$0>>2]|0;
  $124 = (($123) + ($112<<1)|0);
  HEAP16[$124>>1] = 0;
 }
 $$1 = (($91) + 4)|0;
 $125 = ($7>>>0)>(1);
 if ($125) {
  $126 = (($7) + -2)|0;
  $127 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$126)|0);
  $128 = $127&65535;
  $129 = (($128) - ($35))|0;
  $130 = $129&65535;
  $131 = HEAP32[$0>>2]|0;
  $132 = (($131) + ($$1<<1)|0);
  HEAP16[$132>>1] = $130;
  $135 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($135|0);
 } else {
  $133 = HEAP32[$0>>2]|0;
  $134 = (($133) + ($$1<<1)|0);
  HEAP16[$134>>1] = 0;
  $135 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($135|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0143 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext144 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5ImageclEiijj($2,1,$5,$6,$7)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $14;
 $17 = (__ZNK5Image9numPlanesEv($2)|0);
 $18 = ($17|0)>(3);
 if ($18) {
  $19 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 4|0);
  HEAP16[$21>>1] = $19;
  $$0 = 3;
 } else {
  $$0 = 2;
 }
 $22 = (($6) + 1)|0;
 $23 = (__ZNK5Image4rowsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($7) + 1)|0;
 $26 = (__ZNK5Image4colsEi($2,$5)|0);
 $27 = ($25>>>0)<($26>>>0);
 $28 = (($6) + -1)|0;
 $29 = (__ZNK5PlaneIsE8get_fastEjj($3,$28,$7)|0);
 $30 = ($7|0)!=(0);
 if ($30) {
  $31 = (($7) + -1)|0;
  $32 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$31)|0);
  $33 = (($7) + -1)|0;
  $34 = (__ZNK5PlaneIsE8get_fastEjj($3,$28,$33)|0);
  $46 = $32;$49 = $34;
 } else {
  $46 = $29;$49 = $29;
 }
 if ($27) {
  $35 = (__ZNK5PlaneIsE8get_fastEjj($3,$28,$25)|0);
  $90 = $35;
 } else {
  $90 = $29;
 }
 $or$cond = $30 & $24;
 if ($or$cond) {
  $36 = (($7) + -1)|0;
  $37 = (__ZNK5PlaneIsE8get_fastEjj($3,$22,$36)|0);
  $53 = $37;
 } else {
  $53 = $46;
 }
 if ($24) {
  $38 = (__ZNK5PlaneIsE8get_fastEjj($3,$22,$7)|0);
  $41 = $38;
 } else {
  $41 = $46;
 }
 $39 = $29 << 16 >> 16;
 $40 = $41 << 16 >> 16;
 $42 = (($40) + ($39))|0;
 $43 = $42 >>> 1;
 $44 = $43&65535;
 $45 = $46 << 16 >> 16;
 $47 = (($45) + ($39))|0;
 $48 = $49 << 16 >> 16;
 $50 = (($47) - ($48))|0;
 $51 = $50&65535;
 $52 = $53 << 16 >> 16;
 $54 = (($45) - ($52))|0;
 $55 = (($54) + ($40))|0;
 $56 = $55&65535;
 $57 = (__Z7median3IsET_S0_S0_S0_($44,$51,$56)|0);
 $58 = $57 << 16 >> 16;
 $sext = $43 << 16;
 $59 = $sext >> 16;
 $60 = ($58|0)==($59|0);
 $sext144 = $50 << 16;
 $61 = $sext144 >> 16;
 $62 = ($58|0)==($61|0);
 $$ = $62 ? 1 : 2;
 $$0143 = $60 ? 0 : $$;
 $63 = (($$0) + 1)|0;
 $64 = HEAP32[$0>>2]|0;
 $65 = (($64) + ($$0<<1)|0);
 HEAP16[$65>>1] = $$0143;
 $66 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $67 = $66&65535;
 $68 = (__ZNK5PlaneIhE8get_fastEjj($4,$28,$7)|0);
 $69 = $68 << 16 >> 16;
 $70 = $24 ? $22 : $28;
 $71 = (__ZNK5PlaneIhE8get_fastEjj($4,$70,$7)|0);
 $72 = $71 << 16 >> 16;
 $73 = (($72) + ($69))|0;
 $74 = $73 >>> 1;
 $75 = (($67) - ($74))|0;
 $76 = $75&65535;
 $77 = (($$0) + 2)|0;
 $78 = HEAP32[$0>>2]|0;
 $79 = (($78) + ($63<<1)|0);
 HEAP16[$79>>1] = $76;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $44;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $57;
  break;
 }
 default: {
  $80 = (__Z7median3IsET_S0_S0_S0_($29,$41,$46)|0);
  HEAP16[$11>>1] = $80;
 }
 }
 $81 = HEAP32[$1>>2]|0;
 $82 = ((($81)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 FUNCTION_TABLE_viiiiii[$83 & 15]($1,2,$0,$8,$9,$11);
 $84 = (($39) - ($40))|0;
 $85 = $84&65535;
 $86 = (($$0) + 3)|0;
 $87 = HEAP32[$0>>2]|0;
 $88 = (($87) + ($77<<1)|0);
 HEAP16[$88>>1] = $85;
 $89 = $90 << 16 >> 16;
 $91 = (($89) + ($48))|0;
 $92 = $91 >>> 1;
 $93 = (($39) - ($92))|0;
 $94 = $93&65535;
 $95 = $$0 | 4;
 $96 = HEAP32[$0>>2]|0;
 $97 = (($96) + ($86<<1)|0);
 HEAP16[$97>>1] = $94;
 $98 = (($52) + ($48))|0;
 $99 = $98 >>> 1;
 $100 = (($45) - ($99))|0;
 $101 = $100&65535;
 $102 = (($95) + 1)|0;
 $103 = HEAP32[$0>>2]|0;
 $104 = (($103) + ($95<<1)|0);
 HEAP16[$104>>1] = $101;
 $brmerge$demorgan = $24 & $27;
 if (!($brmerge$demorgan)) {
  $107 = $41;
  $106 = $107 << 16 >> 16;
  $108 = (($106) + ($52))|0;
  $109 = $108 >>> 1;
  $110 = (($40) - ($109))|0;
  $111 = $110&65535;
  $112 = (($95) + 2)|0;
  $113 = HEAP32[$0>>2]|0;
  $114 = (($113) + ($102<<1)|0);
  HEAP16[$114>>1] = $111;
  $115 = HEAP16[$11>>1]|0;
  $116 = HEAP32[$0>>2]|0;
  $117 = (($116) + ($112<<1)|0);
  HEAP16[$117>>1] = $115;
  $118 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($118|0);
 }
 $105 = (__ZNK5PlaneIsE8get_fastEjj($3,$22,$25)|0);
 $107 = $105;
 $106 = $107 << 16 >> 16;
 $108 = (($106) + ($52))|0;
 $109 = $108 >>> 1;
 $110 = (($40) - ($109))|0;
 $111 = $110&65535;
 $112 = (($95) + 2)|0;
 $113 = HEAP32[$0>>2]|0;
 $114 = (($113) + ($102<<1)|0);
 HEAP16[$114>>1] = $111;
 $115 = HEAP16[$11>>1]|0;
 $116 = HEAP32[$0>>2]|0;
 $117 = (($116) + ($112<<1)|0);
 HEAP16[$117>>1] = $115;
 $118 = HEAP16[$11>>1]|0;
 STACKTOP = sp;return ($118|0);
}
function __Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0 = 0, $$0142 = 0, $$not = 0, $$not144 = 0, $$not144149 = 0, $$not144151 = 0, $$not146 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge147 = 0, $sext = 0, $sext143 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $13 = HEAP32[$0>>2]|0;
 HEAP16[$13>>1] = $12;
 $14 = (__ZNK5ImageclEiijj($2,1,$5,$6,$7)|0);
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 2|0);
 HEAP16[$16>>1] = $14;
 $17 = (__ZNK5Image9numPlanesEv($2)|0);
 $18 = ($17|0)>(3);
 if ($18) {
  $19 = (__ZNK5ImageclEiijj($2,3,$5,$6,$7)|0);
  $20 = HEAP32[$0>>2]|0;
  $21 = ((($20)) + 4|0);
  HEAP16[$21>>1] = $19;
  $$0 = 3;
 } else {
  $$0 = 2;
 }
 $22 = (($6) + 1)|0;
 $23 = (__ZNK5Image4rowsEi($2,$5)|0);
 $24 = ($22>>>0)<($23>>>0);
 $25 = (($7) + 1)|0;
 $26 = (__ZNK5Image4colsEi($2,$5)|0);
 $27 = ($25>>>0)<($26>>>0);
 $28 = (($7) + -1)|0;
 $29 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$28)|0);
 $30 = ($6|0)!=(0);
 if ($30) {
  $31 = (($6) + -1)|0;
  $32 = (__ZNK5PlaneIsE8get_fastEjj($3,$31,$7)|0);
  $33 = (($6) + -1)|0;
  $34 = (__ZNK5PlaneIsE8get_fastEjj($3,$33,$28)|0);
  $$not = $30 ^ 1;
  $$not144 = $27 ^ 1;
  $brmerge = $$not | $$not144;
  if ($brmerge) {
   $$not144151 = $$not144;$45 = $32;$47 = $34;$52 = $32;
  } else {
   $35 = (__ZNK5PlaneIsE8get_fastEjj($3,$31,$25)|0);
   $$not144151 = $$not144;$45 = $32;$47 = $34;$52 = $35;
  }
 } else {
  $$not144149 = $27 ^ 1;
  $$not144151 = $$not144149;$45 = $29;$47 = $29;$52 = $29;
 }
 if ($24) {
  $36 = (__ZNK5PlaneIsE8get_fastEjj($3,$22,$28)|0);
  $89 = $36;
 } else {
  $89 = $29;
 }
 if ($27) {
  $37 = (__ZNK5PlaneIsE8get_fastEjj($3,$6,$25)|0);
  $40 = $37;
 } else {
  $40 = $45;
 }
 $38 = $29 << 16 >> 16;
 $39 = $40 << 16 >> 16;
 $41 = (($39) + ($38))|0;
 $42 = $41 >>> 1;
 $43 = $42&65535;
 $44 = $45 << 16 >> 16;
 $46 = $47 << 16 >> 16;
 $48 = (($38) - ($46))|0;
 $49 = (($48) + ($44))|0;
 $50 = $49&65535;
 $51 = $52 << 16 >> 16;
 $53 = (($44) - ($51))|0;
 $54 = (($53) + ($39))|0;
 $55 = $54&65535;
 $56 = (__Z7median3IsET_S0_S0_S0_($43,$50,$55)|0);
 $57 = $56 << 16 >> 16;
 $sext = $42 << 16;
 $58 = $sext >> 16;
 $59 = ($57|0)==($58|0);
 $sext143 = $49 << 16;
 $60 = $sext143 >> 16;
 $61 = ($57|0)==($60|0);
 $$ = $61 ? 1 : 2;
 $$0142 = $59 ? 0 : $$;
 $62 = (($$0) + 1)|0;
 $63 = HEAP32[$0>>2]|0;
 $64 = (($63) + ($$0<<1)|0);
 HEAP16[$64>>1] = $$0142;
 $65 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$7)|0);
 $66 = $65&65535;
 $67 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$28)|0);
 $68 = $67 << 16 >> 16;
 $69 = $27 ? $25 : $28;
 $70 = (__ZNK5PlaneIhE8get_fastEjj($4,$6,$69)|0);
 $71 = $70 << 16 >> 16;
 $72 = (($71) + ($68))|0;
 $73 = $72 >>> 1;
 $74 = (($66) - ($73))|0;
 $75 = $74&65535;
 $76 = (($$0) + 2)|0;
 $77 = HEAP32[$0>>2]|0;
 $78 = (($77) + ($62<<1)|0);
 HEAP16[$78>>1] = $75;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $43;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $56;
  break;
 }
 default: {
  $79 = (__Z7median3IsET_S0_S0_S0_($45,$29,$40)|0);
  HEAP16[$11>>1] = $79;
 }
 }
 $80 = HEAP32[$1>>2]|0;
 $81 = ((($80)) + 24|0);
 $82 = HEAP32[$81>>2]|0;
 FUNCTION_TABLE_viiiiii[$82 & 15]($1,2,$0,$8,$9,$11);
 $83 = (($38) - ($39))|0;
 $84 = $83&65535;
 $85 = (($$0) + 3)|0;
 $86 = HEAP32[$0>>2]|0;
 $87 = (($86) + ($76<<1)|0);
 HEAP16[$87>>1] = $84;
 $88 = $89 << 16 >> 16;
 $90 = (($88) + ($46))|0;
 $91 = $90 >>> 1;
 $92 = (($38) - ($91))|0;
 $93 = $92&65535;
 $94 = $$0 | 4;
 $95 = HEAP32[$0>>2]|0;
 $96 = (($95) + ($85<<1)|0);
 HEAP16[$96>>1] = $93;
 $97 = (($51) + ($46))|0;
 $98 = $97 >>> 1;
 $99 = (($44) - ($98))|0;
 $100 = $99&65535;
 $101 = (($94) + 1)|0;
 $102 = HEAP32[$0>>2]|0;
 $103 = (($102) + ($94<<1)|0);
 HEAP16[$103>>1] = $100;
 $$not146 = $24 ^ 1;
 $brmerge147 = $$not144151 | $$not146;
 if ($brmerge147) {
  $106 = $40;
  $105 = $106 << 16 >> 16;
  $107 = (($105) + ($51))|0;
  $108 = $107 >>> 1;
  $109 = (($39) - ($108))|0;
  $110 = $109&65535;
  $111 = (($94) + 2)|0;
  $112 = HEAP32[$0>>2]|0;
  $113 = (($112) + ($101<<1)|0);
  HEAP16[$113>>1] = $110;
  $114 = HEAP16[$11>>1]|0;
  $115 = HEAP32[$0>>2]|0;
  $116 = (($115) + ($111<<1)|0);
  HEAP16[$116>>1] = $114;
  $117 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($117|0);
 }
 $104 = (__ZNK5PlaneIsE8get_fastEjj($3,$22,$25)|0);
 $106 = $104;
 $105 = $106 << 16 >> 16;
 $107 = (($105) + ($51))|0;
 $108 = $107 >>> 1;
 $109 = (($39) - ($108))|0;
 $110 = $109&65535;
 $111 = (($94) + 2)|0;
 $112 = HEAP32[$0>>2]|0;
 $113 = (($112) + ($101<<1)|0);
 HEAP16[$113>>1] = $110;
 $114 = HEAP16[$11>>1]|0;
 $115 = HEAP32[$0>>2]|0;
 $116 = (($115) + ($111<<1)|0);
 HEAP16[$116>>1] = $114;
 $117 = HEAP16[$11>>1]|0;
 STACKTOP = sp;return ($117|0);
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0131 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (($6) + 1)|0;
 $13 = (__ZNK5Image4rowsEi($2,$5)|0);
 $14 = ($12>>>0)<($13>>>0);
 $15 = (($7) + 1)|0;
 $16 = (__ZNK5Image4colsEi($2,$5)|0);
 $17 = ($15>>>0)<($16>>>0);
 $18 = (($6) + -1)|0;
 $19 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$7)|0);
 $20 = ($7|0)!=(0);
 if ($20) {
  $21 = (($7) + -1)|0;
  $22 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$21)|0);
  $23 = (($7) + -1)|0;
  $24 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$23)|0);
  $36 = $22;$39 = $24;
 } else {
  $36 = $19;$39 = $19;
 }
 if ($17) {
  $25 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$15)|0);
  $63 = $25;
 } else {
  $63 = $19;
 }
 $or$cond = $20 & $14;
 if ($or$cond) {
  $26 = (($7) + -1)|0;
  $27 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$26)|0);
  $43 = $27;
 } else {
  $43 = $36;
 }
 if ($14) {
  $28 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$7)|0);
  $31 = $28;
 } else {
  $31 = $36;
 }
 $29 = $19 << 16 >> 16;
 $30 = $31 << 16 >> 16;
 $32 = (($30) + ($29))|0;
 $33 = $32 >>> 1;
 $34 = $33&65535;
 $35 = $36 << 16 >> 16;
 $37 = (($35) + ($29))|0;
 $38 = $39 << 16 >> 16;
 $40 = (($37) - ($38))|0;
 $41 = $40&65535;
 $42 = $43 << 16 >> 16;
 $44 = (($35) - ($42))|0;
 $45 = (($44) + ($30))|0;
 $46 = $45&65535;
 $47 = (__Z7median3IsET_S0_S0_S0_($34,$41,$46)|0);
 $48 = $47 << 16 >> 16;
 $sext = $33 << 16;
 $49 = $sext >> 16;
 $50 = ($48|0)==($49|0);
 $sext132 = $40 << 16;
 $51 = $sext132 >> 16;
 $52 = ($48|0)==($51|0);
 $$ = $52 ? 1 : 2;
 $$0131 = $50 ? 0 : $$;
 $53 = HEAP32[$0>>2]|0;
 HEAP16[$53>>1] = $$0131;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $34;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $47;
  break;
 }
 default: {
  $54 = (__Z7median3IsET_S0_S0_S0_($19,$31,$36)|0);
  HEAP16[$11>>1] = $54;
 }
 }
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + 24|0);
 $57 = HEAP32[$56>>2]|0;
 FUNCTION_TABLE_viiiiii[$57 & 15]($1,3,$0,$8,$9,$11);
 $58 = (($29) - ($30))|0;
 $59 = $58&65535;
 $60 = HEAP32[$0>>2]|0;
 $61 = ((($60)) + 2|0);
 HEAP16[$61>>1] = $59;
 $62 = $63 << 16 >> 16;
 $64 = (($62) + ($38))|0;
 $65 = $64 >>> 1;
 $66 = (($29) - ($65))|0;
 $67 = $66&65535;
 $68 = HEAP32[$0>>2]|0;
 $69 = ((($68)) + 4|0);
 HEAP16[$69>>1] = $67;
 $70 = (($42) + ($38))|0;
 $71 = $70 >>> 1;
 $72 = (($35) - ($71))|0;
 $73 = $72&65535;
 $74 = HEAP32[$0>>2]|0;
 $75 = ((($74)) + 6|0);
 HEAP16[$75>>1] = $73;
 $brmerge$demorgan = $14 & $17;
 if ($brmerge$demorgan) {
  $76 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$15)|0);
  $78 = $76;
 } else {
  $78 = $31;
 }
 $77 = $78 << 16 >> 16;
 $79 = (($77) + ($42))|0;
 $80 = $79 >>> 1;
 $81 = (($30) - ($80))|0;
 $82 = $81&65535;
 $83 = HEAP32[$0>>2]|0;
 $84 = ((($83)) + 8|0);
 HEAP16[$84>>1] = $82;
 $85 = HEAP16[$11>>1]|0;
 $86 = HEAP32[$0>>2]|0;
 $87 = ((($86)) + 10|0);
 HEAP16[$87>>1] = $85;
 $88 = ($6>>>0)>(1);
 if ($88) {
  $89 = (($6) + -2)|0;
  $90 = (__ZNK5PlaneIhE8get_fastEjj($3,$89,$7)|0);
  $91 = $90&65535;
  $92 = (($91) - ($29))|0;
  $93 = $92&65535;
  $94 = HEAP32[$0>>2]|0;
  $95 = ((($94)) + 12|0);
  HEAP16[$95>>1] = $93;
 } else {
  $96 = HEAP32[$0>>2]|0;
  $97 = ((($96)) + 12|0);
  HEAP16[$97>>1] = 0;
 }
 $98 = ($7>>>0)>(1);
 if ($98) {
  $99 = (($7) + -2)|0;
  $100 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$99)|0);
  $101 = $100&65535;
  $102 = (($101) - ($35))|0;
  $103 = $102&65535;
  $104 = HEAP32[$0>>2]|0;
  $105 = ((($104)) + 14|0);
  HEAP16[$105>>1] = $103;
  $108 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($108|0);
 } else {
  $106 = HEAP32[$0>>2]|0;
  $107 = ((($106)) + 14|0);
  HEAP16[$107>>1] = 0;
  $108 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($108|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0130 = 0, $$not = 0, $$not132 = 0, $$not132137 = 0, $$not132139 = 0, $$not134 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge135 = 0, $sext = 0, $sext131 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (($6) + 1)|0;
 $13 = (__ZNK5Image4rowsEi($2,$5)|0);
 $14 = ($12>>>0)<($13>>>0);
 $15 = (($7) + 1)|0;
 $16 = (__ZNK5Image4colsEi($2,$5)|0);
 $17 = ($15>>>0)<($16>>>0);
 $18 = (($7) + -1)|0;
 $19 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$18)|0);
 $20 = ($6|0)!=(0);
 if ($20) {
  $21 = (($6) + -1)|0;
  $22 = (__ZNK5PlaneIhE8get_fastEjj($3,$21,$7)|0);
  $23 = (($6) + -1)|0;
  $24 = (__ZNK5PlaneIhE8get_fastEjj($3,$23,$18)|0);
  $$not = $20 ^ 1;
  $$not132 = $17 ^ 1;
  $brmerge = $$not | $$not132;
  if ($brmerge) {
   $$not132139 = $$not132;$35 = $22;$37 = $24;$42 = $22;
  } else {
   $25 = (__ZNK5PlaneIhE8get_fastEjj($3,$21,$15)|0);
   $$not132139 = $$not132;$35 = $22;$37 = $24;$42 = $25;
  }
 } else {
  $$not132137 = $17 ^ 1;
  $$not132139 = $$not132137;$35 = $19;$37 = $19;$42 = $19;
 }
 if ($14) {
  $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$18)|0);
  $62 = $26;
 } else {
  $62 = $19;
 }
 if ($17) {
  $27 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$15)|0);
  $30 = $27;
 } else {
  $30 = $35;
 }
 $28 = $19 << 16 >> 16;
 $29 = $30 << 16 >> 16;
 $31 = (($29) + ($28))|0;
 $32 = $31 >>> 1;
 $33 = $32&65535;
 $34 = $35 << 16 >> 16;
 $36 = $37 << 16 >> 16;
 $38 = (($28) - ($36))|0;
 $39 = (($38) + ($34))|0;
 $40 = $39&65535;
 $41 = $42 << 16 >> 16;
 $43 = (($34) - ($41))|0;
 $44 = (($43) + ($29))|0;
 $45 = $44&65535;
 $46 = (__Z7median3IsET_S0_S0_S0_($33,$40,$45)|0);
 $47 = $46 << 16 >> 16;
 $sext = $32 << 16;
 $48 = $sext >> 16;
 $49 = ($47|0)==($48|0);
 $sext131 = $39 << 16;
 $50 = $sext131 >> 16;
 $51 = ($47|0)==($50|0);
 $$ = $51 ? 1 : 2;
 $$0130 = $49 ? 0 : $$;
 $52 = HEAP32[$0>>2]|0;
 HEAP16[$52>>1] = $$0130;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $33;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $46;
  break;
 }
 default: {
  $53 = (__Z7median3IsET_S0_S0_S0_($35,$19,$30)|0);
  HEAP16[$11>>1] = $53;
 }
 }
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($54)) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 FUNCTION_TABLE_viiiiii[$56 & 15]($1,3,$0,$8,$9,$11);
 $57 = (($28) - ($29))|0;
 $58 = $57&65535;
 $59 = HEAP32[$0>>2]|0;
 $60 = ((($59)) + 2|0);
 HEAP16[$60>>1] = $58;
 $61 = $62 << 16 >> 16;
 $63 = (($61) + ($36))|0;
 $64 = $63 >>> 1;
 $65 = (($28) - ($64))|0;
 $66 = $65&65535;
 $67 = HEAP32[$0>>2]|0;
 $68 = ((($67)) + 4|0);
 HEAP16[$68>>1] = $66;
 $69 = (($41) + ($36))|0;
 $70 = $69 >>> 1;
 $71 = (($34) - ($70))|0;
 $72 = $71&65535;
 $73 = HEAP32[$0>>2]|0;
 $74 = ((($73)) + 6|0);
 HEAP16[$74>>1] = $72;
 $$not134 = $14 ^ 1;
 $brmerge135 = $$not132139 | $$not134;
 if ($brmerge135) {
  $77 = $30;
 } else {
  $75 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$15)|0);
  $77 = $75;
 }
 $76 = $77 << 16 >> 16;
 $78 = (($76) + ($41))|0;
 $79 = $78 >>> 1;
 $80 = (($29) - ($79))|0;
 $81 = $80&65535;
 $82 = HEAP32[$0>>2]|0;
 $83 = ((($82)) + 8|0);
 HEAP16[$83>>1] = $81;
 $84 = HEAP16[$11>>1]|0;
 $85 = HEAP32[$0>>2]|0;
 $86 = ((($85)) + 10|0);
 HEAP16[$86>>1] = $84;
 $87 = ($6>>>0)>(1);
 if ($87) {
  $88 = (($6) + -2)|0;
  $89 = (__ZNK5PlaneIhE8get_fastEjj($3,$88,$7)|0);
  $90 = $89&65535;
  $91 = (($90) - ($34))|0;
  $92 = $91&65535;
  $93 = HEAP32[$0>>2]|0;
  $94 = ((($93)) + 12|0);
  HEAP16[$94>>1] = $92;
 } else {
  $95 = HEAP32[$0>>2]|0;
  $96 = ((($95)) + 12|0);
  HEAP16[$96>>1] = 0;
 }
 $97 = ($7>>>0)>(1);
 if ($97) {
  $98 = (($7) + -2)|0;
  $99 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$98)|0);
  $100 = $99&65535;
  $101 = (($100) - ($28))|0;
  $102 = $101&65535;
  $103 = HEAP32[$0>>2]|0;
  $104 = ((($103)) + 14|0);
  HEAP16[$104>>1] = $102;
  $107 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($107|0);
 } else {
  $105 = HEAP32[$0>>2]|0;
  $106 = ((($105)) + 14|0);
  HEAP16[$106>>1] = 0;
  $107 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi4E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0131 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $brmerge$demorgan = 0, $or$cond = 0, $sext = 0, $sext132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (($6) + 1)|0;
 $13 = (__ZNK5Image4rowsEi($2,$5)|0);
 $14 = ($12>>>0)<($13>>>0);
 $15 = (($7) + 1)|0;
 $16 = (__ZNK5Image4colsEi($2,$5)|0);
 $17 = ($15>>>0)<($16>>>0);
 $18 = (($6) + -1)|0;
 $19 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$7)|0);
 $20 = ($7|0)!=(0);
 if ($20) {
  $21 = (($7) + -1)|0;
  $22 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$21)|0);
  $23 = (($7) + -1)|0;
  $24 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$23)|0);
  $36 = $22;$39 = $24;
 } else {
  $36 = $19;$39 = $19;
 }
 if ($17) {
  $25 = (__ZNK5PlaneIhE8get_fastEjj($3,$18,$15)|0);
  $63 = $25;
 } else {
  $63 = $19;
 }
 $or$cond = $20 & $14;
 if ($or$cond) {
  $26 = (($7) + -1)|0;
  $27 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$26)|0);
  $43 = $27;
 } else {
  $43 = $36;
 }
 if ($14) {
  $28 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$7)|0);
  $31 = $28;
 } else {
  $31 = $36;
 }
 $29 = $19 << 16 >> 16;
 $30 = $31 << 16 >> 16;
 $32 = (($30) + ($29))|0;
 $33 = $32 >>> 1;
 $34 = $33&65535;
 $35 = $36 << 16 >> 16;
 $37 = (($35) + ($29))|0;
 $38 = $39 << 16 >> 16;
 $40 = (($37) - ($38))|0;
 $41 = $40&65535;
 $42 = $43 << 16 >> 16;
 $44 = (($35) - ($42))|0;
 $45 = (($44) + ($30))|0;
 $46 = $45&65535;
 $47 = (__Z7median3IsET_S0_S0_S0_($34,$41,$46)|0);
 $48 = $47 << 16 >> 16;
 $sext = $33 << 16;
 $49 = $sext >> 16;
 $50 = ($48|0)==($49|0);
 $sext132 = $40 << 16;
 $51 = $sext132 >> 16;
 $52 = ($48|0)==($51|0);
 $$ = $52 ? 1 : 2;
 $$0131 = $50 ? 0 : $$;
 $53 = HEAP32[$0>>2]|0;
 HEAP16[$53>>1] = $$0131;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $34;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $47;
  break;
 }
 default: {
  $54 = (__Z7median3IsET_S0_S0_S0_($19,$31,$36)|0);
  HEAP16[$11>>1] = $54;
 }
 }
 $55 = HEAP32[$1>>2]|0;
 $56 = ((($55)) + 24|0);
 $57 = HEAP32[$56>>2]|0;
 FUNCTION_TABLE_viiiiii[$57 & 15]($1,4,$0,$8,$9,$11);
 $58 = (($29) - ($30))|0;
 $59 = $58&65535;
 $60 = HEAP32[$0>>2]|0;
 $61 = ((($60)) + 2|0);
 HEAP16[$61>>1] = $59;
 $62 = $63 << 16 >> 16;
 $64 = (($62) + ($38))|0;
 $65 = $64 >>> 1;
 $66 = (($29) - ($65))|0;
 $67 = $66&65535;
 $68 = HEAP32[$0>>2]|0;
 $69 = ((($68)) + 4|0);
 HEAP16[$69>>1] = $67;
 $70 = (($42) + ($38))|0;
 $71 = $70 >>> 1;
 $72 = (($35) - ($71))|0;
 $73 = $72&65535;
 $74 = HEAP32[$0>>2]|0;
 $75 = ((($74)) + 6|0);
 HEAP16[$75>>1] = $73;
 $brmerge$demorgan = $14 & $17;
 if ($brmerge$demorgan) {
  $76 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$15)|0);
  $78 = $76;
 } else {
  $78 = $31;
 }
 $77 = $78 << 16 >> 16;
 $79 = (($77) + ($42))|0;
 $80 = $79 >>> 1;
 $81 = (($30) - ($80))|0;
 $82 = $81&65535;
 $83 = HEAP32[$0>>2]|0;
 $84 = ((($83)) + 8|0);
 HEAP16[$84>>1] = $82;
 $85 = HEAP16[$11>>1]|0;
 $86 = HEAP32[$0>>2]|0;
 $87 = ((($86)) + 10|0);
 HEAP16[$87>>1] = $85;
 $88 = ($6>>>0)>(1);
 if ($88) {
  $89 = (($6) + -2)|0;
  $90 = (__ZNK5PlaneIhE8get_fastEjj($3,$89,$7)|0);
  $91 = $90&65535;
  $92 = (($91) - ($29))|0;
  $93 = $92&65535;
  $94 = HEAP32[$0>>2]|0;
  $95 = ((($94)) + 12|0);
  HEAP16[$95>>1] = $93;
 } else {
  $96 = HEAP32[$0>>2]|0;
  $97 = ((($96)) + 12|0);
  HEAP16[$97>>1] = 0;
 }
 $98 = ($7>>>0)>(1);
 if ($98) {
  $99 = (($7) + -2)|0;
  $100 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$99)|0);
  $101 = $100&65535;
  $102 = (($101) - ($35))|0;
  $103 = $102&65535;
  $104 = HEAP32[$0>>2]|0;
  $105 = ((($104)) + 14|0);
  HEAP16[$105>>1] = $103;
  $108 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($108|0);
 } else {
  $106 = HEAP32[$0>>2]|0;
  $107 = ((($106)) + 14|0);
  HEAP16[$107>>1] = 0;
  $108 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($108|0);
 }
 return (0)|0;
}
function __Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi4E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$ = 0, $$0130 = 0, $$not = 0, $$not132 = 0, $$not132137 = 0, $$not132139 = 0, $$not134 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge135 = 0, $sext = 0, $sext131 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $11 = sp;
 $12 = (($6) + 1)|0;
 $13 = (__ZNK5Image4rowsEi($2,$5)|0);
 $14 = ($12>>>0)<($13>>>0);
 $15 = (($7) + 1)|0;
 $16 = (__ZNK5Image4colsEi($2,$5)|0);
 $17 = ($15>>>0)<($16>>>0);
 $18 = (($7) + -1)|0;
 $19 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$18)|0);
 $20 = ($6|0)!=(0);
 if ($20) {
  $21 = (($6) + -1)|0;
  $22 = (__ZNK5PlaneIhE8get_fastEjj($3,$21,$7)|0);
  $23 = (($6) + -1)|0;
  $24 = (__ZNK5PlaneIhE8get_fastEjj($3,$23,$18)|0);
  $$not = $20 ^ 1;
  $$not132 = $17 ^ 1;
  $brmerge = $$not | $$not132;
  if ($brmerge) {
   $$not132139 = $$not132;$35 = $22;$37 = $24;$42 = $22;
  } else {
   $25 = (__ZNK5PlaneIhE8get_fastEjj($3,$21,$15)|0);
   $$not132139 = $$not132;$35 = $22;$37 = $24;$42 = $25;
  }
 } else {
  $$not132137 = $17 ^ 1;
  $$not132139 = $$not132137;$35 = $19;$37 = $19;$42 = $19;
 }
 if ($14) {
  $26 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$18)|0);
  $62 = $26;
 } else {
  $62 = $19;
 }
 if ($17) {
  $27 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$15)|0);
  $30 = $27;
 } else {
  $30 = $35;
 }
 $28 = $19 << 16 >> 16;
 $29 = $30 << 16 >> 16;
 $31 = (($29) + ($28))|0;
 $32 = $31 >>> 1;
 $33 = $32&65535;
 $34 = $35 << 16 >> 16;
 $36 = $37 << 16 >> 16;
 $38 = (($28) - ($36))|0;
 $39 = (($38) + ($34))|0;
 $40 = $39&65535;
 $41 = $42 << 16 >> 16;
 $43 = (($34) - ($41))|0;
 $44 = (($43) + ($29))|0;
 $45 = $44&65535;
 $46 = (__Z7median3IsET_S0_S0_S0_($33,$40,$45)|0);
 $47 = $46 << 16 >> 16;
 $sext = $32 << 16;
 $48 = $sext >> 16;
 $49 = ($47|0)==($48|0);
 $sext131 = $39 << 16;
 $50 = $sext131 >> 16;
 $51 = ($47|0)==($50|0);
 $$ = $51 ? 1 : 2;
 $$0130 = $49 ? 0 : $$;
 $52 = HEAP32[$0>>2]|0;
 HEAP16[$52>>1] = $$0130;
 switch ($10|0) {
 case 0:  {
  HEAP16[$11>>1] = $33;
  break;
 }
 case 1:  {
  HEAP16[$11>>1] = $46;
  break;
 }
 default: {
  $53 = (__Z7median3IsET_S0_S0_S0_($35,$19,$30)|0);
  HEAP16[$11>>1] = $53;
 }
 }
 $54 = HEAP32[$1>>2]|0;
 $55 = ((($54)) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 FUNCTION_TABLE_viiiiii[$56 & 15]($1,4,$0,$8,$9,$11);
 $57 = (($28) - ($29))|0;
 $58 = $57&65535;
 $59 = HEAP32[$0>>2]|0;
 $60 = ((($59)) + 2|0);
 HEAP16[$60>>1] = $58;
 $61 = $62 << 16 >> 16;
 $63 = (($61) + ($36))|0;
 $64 = $63 >>> 1;
 $65 = (($28) - ($64))|0;
 $66 = $65&65535;
 $67 = HEAP32[$0>>2]|0;
 $68 = ((($67)) + 4|0);
 HEAP16[$68>>1] = $66;
 $69 = (($41) + ($36))|0;
 $70 = $69 >>> 1;
 $71 = (($34) - ($70))|0;
 $72 = $71&65535;
 $73 = HEAP32[$0>>2]|0;
 $74 = ((($73)) + 6|0);
 HEAP16[$74>>1] = $72;
 $$not134 = $14 ^ 1;
 $brmerge135 = $$not132139 | $$not134;
 if ($brmerge135) {
  $77 = $30;
 } else {
  $75 = (__ZNK5PlaneIhE8get_fastEjj($3,$12,$15)|0);
  $77 = $75;
 }
 $76 = $77 << 16 >> 16;
 $78 = (($76) + ($41))|0;
 $79 = $78 >>> 1;
 $80 = (($29) - ($79))|0;
 $81 = $80&65535;
 $82 = HEAP32[$0>>2]|0;
 $83 = ((($82)) + 8|0);
 HEAP16[$83>>1] = $81;
 $84 = HEAP16[$11>>1]|0;
 $85 = HEAP32[$0>>2]|0;
 $86 = ((($85)) + 10|0);
 HEAP16[$86>>1] = $84;
 $87 = ($6>>>0)>(1);
 if ($87) {
  $88 = (($6) + -2)|0;
  $89 = (__ZNK5PlaneIhE8get_fastEjj($3,$88,$7)|0);
  $90 = $89&65535;
  $91 = (($90) - ($34))|0;
  $92 = $91&65535;
  $93 = HEAP32[$0>>2]|0;
  $94 = ((($93)) + 12|0);
  HEAP16[$94>>1] = $92;
 } else {
  $95 = HEAP32[$0>>2]|0;
  $96 = ((($95)) + 12|0);
  HEAP16[$96>>1] = 0;
 }
 $97 = ($7>>>0)>(1);
 if ($97) {
  $98 = (($7) + -2)|0;
  $99 = (__ZNK5PlaneIhE8get_fastEjj($3,$6,$98)|0);
  $100 = $99&65535;
  $101 = (($100) - ($28))|0;
  $102 = $101&65535;
  $103 = HEAP32[$0>>2]|0;
  $104 = ((($103)) + 14|0);
  HEAP16[$104>>1] = $102;
  $107 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($107|0);
 } else {
  $105 = HEAP32[$0>>2]|0;
  $106 = ((($105)) + 14|0);
  HEAP16[$106>>1] = 0;
  $107 = HEAP16[$11>>1]|0;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function __ZNK5Image4rowsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK5Image4rowsEv($0)|0);
 $3 = (($2) + -1)|0;
 $4 = (__ZN5Image17zoom_rowpixelsizeEi($1)|0);
 $5 = (($3>>>0) / ($4>>>0))&-1;
 $6 = (($5) + 1)|0;
 return ($6|0);
}
function __ZNK5Image4colsEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK5Image4colsEv($0)|0);
 $3 = (($2) + -1)|0;
 $4 = (__ZN5Image17zoom_colpixelsizeEi($1)|0);
 $5 = (($3>>>0) / ($4>>>0))&-1;
 $6 = (($5) + 1)|0;
 return ($6|0);
}
function __ZN5Image17zoom_colpixelsizeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0|0) / 2)&-1;
 $2 = 1 << $1;
 return ($2|0);
}
function __ZN5Image17zoom_rowpixelsizeEi($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 1)|0;
 $2 = (($1|0) / 2)&-1;
 $3 = 1 << $2;
 return ($3|0);
}
function __ZNK5ImageclEiijj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiii[$9 & 7]($6,$2,$3,$4)|0);
 return ($10|0);
}
function __Z16plane_zoomlevelsRK5Imageii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNK5Image9numPlanesEv($0)|0);
 $4 = (($1) + 1)|0;
 $5 = (($4) - ($2))|0;
 $6 = Math_imul($3, $5)|0;
 return ($6|0);
}
function __Z15plane_zoomlevelRK5ImageiiiPK11ColorRanges($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$0$$1 = 0, $$044$lcssa = 0, $$04468 = 0, $$04567 = 0, $$063 = 0, $$1$lcssa = 0, $$162 = 0, $$3$lcssa = 0, $$364 = 0, $$sroa$051$073 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp + 12|0;
 $7 = sp;
 ;HEAP32[$6>>2]=HEAP32[2460>>2]|0;HEAP32[$6+4>>2]=HEAP32[2460+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[2460+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[2460+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[2460+16>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$10 & 63]($5,0)|0);
 $12 = HEAP32[$5>>2]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iii[$14 & 63]($5,0)|0);
 $16 = ($11<<16>>16)<($15<<16>>16);
 if (!($16)) {
  $17 = ((($6)) + 4|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($6)) + 8|0);
  HEAP32[$18>>2] = 1;
 }
 $19 = (__ZNK5Image9numPlanesEv($1)|0);
 $20 = ($19|0)>(5);
 if ($20) {
  $21 = (__ZNK5Image9numPlanesEv($1)|0);
  $22 = (($4|0) % ($21|0))&-1;
  $23 = (__ZNK5Image9numPlanesEv($1)|0);
  $24 = (($4|0) / ($23|0))&-1;
  $25 = (($2) - ($24))|0;
  HEAP32[$0>>2] = $22;
  $26 = ((($0)) + 4|0);
  HEAP32[$26>>2] = $25;
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2Ej($7,$19);
 $27 = HEAP32[$7>>2]|0;
 $28 = ((($7)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if (!($30)) {
  $31 = (($2) + 1)|0;
  $$sroa$051$073 = $27;
  while(1) {
   HEAP32[$$sroa$051$073>>2] = $31;
   $38 = ((($$sroa$051$073)) + 4|0);
   $39 = ($38|0)==($29|0);
   if ($39) {
    break;
   } else {
    $$sroa$051$073 = $38;
   }
  }
 }
 $32 = ($19|0)>(3);
 $$ = $32 ? 3 : 0;
 $33 = ($19|0)>(4);
 $$$ = $33 ? 4 : $$;
 $34 = ($4|0)>(-1);
 L13: do {
  if ($34) {
   $35 = HEAP32[$7>>2]|0;
   $36 = ($19|0)>(0);
   $37 = (($35) + ($$$<<2)|0);
   $$04468 = $$$;$$04567 = $4;
   while(1) {
    $41 = (($35) + ($$04468<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + -1)|0;
    HEAP32[$41>>2] = $43;
    $44 = (($$04567) + -1)|0;
    $45 = ($$04567|0)==(0);
    if ($45) {
     $$044$lcssa = $$04468;
     break L13;
    }
    if ($36) {
     $46 = HEAP32[$37>>2]|0;
     $$063 = 0;$$162 = $$$;
     while(1) {
      $50 = (($35) + ($$063<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($6) + ($$063<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + ($46))|0;
      $55 = ($51|0)>($54|0);
      $$0$$1 = $55 ? $$063 : $$162;
      $56 = (($$063) + 1)|0;
      $exitcond = ($56|0)==($19|0);
      if ($exitcond) {
       $$1$lcssa = $$0$$1;
       break;
      } else {
       $$063 = $56;$$162 = $$0$$1;
      }
     }
    } else {
     $$1$lcssa = $$$;
    }
    $47 = (($35) + ($$1$lcssa<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)>($3|0);
    if ($49) {
     $$3$lcssa = $$1$lcssa;
    } else {
     $$364 = $$1$lcssa;
     while(1) {
      $57 = (($$364) + 1)|0;
      $58 = (($57|0) % ($19|0))&-1;
      $59 = (($35) + ($58<<2)|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)>($3|0);
      if ($61) {
       $$3$lcssa = $58;
       break;
      } else {
       $$364 = $58;
      }
     }
    }
    $40 = ($$04567|0)>(0);
    if ($40) {
     $$04468 = $$3$lcssa;$$04567 = $44;
    } else {
     $$044$lcssa = $$3$lcssa;
     break;
    }
   }
  } else {
   $$044$lcssa = $$$;
  }
 } while(0);
 $62 = HEAP32[$7>>2]|0;
 $63 = (($62) + ($$044$lcssa<<2)|0);
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$0>>2] = $$044$lcssa;
 $65 = ((($0)) + 4|0);
 HEAP32[$65>>2] = $64;
 __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEEC2Ej($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj($0,$1);
 __ZNSt3__26vectorIiNS_9allocatorIiEEE18__construct_at_endEj($0,$1);
 return;
}
function __Z11flif_decodeI8BufferIOEbRT_RNSt3__26vectorI5ImageNS3_9allocatorIS5_EEEEPFjixEiS9_R12flif_optionsR16metadata_optionsP9FLIF_INFO($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $$$0731 = 0, $$$0738 = 0, $$0641973 = 0, $$0643 = 0, $$0646 = 0, $$0647 = 0, $$0648$off0 = 0, $$0649$off0 = 0, $$0650 = 0, $$0717857863866 = 0, $$0718 = 0, $$0719 = 0, $$0719$ = 0, $$0722992 = 0, $$0723994 = 0, $$0724996 = 0, $$0725998 = 0, $$0726$off0872$ph = 0, $$0726$off0872$ph1038 = 0;
 var $$07271000 = 0, $$0728 = 0, $$0729 = 0, $$0730 = 0, $$0731 = 0, $$0733$lcssa = 0, $$07331015 = 0, $$07351014 = 0, $$0736 = 0, $$0736$$0733 = 0, $$0737$off0 = 0, $$0738$lcssa = 0, $$07381008 = 0, $$0740970 = 0, $$0741 = 0, $$0743 = 0, $$07491012 = 0, $$0750 = 0, $$0971 = 0, $$12 = 0;
 var $$13 = 0, $$16 = 0, $$1644 = 0, $$17 = 0, $$1716 = 0, $$1742 = 0, $$1744 = 0, $$1747 = 0, $$1751 = 0, $$21 = 0, $$22 = 0, $$23 = 0, $$2645 = 0, $$2721 = 0, $$2745 = 0, $$2748 = 0, $$4655 = 0, $$5656 = 0, $$758 = 0, $$760 = 0;
 var $$769 = 0, $$cast = 0, $$cast$i = 0, $$cast$i806 = 0, $$cast$i808 = 0, $$cast$i809 = 0, $$cast$i814 = 0, $$cast$i816 = 0, $$cast873 = 0, $$lcssa967 = 0, $$lobit = 0, $$lobit$not = 0, $$not = 0, $$off752 = 0, $$off755 = 0, $$off756 = 0, $$sroa$0822$0976 = 0, $$sroa$0829$0980 = 0, $$sroa$0836$0988 = 0, $$sroa$0844$01003 = 0;
 var $$sroa$0851$01007 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
 var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
 var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = +0, $733 = +0, $734 = 0, $735 = 0, $736 = +0, $737 = +0, $738 = +0, $739 = +0, $74 = 0, $740 = +0;
 var $741 = 0, $742 = 0, $743 = +0, $744 = +0, $745 = +0, $746 = +0, $747 = 0, $748 = 0, $749 = +0, $75 = 0, $750 = +0, $751 = +0, $752 = +0, $753 = +0, $754 = 0, $755 = 0, $756 = +0, $757 = +0, $758 = 0, $759 = 0;
 var $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0;
 var $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0;
 var $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0;
 var $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0;
 var $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0;
 var $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0;
 var $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0;
 var $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0;
 var $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0;
 var $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0;
 var $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0;
 var $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0;
 var $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0;
 var $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge = 0, $brmerge766 = 0, $cond4 = 0, $exitcond = 0, $exitcond1037 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond1021 = 0, $or$cond22$not = 0, $or$cond28 = 0, $or$cond32 = 0, $or$cond36 = 0, $or$cond40 = 0;
 var $or$cond42 = 0, $or$cond44 = 0, $or$cond46 = 0, $or$cond48$not = 0, $or$cond50 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i810 = 0, $scevgep4$i$i$i815 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer106 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer115 = 0, $vararg_buffer119 = 0, $vararg_buffer121 = 0, $vararg_buffer123 = 0;
 var $vararg_buffer125 = 0, $vararg_buffer127 = 0, $vararg_buffer13 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer136 = 0, $vararg_buffer138 = 0, $vararg_buffer141 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer15 = 0, $vararg_buffer153 = 0, $vararg_buffer158 = 0, $vararg_buffer162 = 0, $vararg_buffer164 = 0, $vararg_buffer166 = 0, $vararg_buffer17 = 0, $vararg_buffer173 = 0, $vararg_buffer181 = 0;
 var $vararg_buffer183 = 0, $vararg_buffer185 = 0, $vararg_buffer188 = 0, $vararg_buffer19 = 0, $vararg_buffer191 = 0, $vararg_buffer195 = 0, $vararg_buffer197 = 0, $vararg_buffer199 = 0, $vararg_buffer201 = 0, $vararg_buffer203 = 0, $vararg_buffer205 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0;
 var $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer98 = 0, $vararg_ptr111 = 0, $vararg_ptr112 = 0, $vararg_ptr113 = 0, $vararg_ptr114 = 0, $vararg_ptr118 = 0, $vararg_ptr151 = 0, $vararg_ptr152 = 0, $vararg_ptr156 = 0, $vararg_ptr157 = 0, $vararg_ptr161 = 0, $vararg_ptr169 = 0, $vararg_ptr170 = 0, $vararg_ptr171 = 0, $vararg_ptr172 = 0;
 var $vararg_ptr176 = 0, $vararg_ptr177 = 0, $vararg_ptr178 = 0, $vararg_ptr179 = 0, $vararg_ptr180 = 0, $vararg_ptr194 = 0, $vararg_ptr208 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr67 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1344|0;
 $vararg_buffer205 = sp + 984|0;
 $vararg_buffer203 = sp + 976|0;
 $vararg_buffer201 = sp + 968|0;
 $vararg_buffer199 = sp + 960|0;
 $vararg_buffer197 = sp + 952|0;
 $vararg_buffer195 = sp + 944|0;
 $vararg_buffer191 = sp + 936|0;
 $vararg_buffer188 = sp + 928|0;
 $vararg_buffer185 = sp + 920|0;
 $vararg_buffer183 = sp + 912|0;
 $vararg_buffer181 = sp + 904|0;
 $vararg_buffer173 = sp + 872|0;
 $vararg_buffer166 = sp + 848|0;
 $vararg_buffer164 = sp + 744|0;
 $vararg_buffer162 = sp + 736|0;
 $vararg_buffer158 = sp + 728|0;
 $vararg_buffer153 = sp + 712|0;
 $vararg_buffer148 = sp + 696|0;
 $vararg_buffer145 = sp + 688|0;
 $vararg_buffer143 = sp + 680|0;
 $vararg_buffer141 = sp + 672|0;
 $vararg_buffer138 = sp + 664|0;
 $vararg_buffer136 = sp + 656|0;
 $vararg_buffer133 = sp + 648|0;
 $vararg_buffer130 = sp + 640|0;
 $vararg_buffer127 = sp + 632|0;
 $vararg_buffer125 = sp + 624|0;
 $vararg_buffer123 = sp + 520|0;
 $vararg_buffer121 = sp + 512|0;
 $vararg_buffer119 = sp + 504|0;
 $vararg_buffer115 = sp + 488|0;
 $vararg_buffer108 = sp + 464|0;
 $vararg_buffer106 = sp + 456|0;
 $vararg_buffer104 = sp + 448|0;
 $vararg_buffer102 = sp + 440|0;
 $vararg_buffer100 = sp + 432|0;
 $vararg_buffer98 = sp + 424|0;
 $vararg_buffer95 = sp + 416|0;
 $vararg_buffer93 = sp + 408|0;
 $vararg_buffer91 = sp + 400|0;
 $vararg_buffer89 = sp + 392|0;
 $vararg_buffer87 = sp + 384|0;
 $vararg_buffer85 = sp + 376|0;
 $vararg_buffer83 = sp + 368|0;
 $vararg_buffer81 = sp + 360|0;
 $vararg_buffer79 = sp + 352|0;
 $vararg_buffer77 = sp + 344|0;
 $vararg_buffer75 = sp + 336|0;
 $vararg_buffer72 = sp + 328|0;
 $vararg_buffer70 = sp + 320|0;
 $vararg_buffer68 = sp + 312|0;
 $vararg_buffer64 = sp + 304|0;
 $vararg_buffer61 = sp + 296|0;
 $vararg_buffer59 = sp + 288|0;
 $vararg_buffer56 = sp + 280|0;
 $vararg_buffer54 = sp + 272|0;
 $vararg_buffer52 = sp + 264|0;
 $vararg_buffer49 = sp + 256|0;
 $vararg_buffer46 = sp + 248|0;
 $vararg_buffer43 = sp + 240|0;
 $vararg_buffer39 = sp + 232|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 1264|0;
 $9 = sp + 1325|0;
 $10 = sp + 1252|0;
 $11 = sp + 1248|0;
 $12 = sp + 1224|0;
 $13 = sp + 1120|0;
 $14 = sp + 1108|0;
 $15 = sp + 1096|0;
 $16 = sp + 1092|0;
 $17 = sp + 1088|0;
 $18 = ((($5)) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($5)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($5)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($5)) + 40|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($5)) + 44|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 L1: do {
  switch ($21|0) {
  case -1:  {
   $$0648$off0 = 1;$$0649$off0 = 0;
   break;
  }
  case -2:  {
   $$0648$off0 = 0;$$0649$off0 = 1;
   break;
  }
  default: {
   switch ($21|0) {
   case 1: case 2: case 4: case 8: case 16: case 32: case 64: case 128:  {
    $$0648$off0 = 0;$$0649$off0 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   HEAP32[$vararg_buffer>>2] = $21;
   __Z8e_printfPKcz(4195,$vararg_buffer);
   $$23 = 0;
   STACKTOP = sp;return ($$23|0);
  }
  }
 } while(0);
 $29 = (__ZN8BufferIO4getsEPci($0,$9,5)|0);
 $30 = ($29|0)==(0|0);
 L7: do {
  if ($30) {
   $31 = (__ZN8BufferIO7getNameEv($0)|0);
   HEAP32[$vararg_buffer1>>2] = $31;
   __Z8e_printfPKcz(4226,$vararg_buffer1);
   $$22 = 0;
  } else {
   $32 = (_strcmp($9,4263)|0);
   $33 = ($32|0)==(0);
   L10: do {
    if ($33) {
     $34 = (__ZN8BufferIO4getsEPci($0,$9,5)|0);
     $35 = ($34|0)==(0|0);
     if ($35) {
      $$22 = 0;
      break L7;
     }
     $36 = (_strcmp($9,4268)|0);
     $37 = ($36|0)==(0);
     if (!($37)) {
      $$22 = 0;
      break L7;
     }
     $38 = (__ZN8BufferIO4getsEPci($0,$8,61)|0);
     $39 = ($38|0)==(0|0);
     do {
      if ($39) {
       __Z8e_printfPKcz(4273,$vararg_buffer4);
      } else {
       $40 = (_strncmp($8,4312,13)|0);
       $41 = ($40|0)==(0);
       if (!($41)) {
        $44 = ((($8)) + 48|0);
        $45 = (_strtol($44,0,10)|0);
        $46 = ($45|0)<(0);
        if ($46) {
         break;
        }
        $47 = $45 & 1;
        $$ = (($47) + ($45))|0;
        __ZN8BufferIO5fseekEli($0,$$,1);
        // unreachable;
       }
       $42 = (__ZN8BufferIO4getsEPci($0,$9,5)|0);
       $43 = ($42|0)==(0|0);
       if ($43) {
        __Z8e_printfPKcz(4326,$vararg_buffer6);
        break;
       } else {
        break L10;
       }
      }
     } while(0);
     $$22 = 0;
     break L7;
    }
   } while(0);
   HEAP32[$10>>2] = 0;
   $48 = ((($10)) + 4|0);
   HEAP32[$48>>2] = 0;
   $49 = ((($10)) + 8|0);
   HEAP32[$49>>2] = 0;
   $50 = (_strcmp($9,4344)|0);
   $51 = ($50|0)==(0);
   L26: do {
    if ($51) {
     $53 = (__Z14ioget_int_8bitI8BufferIOEbRT_Pi($0,$11)|0);
     if ($53) {
      $54 = HEAP32[$11>>2]|0;
      $$off752 = (($54) + -32)|0;
      $55 = ($$off752>>>0)>(79);
      if ($55) {
       __Z8e_printfPKcz(4372,$vararg_buffer11);
       $$21 = 0;
       break;
      }
      $56 = ($$off752|0)>(47);
      $57 = (($54) + -64)|0;
      $$758 = $56 ? $57 : $$off752;
      HEAP32[$11>>2] = $$758;
      $58 = $$758 & -16;
      switch ($58|0) {
      case 16:  {
       HEAP8[$5>>0] = 1;
       $60 = ((($5)) + 56|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)==(0);
       if (!($62)) {
        __Z8e_printfPKcz(4450,$vararg_buffer15);
        $$21 = 0;
        break L26;
       }
       $or$cond22$not = ($21|0)==(1);
       $brmerge = $or$cond22$not | $$0648$off0;
       if (!($brmerge)) {
        __Z8e_printfPKcz(4503,$vararg_buffer17);
        $$21 = 0;
        break L26;
       }
       $63 = ($19|0)<(100);
       if ($63) {
        __Z8v_printfiPKcz(1,4559,$vararg_buffer19);
        $$0717857863866 = 1;$202 = 1;$931 = 1;
       } else {
        $$0717857863866 = 1;$202 = 1;$931 = 0;
       }
       break;
      }
      case 32:  {
       HEAP8[$5>>0] = 2;
       $59 = ($19|0)<(100);
       $$0717857863866 = 2;$202 = 0;$931 = $59;
       break;
      }
      default: {
       __Z8e_printfPKcz(4409,$vararg_buffer13);
       $$21 = 0;
       break L26;
      }
      }
      $64 = HEAP32[$11>>2]|0;
      $65 = (($64|0) % 16)&-1;
      $$off755 = (($65) + -1)|0;
      $66 = ($$off755>>>0)>(3);
      $67 = ($65|0)==(2);
      $or$cond28 = $67 | $66;
      if ($or$cond28) {
       __Z8e_printfPKcz(4637,$vararg_buffer21);
       $$21 = 0;
       break;
      }
      $68 = (__Z14ioget_int_8bitI8BufferIOEbRT_Pi($0,$11)|0);
      if ($68) {
       $69 = HEAP32[$11>>2]|0;
       $$off756 = (($69) + -48)|0;
       $70 = ($$off756>>>0)>(2);
       if ($70) {
        __Z8e_printfPKcz(4687,$vararg_buffer23);
        $$21 = 0;
        break;
       }
       $71 = (__Z22read_big_endian_varintI8BufferIOEjRT_($0)|0);
       $72 = (($71) + 1)|0;
       $73 = (__Z22read_big_endian_varintI8BufferIOEjRT_($0)|0);
       $74 = (($73) + 1)|0;
       $75 = ($72|0)<(1);
       $76 = ($74|0)<(1);
       $or$cond32 = $75 | $76;
       if ($or$cond32) {
        __Z8e_printfPKcz(4734,$vararg_buffer25);
        $$21 = 0;
        break;
       }
       if ($56) {
        $77 = (__Z22read_big_endian_varintI8BufferIOEjRT_($0)|0);
        $78 = (($77) + 2)|0;
        $$1716 = $78;
       } else {
        $$1716 = 1;
       }
       __ZN8MetaDataC2Ev($12);
       $79 = ((($6)) + 1|0);
       $80 = ((($6)) + 2|0);
       $81 = ((($10)) + 8|0);
       L57: while(1) {
        $82 = (__Z10read_chunkI8BufferIOEiRT_R8MetaData($0,$12)|0);
        switch ($82|0) {
        case 1:  {
         label = 54;
         break L57;
         break;
        }
        case 0:  {
         break;
        }
        default: {
         label = 53;
         break L57;
        }
        }
        $83 = HEAP8[$6>>0]|0;
        $84 = ($83<<24>>24)==(0);
        if ($84) {
         $85 = (_strcmp($12,4755)|0);
         $86 = ($85|0)==(0);
         if ($86) {
          continue;
         }
        }
        $87 = HEAP8[$79>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if ($88) {
         $89 = (_strcmp($12,4760)|0);
         $90 = ($89|0)==(0);
         if ($90) {
          continue;
         }
        }
        $91 = HEAP8[$80>>0]|0;
        $92 = ($91<<24>>24)==(0);
        if ($92) {
         $93 = (_strcmp($12,4765)|0);
         $94 = ($93|0)==(0);
         if ($94) {
          continue;
         }
        }
        HEAP32[$vararg_buffer27>>2] = $12;
        __Z8v_printfiPKcz(3,4770,$vararg_buffer27);
        $95 = HEAP32[$48>>2]|0;
        $96 = HEAP32[$81>>2]|0;
        $97 = ($95|0)==($96|0);
        if ($97) {
         __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($10,$12);
         continue;
        } else {
         __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($8,$10,1);
         $98 = HEAP32[$48>>2]|0;
         __ZN8MetaDataC2ERKS_($98,$12);
         __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($8);
         $99 = HEAP32[$48>>2]|0;
         $100 = ((($99)) + 24|0);
         HEAP32[$48>>2] = $100;
         continue;
        }
       }
       do {
        if ((label|0) == 53) {
         __Z8e_printfPKcz(4795,$vararg_buffer30);
         $$17 = 0;
        }
        else if ((label|0) == 54) {
         if ($$0649$off0) {
          __ZN5ImageC2Ei($13,0);
          $101 = ((($1)) + 4|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ((($1)) + 8|0);
          $104 = HEAP32[$103>>2]|0;
          $105 = ($102>>>0)<($104>>>0);
          if ($105) {
           __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($8,$1,1);
           $106 = HEAP32[$101>>2]|0;
           __ZN5ImageC2EOS_($106,$13);
           __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($8);
           $107 = HEAP32[$101>>2]|0;
           $108 = ((($107)) + 104|0);
           HEAP32[$101>>2] = $108;
          } else {
           __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($1,$13);
          }
          __ZN5ImageD2Ev($13);
          $109 = HEAP32[$1>>2]|0;
          $110 = ((($109)) + 92|0);
          $111 = ($110|0)==($10|0);
          if ($111) {
           $$17 = 1;
           break;
          }
          $112 = HEAP32[$10>>2]|0;
          $113 = HEAP32[$48>>2]|0;
          __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($110,$112,$113);
          $$17 = 1;
          break;
         }
         $114 = ((($5)) + 56|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==(0);
         if (!($116)) {
          $117 = (__ZN8BufferIO5ftellEv($0)|0);
          HEAP32[$vararg_buffer32>>2] = $117;
          __Z8v_printfiPKcz(1,4815,$vararg_buffer32);
         }
         __ZN10RacInput24I8BufferIOEC2ERS0_($8,$0);
         __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($13,$8);
         HEAP32[$vararg_buffer35>>2] = $72;
         $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
         HEAP32[$vararg_ptr38>>2] = $74;
         __Z8v_printfiPKcz(3,4848,$vararg_buffer35);
         $118 = ($65|0)>(0);
         $119 = HEAP32[$11>>2]|0;
         if ($118) {
          $$07331015 = 0;$$07351014 = 0;$120 = $119;
          while(1) {
           $121 = ($120|0)==(50);
           do {
            if ($121) {
             $$0736 = 65535;
            } else {
             $122 = ($120|0)==(48);
             if (!($122)) {
              $$0736 = 255;
              break;
             }
             $123 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,1,15)|0);
             $124 = 1 << $123;
             $125 = (($124) + -1)|0;
             $$0736 = $125;
            }
           } while(0);
           $126 = ($$0736|0)>($$07331015|0);
           $$0736$$0733 = $126 ? $$0736 : $$07331015;
           $127 = HEAP32[$11>>2]|0;
           $128 = ($127|0)==(48);
           if ($128) {
            $129 = (($$0736) + 1)|0;
            $130 = (__ZN6maniac4utilL5ilog2Ej_66($129)|0);
            HEAP32[$vararg_buffer39>>2] = $$07351014;
            $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
            HEAP32[$vararg_ptr42>>2] = $130;
            __Z8v_printfiPKcz(3,4880,$vararg_buffer39);
           }
           $131 = (($$07351014) + 1)|0;
           $132 = ($131|0)<($65|0);
           $133 = HEAP32[$11>>2]|0;
           if ($132) {
            $$07331015 = $$0736$$0733;$$07351014 = $131;$120 = $133;
           } else {
            $$0733$lcssa = $$0736$$0733;$$lcssa967 = $133;
            break;
           }
          }
         } else {
          $$0733$lcssa = 0;$$lcssa967 = $119;
         }
         switch ($$lcssa967|0) {
         case 49:  {
          HEAP32[$vararg_buffer43>>2] = $65;
          __Z8v_printfiPKcz(3,4893,$vararg_buffer43);
          break;
         }
         case 50:  {
          HEAP32[$vararg_buffer46>>2] = $65;
          __Z8v_printfiPKcz(3,4911,$vararg_buffer46);
          break;
         }
         default: {
         }
         }
         $134 = ($$1716|0)>(1);
         if ($134) {
          HEAP32[$vararg_buffer49>>2] = $$1716;
          __Z8v_printfiPKcz(3,4930,$vararg_buffer49);
         }
         $135 = ($65|0)>(3);
         if ($135) {
          $136 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,1)|0);
          $137 = ($136|0)==(0);
          if ($137) {
           __Z8v_printfiPKcz(3,4943,$vararg_buffer52);
           $$0737$off0 = 0;
          } else {
           $$0737$off0 = 1;
          }
         } else {
          $$0737$off0 = 0;
         }
         __Z8v_printfiPKcz(3,4962,$vararg_buffer54);
         L108: do {
          if ($$0648$off0) {
           $138 = (__ZN8BufferIO7getNameEv($0)|0);
           HEAP32[$vararg_buffer56>>2] = $138;
           __Z8v_printfiPKcz(1,4964,$vararg_buffer56);
           $139 = ($$1716|0)==(1);
           if ($139) {
            __Z8v_printfiPKcz(1,4969,$vararg_buffer59);
           } else {
            HEAP32[$vararg_buffer61>>2] = $$1716;
            __Z8v_printfiPKcz(1,4980,$vararg_buffer61);
           }
           HEAP32[$vararg_buffer64>>2] = $72;
           $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
           HEAP32[$vararg_ptr67>>2] = $74;
           __Z8v_printfiPKcz(1,5006,$vararg_buffer64);
           $140 = HEAP32[$11>>2]|0;
           switch ($140|0) {
           case 49:  {
            __Z8v_printfiPKcz(1,5016,$vararg_buffer68);
            break;
           }
           case 50:  {
            __Z8v_printfiPKcz(1,5023,$vararg_buffer70);
            break;
           }
           case 48:  {
            $141 = (($$0733$lcssa) + 1)|0;
            $142 = (__ZN6maniac4utilL5ilog2Ej_66($141)|0);
            HEAP32[$vararg_buffer72>>2] = $142;
            __Z8v_printfiPKcz(1,5031,$vararg_buffer72);
            break;
           }
           default: {
           }
           }
           switch ($65|0) {
           case 1:  {
            __Z8v_printfiPKcz(1,5039,$vararg_buffer75);
            break;
           }
           case 3:  {
            __Z8v_printfiPKcz(1,5049,$vararg_buffer77);
            break;
           }
           case 4:  {
            __Z8v_printfiPKcz(1,5053,$vararg_buffer79);
            break;
           }
           default: {
           }
           }
           do {
            if ($202) {
             __Z8v_printfiPKcz(1,5058,$vararg_buffer81);
            } else {
             $143 = ($$0717857863866<<24>>24)==(2);
             if (!($143)) {
              break;
             }
             __Z8v_printfiPKcz(1,5075,$vararg_buffer83);
            }
           } while(0);
           __Z8v_printfiPKcz(1,4962,$vararg_buffer85);
           $144 = HEAP32[$48>>2]|0;
           $145 = HEAP32[$10>>2]|0;
           $146 = ($144|0)==($145|0);
           if ($146) {
            $$16 = 1;
            break;
           }
           __Z8v_printfiPKcz(1,5088,$vararg_buffer87);
           $147 = HEAP32[$48>>2]|0;
           $148 = HEAP32[$10>>2]|0;
           $149 = ($147|0)==($148|0);
           if ($149) {
            $$16 = 1;
            break;
           } else {
            $$0740970 = 0;
           }
           while(1) {
            $150 = HEAP32[$10>>2]|0;
            $151 = (($150) + (($$0740970*24)|0)|0);
            $152 = (_strcmp($151,4755)|0);
            $153 = ($152|0)==(0);
            do {
             if ($153) {
              __Z8v_printfiPKcz(1,5108,$vararg_buffer89);
             } else {
              $154 = (_strcmp($151,4760)|0);
              $155 = ($154|0)==(0);
              if ($155) {
               __Z8v_printfiPKcz(1,5126,$vararg_buffer91);
               break;
              }
              $156 = (_strcmp($151,4765)|0);
              $157 = ($156|0)==(0);
              if ($157) {
               __Z8v_printfiPKcz(1,5131,$vararg_buffer93);
               break;
              } else {
               HEAP32[$vararg_buffer95>>2] = $151;
               __Z8v_printfiPKcz(1,5135,$vararg_buffer95);
               break;
              }
             }
            } while(0);
            $158 = (($$0740970) + 1)|0;
            $159 = HEAP32[$48>>2]|0;
            $160 = HEAP32[$10>>2]|0;
            $161 = (($159) - ($160))|0;
            $162 = (($161|0) / 24)&-1;
            $163 = ($158>>>0)<($162>>>0);
            if ($163) {
             __Z8v_printfiPKcz(1,5147,$vararg_buffer98);
            }
            $164 = HEAP32[$48>>2]|0;
            $165 = HEAP32[$10>>2]|0;
            $166 = (($164) - ($165))|0;
            $167 = (($166|0) / 24)&-1;
            $168 = ($158>>>0)<($167>>>0);
            if ($168) {
             $$0740970 = $158;
            } else {
             $$16 = 1;
             break;
            }
           }
          } else {
           $169 = ($7|0)==(0|0);
           if (!($169)) {
            HEAP32[$7>>2] = $72;
            $170 = ((($7)) + 4|0);
            HEAP32[$170>>2] = $74;
            $171 = $65&255;
            $172 = ((($7)) + 8|0);
            HEAP8[$172>>0] = $171;
            $173 = HEAP32[$11>>2]|0;
            switch ($173|0) {
            case 49:  {
             $174 = ((($7)) + 9|0);
             HEAP8[$174>>0] = 8;
             break;
            }
            case 50:  {
             $175 = ((($7)) + 9|0);
             HEAP8[$175>>0] = 16;
             break;
            }
            case 48:  {
             $176 = (($$0733$lcssa) + 1)|0;
             $177 = (__ZN6maniac4utilL5ilog2Ej_66($176)|0);
             $178 = $177&255;
             $179 = ((($7)) + 9|0);
             HEAP8[$179>>0] = $178;
             break;
            }
            default: {
            }
            }
            $180 = ((($7)) + 12|0);
            HEAP32[$180>>2] = $$1716;
            $$16 = 1;
            break;
           }
           if ($134) {
            (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,100)|0);
           }
           $181 = $25 | $23;
           $182 = ($181|0)<(0);
           if ($182) {
            __Z8e_printfPKcz(5150,$vararg_buffer100);
            $$16 = 0;
            break;
           }
           do {
            if ($28) {
             $183 = ($23|0)<(1);
             $184 = ($25|0)<(1);
             $or$cond36 = $183 & $184;
             if ($or$cond36) {
              __Z8e_printfPKcz(5186,$vararg_buffer102);
              $$16 = 0;
              break L108;
             } else {
              $185 = $23 << 1;
              $186 = (($185) + -1)|0;
              $187 = $25 << 1;
              $188 = (($187) + -1)|0;
              $189 = ($23|0)>($72|0);
              $$760 = $189 ? $72 : $23;
              $190 = ($25|0)>($74|0);
              $$769 = $190 ? $74 : $25;
              $$0646 = $186;$$0647 = $188;$$0750 = $$769;$$1747 = $$760;
              break;
             }
            } else {
             $$0646 = $23;$$0647 = $25;$$0750 = $25;$$1747 = $23;
            }
           } while(0);
           $191 = $$0646 | $$0647;
           $192 = ($191|0)==(0);
           if ($192) {
            $$1644 = $21;
           } else {
            $193 = ($21|0)>(1);
            if ($193) {
             __Z8e_printfPKcz(5214,$vararg_buffer104);
            }
            $194 = ($$0646|0)>(0);
            $195 = ($$0647|0)>(0);
            $$0643 = 1;
            while(1) {
             if ($194) {
              $196 = (($71|0) / ($$0643|0))&-1;
              $197 = ($196|0)<($$0646|0);
              if ($197) {
               label = 125;
              }
             } else {
              label = 125;
             }
             if ((label|0) == 125) {
              label = 0;
              if (!($195)) {
               break;
              }
              $198 = (($73|0) / ($$0643|0))&-1;
              $199 = ($198|0)<($$0647|0);
              if ($199) {
               break;
              }
             }
             $200 = $$0643 << 1;
             $$0643 = $200;
            }
            HEAP32[$20>>2] = $$0643;
            $$1644 = $$0643;
           }
           $201 = ($$1644|0)!=(1);
           $or$cond40 = $202 & $201;
           if ($or$cond40) {
            __Z8v_printfiPKcz(1,5276,$vararg_buffer106);
            $$2645 = 1;
           } else {
            $$2645 = $$1644;
           }
           $203 = (__ZN6maniac4utilL5ilog2Ej_66($$2645)|0);
           $204 = ($203|0)>(0);
           if ($204) {
            $205 = (($71|0) / ($$2645|0))&-1;
            $206 = (($205) + 1)|0;
            $207 = (($73|0) / ($$2645|0))&-1;
            $208 = (($207) + 1)|0;
            HEAP32[$vararg_buffer108>>2] = $$2645;
            $vararg_ptr111 = ((($vararg_buffer108)) + 4|0);
            HEAP32[$vararg_ptr111>>2] = $72;
            $vararg_ptr112 = ((($vararg_buffer108)) + 8|0);
            HEAP32[$vararg_ptr112>>2] = $74;
            $vararg_ptr113 = ((($vararg_buffer108)) + 12|0);
            HEAP32[$vararg_ptr113>>2] = $206;
            $vararg_ptr114 = ((($vararg_buffer108)) + 16|0);
            HEAP32[$vararg_ptr114>>2] = $208;
            __Z8v_printfiPKcz(3,5358,$vararg_buffer108);
           }
           $209 = ($$0733$lcssa|0)>(255);
           $210 = $209 ? 2 : 1;
           $211 = ($65|0)>(1);
           $212 = $211 ? 2 : 0;
           $213 = (($212) + ($65))|0;
           $214 = Math_imul($210, $213)|0;
           $215 = ($214|0)<(0);
           $216 = $215 << 31 >> 31;
           $217 = (($71|0) / ($$2645|0))&-1;
           $218 = (($217) + 1)|0;
           $219 = ($218|0)<(0);
           $220 = $219 << 31 >> 31;
           $221 = (($73|0) / ($$2645|0))&-1;
           $222 = (($221) + 1)|0;
           $223 = ($222|0)<(0);
           $224 = $223 << 31 >> 31;
           $225 = ($$1716|0)<(0);
           $226 = $225 << 31 >> 31;
           $227 = ($65|0)<(0);
           $228 = $227 << 31 >> 31;
           $229 = (___muldi3(($$1716|0),($226|0),($65|0),($228|0))|0);
           $230 = tempRet0;
           $231 = (___muldi3(($229|0),($230|0),($214|0),($216|0))|0);
           $232 = tempRet0;
           $233 = (___muldi3(($231|0),($232|0),($218|0),($220|0))|0);
           $234 = tempRet0;
           $235 = (___muldi3(($233|0),($234|0),($222|0),($224|0))|0);
           $236 = tempRet0;
           $237 = ($236>>>0)>(1);
           $238 = ($235>>>0)>(705032704);
           $239 = ($236|0)==(1);
           $240 = $239 & $238;
           $241 = $237 | $240;
           if ($241) {
            $242 = $vararg_buffer115;
            $243 = $242;
            HEAP32[$243>>2] = $235;
            $244 = (($242) + 4)|0;
            $245 = $244;
            HEAP32[$245>>2] = $236;
            $vararg_ptr118 = ((($vararg_buffer115)) + 8|0);
            $246 = $vararg_ptr118;
            $247 = $246;
            HEAP32[$247>>2] = 705032704;
            $248 = (($246) + 4)|0;
            $249 = $248;
            HEAP32[$249>>2] = 1;
            __Z8e_printfPKcz(5416,$vararg_buffer115);
            $$16 = 0;
            break;
           }
           $250 = ($$1716|0)>(50000);
           if ($250) {
            __Z8e_printfPKcz(5555,$vararg_buffer119);
            $$16 = 0;
            break;
           }
           $251 = ($$1716|0)>(0);
           if ($251) {
            $252 = ((($1)) + 4|0);
            $253 = ((($1)) + 8|0);
            $254 = $$0733$lcssa&65535;
            $255 = $$0737$off0&1;
            $256 = ($2|0)==(0|0);
            $257 = ((($4)) + 4|0);
            $258 = ((($4)) + 8|0);
            $$07491012 = 0;
            while(1) {
             __ZN5ImageC2Ei($vararg_buffer35,$203);
             $259 = HEAP32[$252>>2]|0;
             $260 = HEAP32[$253>>2]|0;
             $261 = ($259>>>0)<($260>>>0);
             if ($261) {
              __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($vararg_buffer54,$1,1);
              $262 = HEAP32[$252>>2]|0;
              __ZN5ImageC2EOS_($262,$vararg_buffer35);
              __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer54);
              $263 = HEAP32[$252>>2]|0;
              $264 = ((($263)) + 104|0);
              HEAP32[$252>>2] = $264;
             } else {
              __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($1,$vararg_buffer35);
             }
             __ZN5ImageD2Ev($vararg_buffer35);
             $265 = HEAP32[$1>>2]|0;
             $266 = (($265) + (($$07491012*104)|0)|0);
             $267 = (__ZN5Image9semi_initEjjssi($266,$72,$74,0,$254,$65)|0);
             if (!($267)) {
              $$16 = 0;
              break L108;
             }
             $268 = HEAP32[$1>>2]|0;
             $269 = (((($268) + (($$07491012*104)|0)|0)) + 56|0);
             HEAP8[$269>>0] = $255;
             $270 = HEAP32[$1>>2]|0;
             $271 = (((($270) + (($$07491012*104)|0)|0)) + 92|0);
             $272 = ($271|0)==($10|0);
             if (!($272)) {
              $273 = HEAP32[$10>>2]|0;
              $274 = HEAP32[$48>>2]|0;
              __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($271,$273,$274);
             }
             if ($134) {
              $275 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,60000)|0);
              $276 = HEAP32[$1>>2]|0;
              $277 = (((($276) + (($$07491012*104)|0)|0)) + 52|0);
              HEAP32[$277>>2] = $275;
             }
             if (!($256)) {
              __ZN5ImageC2Ei($vararg_buffer35,$203);
              $278 = HEAP32[$257>>2]|0;
              $279 = HEAP32[$258>>2]|0;
              $280 = ($278>>>0)<($279>>>0);
              if ($280) {
               __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($vararg_buffer54,$4,1);
               $281 = HEAP32[$257>>2]|0;
               __ZN5ImageC2EOS_($281,$vararg_buffer35);
               __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer54);
               $282 = HEAP32[$257>>2]|0;
               $283 = ((($282)) + 104|0);
               HEAP32[$257>>2] = $283;
              } else {
               __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($4,$vararg_buffer35);
              }
              __ZN5ImageD2Ev($vararg_buffer35);
             }
             $284 = (($$07491012) + 1)|0;
             $285 = ($284|0)<($$1716|0);
             if ($285) {
              $$07491012 = $284;
             } else {
              break;
             }
            }
           }
           $286 = ((($5)) + 12|0);
           HEAP32[$286>>2] = 2;
           $287 = ((($5)) + 8|0);
           HEAP32[$287>>2] = 226050910;
           $288 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,1)|0);
           $289 = ($288|0)==(0);
           do {
            if (!($289)) {
             $290 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,1,127)|0);
             HEAP32[$286>>2] = $290;
             $291 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,2,126)|0);
             $292 = (4294967295 / ($291>>>0))&-1;
             HEAP32[$287>>2] = $292;
             $293 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,1)|0);
             $294 = ($293|0)==(0);
             if ($294) {
              break;
             }
             __Z8e_printfPKcz(5653,$vararg_buffer121);
             $$16 = 0;
             break L108;
            }
           } while(0);
           HEAP32[$vararg_buffer35>>2] = 0;
           $295 = ((($vararg_buffer35)) + 4|0);
           HEAP32[$295>>2] = 0;
           $296 = ((($vararg_buffer35)) + 8|0);
           HEAP32[$296>>2] = 0;
           HEAP32[$14>>2] = 0;
           $297 = ((($14)) + 4|0);
           HEAP32[$297>>2] = 0;
           $298 = ((($14)) + 8|0);
           HEAP32[$298>>2] = 0;
           $299 = HEAP32[$1>>2]|0;
           $300 = (__Z9getRangesRK5Image($299)|0);
           $301 = $300;
           HEAP32[$15>>2] = $301;
           $302 = HEAP32[$295>>2]|0;
           $303 = ((($vararg_buffer35)) + 8|0);
           $304 = HEAP32[$303>>2]|0;
           $305 = ($302>>>0)<($304>>>0);
           if ($305) {
            __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($vararg_buffer54,$vararg_buffer35,1);
            $306 = HEAP32[$295>>2]|0;
            $307 = HEAP32[$15>>2]|0;
            HEAP32[$15>>2] = 0;
            HEAP32[$306>>2] = $307;
            __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer54);
            $308 = HEAP32[$295>>2]|0;
            $309 = ((($308)) + 4|0);
            HEAP32[$295>>2] = $309;
           } else {
            __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($vararg_buffer35,$15);
           }
           $310 = HEAP32[$15>>2]|0;
           HEAP32[$15>>2] = 0;
           $311 = ($310|0)==(0|0);
           if (!($311)) {
            $312 = HEAP32[$310>>2]|0;
            $313 = ((($312)) + 4|0);
            $314 = HEAP32[$313>>2]|0;
            FUNCTION_TABLE_vi[$314 & 127]($310);
           }
           __Z8v_printfiPKcz(4,5712,$vararg_buffer123);
           HEAP32[$vararg_buffer54>>2] = 0;
           $315 = ((($15)) + 11|0);
           $316 = ((($15)) + 11|0);
           $317 = ((($15)) + 4|0);
           $318 = ((($1)) + 4|0);
           $319 = ((($1)) + 4|0);
           $320 = ((($1)) + 4|0);
           $321 = ((($14)) + 8|0);
           $322 = ((($15)) + 11|0);
           $323 = ((($15)) + 11|0);
           $$0741 = -1;$$0743 = 0;
           while(1) {
            $324 = (__ZN8RacInputI11RacConfig248BufferIOE8read_bitEv($8)|0);
            if (!($324)) {
             label = 205;
             break;
            }
            $325 = (__ZN8BufferIO5isEOFEv($0)|0);
            if ($325) {
             label = 164;
             break;
            }
            __ZL9read_nameI10RacInput24I8BufferIOEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_Ri($15,$8,$vararg_buffer54);
            $326 = HEAP32[$vararg_buffer54>>2]|0;
            $327 = ($326|0)>($$0741|0);
            if ($327) {
             $332 = (__Z16create_transformI8BufferIOENSt3__210unique_ptrI9TransformIT_ENS1_14default_deleteIS5_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($15)|0);
             HEAP32[$16>>2] = $332;
             $333 = HEAP32[$295>>2]|0;
             $334 = ((($333)) + -4|0);
             $335 = HEAP32[$334>>2]|0;
             $336 = ($332|0)==(0|0);
             L233: do {
              if ($336) {
               $337 = HEAP8[$315>>0]|0;
               $338 = ($337<<24>>24)<(0);
               $339 = HEAP32[$15>>2]|0;
               $340 = $338 ? $339 : $15;
               HEAP32[$vararg_buffer130>>2] = $340;
               __Z8e_printfPKcz(5897,$vararg_buffer130);
               $$1744 = $$0743;$$4655 = 1;
              } else {
               $341 = HEAP32[$332>>2]|0;
               $342 = ((($341)) + 8|0);
               $343 = HEAP32[$342>>2]|0;
               $344 = (FUNCTION_TABLE_iii[$343 & 63]($332,$335)|0);
               if (!($344)) {
                $345 = HEAP8[$322>>0]|0;
                $346 = ($345<<24>>24)<(0);
                $347 = HEAP32[$15>>2]|0;
                $348 = $346 ? $347 : $15;
                HEAP32[$vararg_buffer133>>2] = $348;
                __Z8e_printfPKcz(5960,$vararg_buffer133);
                $$1744 = $$0743;$$4655 = 1;
                break;
               }
               $349 = (($$0743) + 1)|0;
               $350 = ($$0743|0)>(0);
               if ($350) {
                __Z8v_printfiPKcz(4,5147,$vararg_buffer136);
               }
               $351 = HEAP8[$316>>0]|0;
               $352 = ($351<<24>>24)<(0);
               $353 = HEAP32[$15>>2]|0;
               $354 = $352 ? $353 : $15;
               HEAP32[$vararg_buffer138>>2] = $354;
               __Z8v_printfiPKcz(4,6021,$vararg_buffer138);
               $355 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6024)|0);
               $356 = HEAP8[$316>>0]|0;
               $357 = ($356<<24>>24)<(0);
               $358 = HEAP32[$317>>2]|0;
               $359 = $356&255;
               $360 = $357 ? $358 : $359;
               $361 = ($355|0)==($360|0);
               do {
                if ($361) {
                 $362 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($15,0,-1,6024,$355)|0);
                 $363 = ($362|0)==(0);
                 if (!($363)) {
                  break;
                 }
                 $364 = HEAP32[$318>>2]|0;
                 $365 = HEAP32[$1>>2]|0;
                 $366 = (($364) - ($365))|0;
                 $367 = (($366|0) / 104)&-1;
                 $368 = ($367>>>0)<(2);
                 if ($368) {
                  $$1744 = $349;$$4655 = 1;
                  break L233;
                 }
                 $369 = HEAP32[$16>>2]|0;
                 $370 = HEAP32[$369>>2]|0;
                 $371 = ((($370)) + 16|0);
                 $372 = HEAP32[$371>>2]|0;
                 FUNCTION_TABLE_vii[$372 & 31]($369,$367);
                }
               } while(0);
               $373 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6039)|0);
               $374 = HEAP8[$316>>0]|0;
               $375 = ($374<<24>>24)<(0);
               $376 = HEAP32[$317>>2]|0;
               $377 = $374&255;
               $378 = $375 ? $376 : $377;
               $379 = ($373|0)==($378|0);
               do {
                if ($379) {
                 $380 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($15,0,-1,6039,$373)|0);
                 $381 = ($380|0)==(0);
                 if (!($381)) {
                  break;
                 }
                 $382 = HEAP32[$319>>2]|0;
                 $383 = HEAP32[$1>>2]|0;
                 $384 = (($382) - ($383))|0;
                 $385 = (($384|0) / 104)&-1;
                 $386 = ($385>>>0)<(2);
                 if ($386) {
                  $$1744 = $349;$$4655 = 1;
                  break L233;
                 }
                 $387 = (($385) + -1)|0;
                 $388 = HEAP32[$1>>2]|0;
                 $389 = HEAP32[$319>>2]|0;
                 $390 = ($388|0)==($389|0);
                 if ($390) {
                  $$0738$lcssa = $387;
                 } else {
                  $$07381008 = $387;$$sroa$0851$01007 = $388;
                  while(1) {
                   $392 = ((($$sroa$0851$01007)) + 84|0);
                   $393 = HEAP32[$392>>2]|0;
                   $$lobit = $393 >> 31;
                   $$lobit$not = $$lobit ^ -1;
                   $$$0738 = (($$07381008) + ($$lobit$not))|0;
                   $394 = ((($$sroa$0851$01007)) + 104|0);
                   $395 = ($394|0)==($389|0);
                   if ($395) {
                    $$0738$lcssa = $$$0738;
                    break;
                   } else {
                    $$07381008 = $$$0738;$$sroa$0851$01007 = $394;
                   }
                  }
                 }
                 $391 = ($$0738$lcssa|0)<(1);
                 if ($391) {
                  $$1744 = $349;$$4655 = 1;
                  break L233;
                 }
                 $396 = HEAP32[$16>>2]|0;
                 $397 = HEAP32[$396>>2]|0;
                 $398 = ((($397)) + 16|0);
                 $399 = HEAP32[$398>>2]|0;
                 $400 = HEAP32[$1>>2]|0;
                 $401 = (__ZNK5Image4rowsEv($400)|0);
                 $402 = Math_imul($401, $$0738$lcssa)|0;
                 FUNCTION_TABLE_vii[$399 & 31]($396,$402);
                 $403 = HEAP32[$16>>2]|0;
                 $404 = HEAP32[$403>>2]|0;
                 $405 = ((($404)) + 16|0);
                 $406 = HEAP32[$405>>2]|0;
                 $407 = HEAP32[$1>>2]|0;
                 $408 = (__ZNK5Image4colsEv($407)|0);
                 FUNCTION_TABLE_vii[$406 & 31]($403,$408);
                }
               } while(0);
               $409 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6051)|0);
               $410 = HEAP8[$316>>0]|0;
               $411 = ($410<<24>>24)<(0);
               $412 = HEAP32[$317>>2]|0;
               $413 = $410&255;
               $414 = $411 ? $412 : $413;
               $415 = ($409|0)==($414|0);
               do {
                if ($415) {
                 $416 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($15,0,-1,6051,$409)|0);
                 $417 = ($416|0)==(0);
                 if (!($417)) {
                  break;
                 }
                 $418 = HEAP32[$320>>2]|0;
                 $419 = HEAP32[$1>>2]|0;
                 $420 = (($418) - ($419))|0;
                 $421 = (($420|0) / 104)&-1;
                 $422 = ($421>>>0)<(2);
                 if ($422) {
                  $$1744 = $349;$$4655 = 1;
                  break L233;
                 }
                 $423 = HEAP32[$16>>2]|0;
                 $424 = HEAP32[$423>>2]|0;
                 $425 = ((($424)) + 16|0);
                 $426 = HEAP32[$425>>2]|0;
                 FUNCTION_TABLE_vii[$426 & 31]($423,$421);
                }
               } while(0);
               $427 = (__ZNSt3__211char_traitsIcE6lengthEPKc(6067)|0);
               $428 = HEAP8[$316>>0]|0;
               $429 = ($428<<24>>24)<(0);
               $430 = HEAP32[$317>>2]|0;
               $431 = $428&255;
               $432 = $429 ? $430 : $431;
               $433 = ($427|0)==($432|0);
               do {
                if ($433) {
                 $434 = (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($15,0,-1,6067,$427)|0);
                 $435 = ($434|0)==(0);
                 if (!($435)) {
                  break;
                 }
                 $436 = HEAP32[$16>>2]|0;
                 $437 = HEAP32[$436>>2]|0;
                 $438 = ((($437)) + 16|0);
                 $439 = HEAP32[$438>>2]|0;
                 $440 = HEAP32[$1>>2]|0;
                 $441 = ((($440)) + 56|0);
                 $442 = HEAP8[$441>>0]|0;
                 $443 = $442&255;
                 FUNCTION_TABLE_vii[$439 & 31]($436,$443);
                }
               } while(0);
               $444 = HEAP32[$16>>2]|0;
               $445 = HEAP32[$444>>2]|0;
               $446 = ((($445)) + 20|0);
               $447 = HEAP32[$446>>2]|0;
               $448 = (FUNCTION_TABLE_iiii[$447 & 63]($444,$335,$8)|0);
               if (!($448)) {
                $$1744 = $349;$$4655 = 1;
                break;
               }
               $449 = HEAP32[$16>>2]|0;
               $450 = HEAP32[$449>>2]|0;
               $451 = ((($450)) + 24|0);
               $452 = HEAP32[$451>>2]|0;
               $453 = (FUNCTION_TABLE_iiii[$452 & 63]($449,$1,$335)|0);
               $454 = $453;
               HEAP32[$17>>2] = $454;
               $455 = HEAP32[$295>>2]|0;
               $456 = HEAP32[$303>>2]|0;
               $457 = ($455>>>0)<($456>>>0);
               if ($457) {
                __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($vararg_buffer123,$vararg_buffer35,1);
                $458 = HEAP32[$295>>2]|0;
                $459 = HEAP32[$17>>2]|0;
                HEAP32[$17>>2] = 0;
                HEAP32[$458>>2] = $459;
                __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer123);
                $460 = HEAP32[$295>>2]|0;
                $461 = ((($460)) + 4|0);
                HEAP32[$295>>2] = $461;
               } else {
                __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($vararg_buffer35,$17);
               }
               $462 = HEAP32[$17>>2]|0;
               HEAP32[$17>>2] = 0;
               $463 = ($462|0)==(0|0);
               if (!($463)) {
                $464 = HEAP32[$462>>2]|0;
                $465 = ((($464)) + 4|0);
                $466 = HEAP32[$465>>2]|0;
                FUNCTION_TABLE_vi[$466 & 127]($462);
               }
               $467 = HEAP32[$295>>2]|0;
               $468 = ((($467)) + -4|0);
               $469 = HEAP32[$468>>2]|0;
               $470 = ($469|0)==(0|0);
               if ($470) {
                $$1744 = $349;$$4655 = 1;
                break;
               }
               $471 = HEAP32[$297>>2]|0;
               $472 = HEAP32[$321>>2]|0;
               $473 = ($471>>>0)<($472>>>0);
               if ($473) {
                __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__RAII_IncreaseAnnotatorC2ERKSA_j($vararg_buffer123,$14,1);
                $474 = HEAP32[$297>>2]|0;
                $475 = HEAP32[$16>>2]|0;
                HEAP32[$16>>2] = 0;
                HEAP32[$474>>2] = $475;
                __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer123);
                $476 = HEAP32[$297>>2]|0;
                $477 = ((($476)) + 4|0);
                HEAP32[$297>>2] = $477;
                $$1744 = $349;$$4655 = 0;
                break;
               } else {
                __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($14,$16);
                $$1744 = $349;$$4655 = 0;
                break;
               }
              }
             } while(0);
             $478 = HEAP32[$16>>2]|0;
             HEAP32[$16>>2] = 0;
             $479 = ($478|0)==(0|0);
             if (!($479)) {
              $480 = HEAP32[$478>>2]|0;
              $481 = ((($480)) + 4|0);
              $482 = HEAP32[$481>>2]|0;
              FUNCTION_TABLE_vi[$482 & 127]($478);
             }
             $$1742 = $326;$$2745 = $$1744;$$5656 = $$4655;
            } else {
             $328 = HEAP8[$323>>0]|0;
             $329 = ($328<<24>>24)<(0);
             $330 = HEAP32[$15>>2]|0;
             $331 = $329 ? $330 : $15;
             HEAP32[$vararg_buffer127>>2] = $331;
             __Z8e_printfPKcz(5778,$vararg_buffer127);
             $$1742 = $$0741;$$2745 = $$0743;$$5656 = 1;
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
            $cond4 = ($$5656|0)==(0);
            if ($cond4) {
             $$0741 = $$1742;$$0743 = $$2745;
            } else {
             $$13 = 0;
             break;
            }
           }
           if ((label|0) == 164) {
            __Z8e_printfPKcz(5725,$vararg_buffer125);
            $$13 = 0;
           }
           else if ((label|0) == 205) {
            HEAP32[$15>>2] = 0;
            $483 = ((($15)) + 4|0);
            HEAP32[$483>>2] = 0;
            $484 = ((($15)) + 8|0);
            HEAP32[$484>>2] = 0;
            $485 = HEAP32[$14>>2]|0;
            $486 = HEAP32[$297>>2]|0;
            $487 = ($485|0)==($486|0);
            if (!($487)) {
             $488 = ((($15)) + 8|0);
             $$sroa$0844$01003 = $485;
             while(1) {
              $490 = HEAP32[$$sroa$0844$01003>>2]|0;
              HEAP32[$16>>2] = $490;
              $491 = HEAP32[$483>>2]|0;
              $492 = HEAP32[$488>>2]|0;
              $493 = ($491>>>0)<($492>>>0);
              if ($493) {
               __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($vararg_buffer123,$15,1);
               $494 = HEAP32[$483>>2]|0;
               $495 = HEAP32[$16>>2]|0;
               HEAP32[$494>>2] = $495;
               __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer123);
               $496 = HEAP32[$483>>2]|0;
               $497 = ((($496)) + 4|0);
               HEAP32[$483>>2] = $497;
              } else {
               __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($15,$16);
              }
              $498 = ((($$sroa$0844$01003)) + 4|0);
              $499 = ($498|0)==($486|0);
              if ($499) {
               break;
              } else {
               $$sroa$0844$01003 = $498;
              }
             }
            }
            $489 = ($$0743|0)==(0);
            if ($489) {
             __Z8v_printfiPKcz(4,6081,$vararg_buffer141);
            } else {
             __Z8v_printfiPKcz(4,4962,$vararg_buffer143);
            }
            $500 = HEAP32[$295>>2]|0;
            $501 = ((($500)) + -4|0);
            $502 = HEAP32[$501>>2]|0;
            $503 = ((($5)) + 4|0);
            HEAP32[$503>>2] = 0;
            do {
             if ($$0737$off0) {
              $504 = HEAP32[$502>>2]|0;
              $505 = ((($504)) + 8|0);
              $506 = HEAP32[$505>>2]|0;
              $507 = (FUNCTION_TABLE_ii[$506 & 63]($502)|0);
              $508 = ($507|0)>(3);
              if (!($508)) {
               break;
              }
              $509 = HEAP32[$502>>2]|0;
              $510 = ((($509)) + 12|0);
              $511 = HEAP32[$510>>2]|0;
              $512 = (FUNCTION_TABLE_iii[$511 & 63]($502,3)|0);
              $513 = ($512<<16>>16)<(1);
              $514 = ($$0717857863866<<24>>24)==(2);
              $or$cond42 = $514 & $513;
              if (!($or$cond42)) {
               break;
              }
              $515 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,2)|0);
              HEAP32[$503>>2] = $515;
              HEAP32[$vararg_buffer145>>2] = $515;
              __Z8v_printfiPKcz(4,6087,$vararg_buffer145);
             }
            } while(0);
            $$0730 = 0;$$0731 = 0;
            while(1) {
             $516 = HEAP32[$502>>2]|0;
             $517 = ((($516)) + 8|0);
             $518 = HEAP32[$517>>2]|0;
             $519 = (FUNCTION_TABLE_ii[$518 & 63]($502)|0);
             $520 = ($$0730|0)<($519|0);
             if (!($520)) {
              break;
             }
             $548 = HEAP32[$502>>2]|0;
             $549 = ((($548)) + 12|0);
             $550 = HEAP32[$549>>2]|0;
             $551 = (FUNCTION_TABLE_iii[$550 & 63]($502,$$0730)|0);
             $552 = HEAP32[$502>>2]|0;
             $553 = ((($552)) + 16|0);
             $554 = HEAP32[$553>>2]|0;
             $555 = (FUNCTION_TABLE_iii[$554 & 63]($502,$$0730)|0);
             $556 = ($551<<16>>16)<($555<<16>>16);
             $557 = $556&1;
             $$$0731 = (($557) + ($$0731))|0;
             $558 = (($$0730) + 1)|0;
             $$0730 = $558;$$0731 = $$$0731;
            }
            $521 = ($72|0)<(0);
            $522 = $521 << 31 >> 31;
            $523 = ($74|0)<(0);
            $524 = $523 << 31 >> 31;
            $525 = (___muldi3(($74|0),($524|0),($72|0),($522|0))|0);
            $526 = tempRet0;
            $527 = ($$0731|0)<(0);
            $528 = $527 << 31 >> 31;
            $529 = (___muldi3(($525|0),($526|0),($$0731|0),($528|0))|0);
            $530 = tempRet0;
            $531 = ($$2645|0)<(0);
            $532 = $531 << 31 >> 31;
            $533 = (___divdi3(($529|0),($530|0),($$2645|0),($532|0))|0);
            $534 = tempRet0;
            $535 = (___divdi3(($533|0),($534|0),($$2645|0),($532|0))|0);
            $536 = tempRet0;
            $537 = 14072;
            $538 = $537;
            HEAP32[$538>>2] = $535;
            $539 = (($537) + 4)|0;
            $540 = $539;
            HEAP32[$540>>2] = $536;
            $541 = 14080;
            $542 = $541;
            HEAP32[$542>>2] = 0;
            $543 = (($541) + 4)|0;
            $544 = $543;
            HEAP32[$544>>2] = 0;
            $545 = ($535|0)==(0);
            $546 = ($536|0)==(0);
            $547 = $545 & $546;
            if ($547) {
             $559 = 14080;
             $560 = $559;
             HEAP32[$560>>2] = 1;
             $561 = (($559) + 4)|0;
             $562 = $561;
             HEAP32[$562>>2] = 0;
             $563 = 14072;
             $564 = $563;
             HEAP32[$564>>2] = 1;
             $565 = (($563) + 4)|0;
             $566 = $565;
             HEAP32[$566>>2] = 0;
            }
            HEAP32[5583] = $3;
            HEAP32[589] = -1;
            $567 = 14080;
            $568 = $567;
            $569 = HEAP32[$568>>2]|0;
            $570 = (($567) + 4)|0;
            $571 = $570;
            $572 = HEAP32[$571>>2]|0;
            $573 = 14072;
            $574 = $573;
            $575 = HEAP32[$574>>2]|0;
            $576 = (($573) + 4)|0;
            $577 = $576;
            $578 = HEAP32[$577>>2]|0;
            HEAP32[$vararg_buffer148>>2] = $569;
            $vararg_ptr151 = ((($vararg_buffer148)) + 4|0);
            HEAP32[$vararg_ptr151>>2] = $575;
            $vararg_ptr152 = ((($vararg_buffer148)) + 8|0);
            HEAP32[$vararg_ptr152>>2] = $19;
            __Z8v_printfiPKcz(9,6120,$vararg_buffer148);
            $$0729 = 0;
            while(1) {
             $579 = HEAP32[$502>>2]|0;
             $580 = ((($579)) + 8|0);
             $581 = HEAP32[$580>>2]|0;
             $582 = (FUNCTION_TABLE_ii[$581 & 63]($502)|0);
             $583 = ($$0729|0)<($582|0);
             if (!($583)) {
              break;
             }
             $585 = HEAP32[$502>>2]|0;
             $586 = ((($585)) + 12|0);
             $587 = HEAP32[$586>>2]|0;
             $588 = (FUNCTION_TABLE_iii[$587 & 63]($502,$$0729)|0);
             $589 = HEAP32[$502>>2]|0;
             $590 = ((($589)) + 16|0);
             $591 = HEAP32[$590>>2]|0;
             $592 = (FUNCTION_TABLE_iii[$591 & 63]($502,$$0729)|0);
             $593 = $588 << 16 >> 16;
             $594 = $592 << 16 >> 16;
             HEAP32[$vararg_buffer153>>2] = $$0729;
             $vararg_ptr156 = ((($vararg_buffer153)) + 4|0);
             HEAP32[$vararg_ptr156>>2] = $593;
             $vararg_ptr157 = ((($vararg_buffer153)) + 8|0);
             HEAP32[$vararg_ptr157>>2] = $594;
             __Z8v_printfiPKcz(10,6181,$vararg_buffer153);
             $595 = (($$0729) + 1)|0;
             $$0729 = $595;
            }
            $584 = ($$1716|0)>(0);
            $$0728 = 0;
            while(1) {
             $596 = HEAP32[$502>>2]|0;
             $597 = ((($596)) + 8|0);
             $598 = HEAP32[$597>>2]|0;
             $599 = (FUNCTION_TABLE_ii[$598 & 63]($502)|0);
             $600 = ($$0728|0)<($599|0);
             if (!($600)) {
              break;
             }
             $606 = HEAP32[$502>>2]|0;
             $607 = ((($606)) + 12|0);
             $608 = HEAP32[$607>>2]|0;
             $609 = (FUNCTION_TABLE_iii[$608 & 63]($502,$$0728)|0);
             $610 = HEAP32[$502>>2]|0;
             $611 = ((($610)) + 16|0);
             $612 = HEAP32[$611>>2]|0;
             $613 = (FUNCTION_TABLE_iii[$612 & 63]($502,$$0728)|0);
             $614 = ($609<<16>>16)<($613<<16>>16);
             do {
              if (!($614)) {
               $615 = HEAP32[$502>>2]|0;
               $616 = ((($615)) + 12|0);
               $617 = HEAP32[$616>>2]|0;
               $618 = (FUNCTION_TABLE_iii[$617 & 63]($502,$$0728)|0);
               $619 = $618 << 16 >> 16;
               HEAP32[$vararg_buffer158>>2] = $$0728;
               $vararg_ptr161 = ((($vararg_buffer158)) + 4|0);
               HEAP32[$vararg_ptr161>>2] = $619;
               __Z8v_printfiPKcz(6,6199,$vararg_buffer158);
               if ($584) {
                $$07271000 = 0;
               } else {
                break;
               }
               while(1) {
                $620 = HEAP32[$1>>2]|0;
                $621 = HEAP32[$502>>2]|0;
                $622 = ((($621)) + 12|0);
                $623 = HEAP32[$622>>2]|0;
                $624 = (FUNCTION_TABLE_iii[$623 & 63]($502,$$0728)|0);
                $625 = (($620) + (($$07271000*104)|0)|0);
                __ZN5Image19make_constant_planeEis($625,$$0728,$624);
                $626 = (($$07271000) + 1)|0;
                $627 = ($626|0)<($$1716|0);
                if ($627) {
                 $$07271000 = $626;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $628 = (($$0728) + 1)|0;
             $$0728 = $628;
            }
            $601 = HEAP32[$1>>2]|0;
            $602 = ((($601)) + 44|0);
            $603 = HEAP8[$602>>0]|0;
            $604 = ($603<<24>>24)==(0);
            do {
             if ($604) {
              label = 229;
             } else {
              $629 = HEAP32[$502>>2]|0;
              $630 = ((($629)) + 16|0);
              $631 = HEAP32[$630>>2]|0;
              $632 = (FUNCTION_TABLE_iii[$631 & 63]($502,1)|0);
              $633 = ($632<<16>>16)<(256);
              if (!($633)) {
               label = 229;
               break;
              }
              $634 = ((($5)) + 64|0);
              $635 = HEAP32[$634>>2]|0;
              $636 = ($635|0)==(0);
              if ($636) {
               label = 229;
               break;
              }
              $637 = HEAP32[$502>>2]|0;
              $638 = ((($637)) + 8|0);
              $639 = HEAP32[$638>>2]|0;
              $640 = (FUNCTION_TABLE_ii[$639 & 63]($502)|0);
              $641 = ($640|0)<(4);
              if ($641) {
               $$0726$off0872$ph = 1;
               label = 238;
               break;
              }
              $642 = HEAP32[$502>>2]|0;
              $643 = ((($642)) + 12|0);
              $644 = HEAP32[$643>>2]|0;
              $645 = (FUNCTION_TABLE_iii[$644 & 63]($502,3)|0);
              $646 = HEAP32[$502>>2]|0;
              $647 = ((($646)) + 16|0);
              $648 = HEAP32[$647>>2]|0;
              $649 = (FUNCTION_TABLE_iii[$648 & 63]($502,3)|0);
              $650 = ($645<<16>>16)==($649<<16>>16);
              if ($650) {
               $$0726$off0872$ph = 1;
               label = 238;
              } else {
               label = 229;
              }
             }
            } while(0);
            do {
             if ((label|0) == 229) {
              $605 = ($$1716|0)>(0);
              if ($605) {
               $$0725998 = 0;
              } else {
               $$0726$off0872$ph1038 = 0;
               label = 242;
               break;
              }
              while(1) {
               $652 = HEAP32[$1>>2]|0;
               $653 = (($652) + (($$0725998*104)|0)|0);
               __ZN5Image24undo_make_constant_planeEi($653,0);
               $654 = (($$0725998) + 1)|0;
               $655 = ($654|0)<($$1716|0);
               if ($655) {
                $$0725998 = $654;
               } else {
                $$0726$off0872$ph = 0;
                label = 238;
                break;
               }
              }
             }
            } while(0);
            L333: do {
             if ((label|0) == 238) {
              $651 = ($$1716|0)>(0);
              if ($651) {
               $$0724996 = 0;
              } else {
               $$0726$off0872$ph1038 = $$0726$off0872$ph;
               label = 242;
               break;
              }
              while(1) {
               $658 = HEAP32[$1>>2]|0;
               $659 = (($658) + (($$0724996*104)|0)|0);
               $660 = (__ZN5Image9real_initEb($659,$$0726$off0872$ph)|0);
               $656 = (($$0724996) + 1)|0;
               if (!($660)) {
                $$12 = 0;
                break L333;
               }
               $657 = ($656|0)<($$1716|0);
               if ($657) {
                $$0724996 = $656;
               } else {
                $$0726$off0872$ph1038 = $$0726$off0872$ph;
                label = 242;
                break;
               }
              }
             }
            } while(0);
            do {
             if ((label|0) == 242) {
              $661 = HEAP32[$502>>2]|0;
              $662 = ((($661)) + 8|0);
              $663 = HEAP32[$662>>2]|0;
              $664 = (FUNCTION_TABLE_ii[$663 & 63]($502)|0);
              $665 = ($664|0)>(3);
              do {
               if ($665) {
                $666 = HEAP32[$502>>2]|0;
                $667 = ((($666)) + 12|0);
                $668 = HEAP32[$667>>2]|0;
                $669 = (FUNCTION_TABLE_iii[$668 & 63]($502,3)|0);
                $670 = ($669<<16>>16)>(0);
                $671 = ($$1716|0)>(0);
                $or$cond1021 = $670 & $671;
                if (!($or$cond1021)) {
                 break;
                }
                $672 = HEAP32[$1>>2]|0;
                $$0723994 = 0;
                while(1) {
                 $673 = (((($672) + (($$0723994*104)|0)|0)) + 56|0);
                 HEAP8[$673>>0] = 0;
                 $674 = (($$0723994) + 1)|0;
                 $exitcond1037 = ($674|0)==($$1716|0);
                 if ($exitcond1037) {
                  break;
                 } else {
                  $$0723994 = $674;
                 }
                }
               }
              } while(0);
              $675 = HEAP32[$502>>2]|0;
              $676 = ((($675)) + 8|0);
              $677 = HEAP32[$676>>2]|0;
              $678 = (FUNCTION_TABLE_ii[$677 & 63]($502)|0);
              $679 = ($678|0)>(3);
              do {
               if ($679) {
                $680 = HEAP32[$502>>2]|0;
                $681 = ((($680)) + 16|0);
                $682 = HEAP32[$681>>2]|0;
                $683 = (FUNCTION_TABLE_iii[$682 & 63]($502,3)|0);
                $684 = ($683<<16>>16)==(0);
                $685 = ($$1716|0)>(0);
                $or$cond = $684 & $685;
                if (!($or$cond)) {
                 break;
                }
                $686 = HEAP32[$1>>2]|0;
                $$0722992 = 0;
                while(1) {
                 $687 = (((($686) + (($$0722992*104)|0)|0)) + 56|0);
                 HEAP8[$687>>0] = 0;
                 $688 = (($$0722992) + 1)|0;
                 $exitcond = ($688|0)==($$1716|0);
                 if ($exitcond) {
                  break;
                 } else {
                  $$0722992 = $688;
                 }
                }
               }
              } while(0);
              $$0718 = 0;$$0719 = 0;
              while(1) {
               $689 = HEAP32[$502>>2]|0;
               $690 = ((($689)) + 8|0);
               $691 = HEAP32[$690>>2]|0;
               $692 = (FUNCTION_TABLE_ii[$691 & 63]($502)|0);
               $693 = ($$0718|0)<($692|0);
               if (!($693)) {
                break;
               }
               $695 = HEAP32[$502>>2]|0;
               $696 = ((($695)) + 16|0);
               $697 = HEAP32[$696>>2]|0;
               $698 = (FUNCTION_TABLE_iii[$697 & 63]($502,$$0718)|0);
               $699 = HEAP32[$502>>2]|0;
               $700 = ((($699)) + 12|0);
               $701 = HEAP32[$700>>2]|0;
               $702 = (FUNCTION_TABLE_iii[$701 & 63]($502,$$0718)|0);
               $703 = ($698<<16>>16)>($702<<16>>16);
               if ($703) {
                $704 = HEAP32[$502>>2]|0;
                $705 = ((($704)) + 16|0);
                $706 = HEAP32[$705>>2]|0;
                $707 = (FUNCTION_TABLE_iii[$706 & 63]($502,$$0718)|0);
                $708 = HEAP32[$502>>2]|0;
                $709 = ((($708)) + 12|0);
                $710 = HEAP32[$709>>2]|0;
                $711 = (FUNCTION_TABLE_iii[$710 & 63]($502,$$0718)|0);
                $712 = $707 << 16 >> 16;
                $713 = $711 << 16 >> 16;
                $714 = (($712) - ($713))|0;
                $715 = $714 << 1;
                $716 = (($715) + -1)|0;
                $717 = (__ZN6maniac4utilL5ilog2Ej_66($716)|0);
                $718 = ($717|0)<($$0719|0);
                $719 = (($717) + 1)|0;
                $$0719$ = $718 ? $$0719 : $719;
                $$2721 = $$0719$;
               } else {
                $$2721 = $$0719;
               }
               $720 = (($$0718) + 1)|0;
               $$0718 = $720;$$0719 = $$2721;
              }
              $694 = ($$0719|0)>(10);
              if ($694) {
               __Z8e_printfPKcz(6236,$vararg_buffer162);
               $$12 = 0;
               break;
              }
              $721 = (__Z16flif_decode_mainILi10E8BufferIOEbR10RacInput24IT0_ERS2_RNSt3__26vectorI5ImageNS6_9allocatorIS8_EEEEPK11ColorRangesRNS7_IP9TransformIS2_ENS9_ISI_EEEER12flif_optionsPFjixESC_($8,$0,$1,$502,$15,$5,$2,$4)|0);
              __Z12v_printf_ttyiPKcz(2,6314,$vararg_buffer164);
              $722 = ($$1716|0)==(1);
              $723 = (__ZN8BufferIO7getNameEv($0)|0);
              $724 = (__ZN8BufferIO5ftellEv($0)|0);
              $725 = HEAP32[$1>>2]|0;
              $726 = (__ZNK5Image4colsEv($725)|0);
              $727 = (($726>>>0) / ($$2645>>>0))&-1;
              $728 = HEAP32[$1>>2]|0;
              $729 = (__ZNK5Image4rowsEv($728)|0);
              $730 = (($729>>>0) / ($$2645>>>0))&-1;
              $731 = (__ZN8BufferIO5ftellEv($0)|0);
              $732 = (+($731|0));
              $733 = $732 * +8;
              if ($722) {
               $734 = HEAP32[$1>>2]|0;
               $735 = (__ZNK5Image4rowsEv($734)|0);
               $736 = (+($735>>>0));
               $737 = $733 / $736;
               $738 = (+($$2645|0));
               $739 = $738 * $737;
               $740 = $738 * $739;
               $741 = HEAP32[$1>>2]|0;
               $742 = (__ZNK5Image4colsEv($741)|0);
               $743 = (+($742>>>0));
               $744 = $740 / $743;
               HEAP32[$vararg_buffer166>>2] = $723;
               $vararg_ptr169 = ((($vararg_buffer166)) + 4|0);
               HEAP32[$vararg_ptr169>>2] = $724;
               $vararg_ptr170 = ((($vararg_buffer166)) + 8|0);
               HEAP32[$vararg_ptr170>>2] = $727;
               $vararg_ptr171 = ((($vararg_buffer166)) + 12|0);
               HEAP32[$vararg_ptr171>>2] = $730;
               $vararg_ptr172 = ((($vararg_buffer166)) + 16|0);
               HEAPF64[$vararg_ptr172>>3] = $744;
               __Z8v_printfiPKcz(2,6316,$vararg_buffer166);
              } else {
               $745 = (+($$1716|0));
               $746 = $733 / $745;
               $747 = HEAP32[$1>>2]|0;
               $748 = (__ZNK5Image4rowsEv($747)|0);
               $749 = (+($748>>>0));
               $750 = $746 / $749;
               $751 = (+($$2645|0));
               $752 = $751 * $750;
               $753 = $751 * $752;
               $754 = HEAP32[$1>>2]|0;
               $755 = (__ZNK5Image4colsEv($754)|0);
               $756 = (+($755>>>0));
               $757 = $753 / $756;
               HEAP32[$vararg_buffer173>>2] = $723;
               $vararg_ptr176 = ((($vararg_buffer173)) + 4|0);
               HEAP32[$vararg_ptr176>>2] = $724;
               $vararg_ptr177 = ((($vararg_buffer173)) + 8|0);
               HEAP32[$vararg_ptr177>>2] = $$1716;
               $vararg_ptr178 = ((($vararg_buffer173)) + 12|0);
               HEAP32[$vararg_ptr178>>2] = $727;
               $vararg_ptr179 = ((($vararg_buffer173)) + 16|0);
               HEAP32[$vararg_ptr179>>2] = $730;
               $vararg_ptr180 = ((($vararg_buffer173)) + 24|0);
               HEAPF64[$vararg_ptr180>>3] = $757;
               __Z8v_printfiPKcz(2,6380,$vararg_buffer173);
              }
              $758 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($13,0,1)|0);
              $759 = ($758|0)==(0);
              $760 = HEAP32[$1>>2]|0;
              $761 = ((($1)) + 4|0);
              $762 = HEAP32[$761>>2]|0;
              $763 = ($760|0)==($762|0);
              if (!($763)) {
               $764 = ($19|0)>(99);
               $or$cond44 = $764 & $721;
               $765 = ($$2645|0)==(1);
               $or$cond46 = $765 & $or$cond44;
               $$sroa$0836$0988 = $760;
               while(1) {
                __ZN5Image15normalize_scaleEv($$sroa$0836$0988);
                if ($or$cond46) {
                 $766 = ((($$sroa$0836$0988)) + 88|0);
                 HEAP8[$766>>0] = 1;
                }
                $767 = ((($$sroa$0836$0988)) + 104|0);
                $768 = ($767|0)==($762|0);
                if ($768) {
                 break;
                } else {
                 $$sroa$0836$0988 = $767;
                }
               }
              }
              do {
               if ($$0726$off0872$ph1038) {
                $769 = HEAP32[$1>>2]|0;
                $770 = ((($769)) + 44|0);
                $771 = HEAP8[$770>>0]|0;
                $772 = ($771<<24>>24)==(0);
                if ($772) {
                 label = 269;
                 break;
                }
                $773 = HEAP32[$15>>2]|0;
                $774 = HEAP32[$483>>2]|0;
                $775 = ($773|0)==($774|0);
                L377: do {
                 if (!($775)) {
                  $793 = $774;
                  while(1) {
                   $792 = ((($793)) + -4|0);
                   $794 = HEAP32[$792>>2]|0;
                   $795 = HEAP32[$794>>2]|0;
                   $796 = ((($795)) + 32|0);
                   $797 = HEAP32[$796>>2]|0;
                   $798 = (FUNCTION_TABLE_ii[$797 & 63]($794)|0);
                   if ($798) {
                    break L377;
                   }
                   $799 = HEAP32[$483>>2]|0;
                   $800 = ((($799)) + -4|0);
                   $801 = HEAP32[$800>>2]|0;
                   $802 = HEAP32[$801>>2]|0;
                   $803 = ((($802)) + 28|0);
                   $804 = HEAP32[$803>>2]|0;
                   FUNCTION_TABLE_vii[$804 & 31]($801,$1);
                   $805 = HEAP32[$483>>2]|0;
                   $$cast$i814 = $805;
                   $806 = HEAP32[$15>>2]|0;
                   $807 = (($$cast$i814) - ($806))|0;
                   $808 = $807 >> 2;
                   $scevgep4$i$i$i815 = ((($805)) + -4|0);
                   HEAP32[$483>>2] = $scevgep4$i$i$i815;
                   __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_shrinkEj($15,$808);
                   $809 = HEAP32[$295>>2]|0;
                   $810 = ((($809)) + -4|0);
                   $811 = HEAP32[$vararg_buffer35>>2]|0;
                   $813 = $809;
                   while(1) {
                    $812 = ((($813)) + -4|0);
                    HEAP32[$295>>2] = $812;
                    $814 = HEAP32[$812>>2]|0;
                    HEAP32[$812>>2] = 0;
                    $815 = ($814|0)==(0|0);
                    if (!($815)) {
                     $818 = HEAP32[$814>>2]|0;
                     $819 = ((($818)) + 4|0);
                     $820 = HEAP32[$819>>2]|0;
                     FUNCTION_TABLE_vi[$820 & 127]($814);
                    }
                    $816 = HEAP32[$295>>2]|0;
                    $817 = ($816|0)==($810|0);
                    if ($817) {
                     break;
                    } else {
                     $813 = $816;
                    }
                   }
                   $$cast$i816 = $809;
                   $821 = (($$cast$i816) - ($811))|0;
                   $822 = $821 >> 2;
                   __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE17__annotate_shrinkEj($vararg_buffer35,$822);
                   $823 = HEAP32[$15>>2]|0;
                   $824 = HEAP32[$483>>2]|0;
                   $825 = ($823|0)==($824|0);
                   if ($825) {
                    break;
                   } else {
                    $793 = $824;
                   }
                  }
                 }
                } while(0);
                $826 = HEAP32[$15>>2]|0;
                $827 = HEAP32[$483>>2]|0;
                $828 = ($826|0)==($827|0);
                if ($828) {
                 break;
                }
                $829 = HEAP32[$295>>2]|0;
                $830 = ((($829)) + -4|0);
                $831 = HEAP32[$830>>2]|0;
                HEAP32[$vararg_buffer148>>2] = 0;
                $832 = ((($vararg_buffer148)) + 4|0);
                HEAP32[$832>>2] = 0;
                $833 = ((($vararg_buffer148)) + 8|0);
                HEAP32[$833>>2] = 0;
                $834 = HEAP32[$831>>2]|0;
                $835 = ((($834)) + 16|0);
                $836 = HEAP32[$835>>2]|0;
                $837 = (FUNCTION_TABLE_iii[$836 & 63]($831,1)|0);
                $838 = HEAP32[$831>>2]|0;
                $839 = ((($838)) + 8|0);
                $840 = HEAP32[$839>>2]|0;
                $841 = (FUNCTION_TABLE_ii[$840 & 63]($831)|0);
                $842 = $$0733$lcssa&65535;
                $843 = $837 << 16 >> 16;
                $844 = (($843) + 1)|0;
                __ZN5ImageC2Ejjssii($vararg_buffer123,$844,1,0,$842,$841,0);
                $845 = HEAP32[$832>>2]|0;
                $846 = ((($vararg_buffer148)) + 8|0);
                $847 = HEAP32[$846>>2]|0;
                $848 = ($845>>>0)<($847>>>0);
                if ($848) {
                 __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($vararg_buffer164,$vararg_buffer148,1);
                 $849 = HEAP32[$832>>2]|0;
                 __ZN5ImageC2EOS_($849,$vararg_buffer123);
                 __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($vararg_buffer164);
                 $850 = HEAP32[$832>>2]|0;
                 $851 = ((($850)) + 104|0);
                 HEAP32[$832>>2] = $851;
                } else {
                 __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($vararg_buffer148,$vararg_buffer123);
                }
                __ZN5ImageD2Ev($vararg_buffer123);
                $$0650 = 0;
                while(1) {
                 $852 = $$0650 << 16 >> 16;
                 $853 = HEAP32[$831>>2]|0;
                 $854 = ((($853)) + 16|0);
                 $855 = HEAP32[$854>>2]|0;
                 $856 = (FUNCTION_TABLE_iii[$855 & 63]($831,1)|0);
                 $857 = ($$0650<<16>>16)>($856<<16>>16);
                 if ($857) {
                  break;
                 }
                 $861 = HEAP32[$vararg_buffer148>>2]|0;
                 __ZN5Image3setEijjs($861,1,0,$852,$$0650);
                 $862 = (($$0650) + 1)<<16>>16;
                 $$0650 = $862;
                }
                $858 = HEAP32[$15>>2]|0;
                $859 = HEAP32[$483>>2]|0;
                $860 = ($858|0)==($859|0);
                if (!($860)) {
                 $864 = $859;
                 while(1) {
                  $863 = ((($864)) + -4|0);
                  $865 = HEAP32[$863>>2]|0;
                  $866 = HEAP32[$865>>2]|0;
                  $867 = ((($866)) + 28|0);
                  $868 = HEAP32[$867>>2]|0;
                  FUNCTION_TABLE_vii[$868 & 31]($865,$vararg_buffer148);
                  $869 = HEAP32[$483>>2]|0;
                  $$cast$i808 = $869;
                  $870 = HEAP32[$15>>2]|0;
                  $871 = (($$cast$i808) - ($870))|0;
                  $872 = $871 >> 2;
                  $scevgep4$i$i$i = ((($869)) + -4|0);
                  HEAP32[$483>>2] = $scevgep4$i$i$i;
                  __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_shrinkEj($15,$872);
                  $873 = HEAP32[$15>>2]|0;
                  $874 = HEAP32[$483>>2]|0;
                  $875 = ($873|0)==($874|0);
                  if ($875) {
                   break;
                  } else {
                   $864 = $874;
                  }
                 }
                }
                $876 = (__Znwj(104)|0);
                $877 = HEAP32[$vararg_buffer148>>2]|0;
                __ZNK5Image5cloneEv($876,$877);
                $878 = HEAP32[$1>>2]|0;
                $879 = HEAP32[$761>>2]|0;
                $880 = ($878|0)==($879|0);
                if (!($880)) {
                 $$sroa$0829$0980 = $878;
                 while(1) {
                  $881 = ((($$sroa$0829$0980)) + 48|0);
                  HEAP32[$881>>2] = $876;
                  $882 = ((($$sroa$0829$0980)) + 104|0);
                  $883 = ($882|0)==($879|0);
                  if ($883) {
                   break;
                  } else {
                   $$sroa$0829$0980 = $882;
                  }
                 }
                }
                __ZNSt3__213__vector_baseI5ImageNS_9allocatorIS1_EEED2Ev($vararg_buffer148);
               } else {
                label = 269;
               }
              } while(0);
              do {
               if ((label|0) == 269) {
                $776 = HEAP32[$15>>2]|0;
                $777 = HEAP32[$483>>2]|0;
                $778 = ($776|0)==($777|0);
                if ($778) {
                 break;
                }
                $780 = $777;
                while(1) {
                 $779 = ((($780)) + -4|0);
                 $781 = HEAP32[$779>>2]|0;
                 $782 = HEAP32[$781>>2]|0;
                 $783 = ((($782)) + 28|0);
                 $784 = HEAP32[$783>>2]|0;
                 FUNCTION_TABLE_vii[$784 & 31]($781,$1);
                 $785 = HEAP32[$483>>2]|0;
                 $$cast$i809 = $785;
                 $786 = HEAP32[$15>>2]|0;
                 $787 = (($$cast$i809) - ($786))|0;
                 $788 = $787 >> 2;
                 $scevgep4$i$i$i810 = ((($785)) + -4|0);
                 HEAP32[$483>>2] = $scevgep4$i$i$i810;
                 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_shrinkEj($15,$788);
                 $789 = HEAP32[$15>>2]|0;
                 $790 = HEAP32[$483>>2]|0;
                 $791 = ($789|0)==($790|0);
                 if ($791) {
                  break;
                 } else {
                  $780 = $790;
                 }
                }
               }
              } while(0);
              $884 = HEAP32[$297>>2]|0;
              $885 = HEAP32[$14>>2]|0;
              $886 = (($884) - ($885))|0;
              $887 = $886 >> 2;
              $$cast$i806 = $885;
              $$cast = $884;
              $888 = ($$cast|0)==($$cast$i806|0);
              if (!($888)) {
               $890 = $$cast;
               while(1) {
                $889 = ((($890)) + -4|0);
                HEAP32[$297>>2] = $889;
                $891 = HEAP32[$889>>2]|0;
                HEAP32[$889>>2] = 0;
                $892 = ($891|0)==(0|0);
                if (!($892)) {
                 $895 = HEAP32[$891>>2]|0;
                 $896 = ((($895)) + 4|0);
                 $897 = HEAP32[$896>>2]|0;
                 FUNCTION_TABLE_vi[$897 & 127]($891);
                }
                $893 = HEAP32[$297>>2]|0;
                $894 = ($893|0)==($$cast$i806|0);
                if ($894) {
                 break;
                } else {
                 $890 = $893;
                }
               }
              }
              __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE17__annotate_shrinkEj($14,$887);
              $898 = HEAP32[$295>>2]|0;
              $899 = HEAP32[$vararg_buffer35>>2]|0;
              $900 = (($898) - ($899))|0;
              $901 = $900 >> 2;
              $$cast$i = $899;
              $$cast873 = $898;
              $902 = ($$cast873|0)==($$cast$i|0);
              if (!($902)) {
               $904 = $$cast873;
               while(1) {
                $903 = ((($904)) + -4|0);
                HEAP32[$295>>2] = $903;
                $905 = HEAP32[$903>>2]|0;
                HEAP32[$903>>2] = 0;
                $906 = ($905|0)==(0|0);
                if (!($906)) {
                 $909 = HEAP32[$905>>2]|0;
                 $910 = ((($909)) + 4|0);
                 $911 = HEAP32[$910>>2]|0;
                 FUNCTION_TABLE_vi[$911 & 127]($905);
                }
                $907 = HEAP32[$295>>2]|0;
                $908 = ($907|0)==($$cast$i|0);
                if ($908) {
                 break;
                } else {
                 $904 = $907;
                }
               }
              }
              __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE17__annotate_shrinkEj($vararg_buffer35,$901);
              $912 = ((($5)) + 16|0);
              $913 = HEAP32[$912>>2]|0;
              $914 = ($913|0)==(0);
              do {
               if ($914) {
                __Z8v_printfiPKcz(3,6457,$vararg_buffer181);
               } else {
                $915 = HEAP32[$1>>2]|0;
                $916 = ((($915)) + 48|0);
                $917 = HEAP32[$916>>2]|0;
                $918 = ($917|0)==(0|0);
                if (!($918)) {
                 __Z8v_printfiPKcz(2,6495,$vararg_buffer183);
                 break;
                }
                $notlhs = ($19|0)<(100);
                $notrhs = ($$2645|0)!=(1);
                $or$cond48$not = $notlhs | $notrhs;
                $$not = $721 ^ 1;
                $brmerge766 = $or$cond48$not | $$not;
                if ($brmerge766) {
                 $930 = ($$2645|0)>(1);
                 $or$cond50 = $931 | $930;
                 if ($or$cond50) {
                  __Z8v_printfiPKcz(3,6748,$vararg_buffer199);
                  break;
                 }
                 $932 = ((($5)) + 60|0);
                 $933 = HEAP32[$932>>2]|0;
                 $934 = ($933|0)==(0);
                 if ($934) {
                  __Z8v_printfiPKcz(1,6833,$vararg_buffer203);
                  break;
                 } else {
                  __Z8v_printfiPKcz(4,6807,$vararg_buffer201);
                  break;
                 }
                }
                if ($759) {
                 __Z8v_printfiPKcz(3,6712,$vararg_buffer197);
                 break;
                }
                do {
                 if ($$0737$off0) {
                  $919 = HEAP32[$761>>2]|0;
                  $920 = ($915|0)==($919|0);
                  if ($920) {
                   break;
                  } else {
                   $$sroa$0822$0976 = $915;
                  }
                  while(1) {
                   __ZN5Image24make_invisible_rgb_blackEv($$sroa$0822$0976);
                   $921 = ((($$sroa$0822$0976)) + 104|0);
                   $922 = ($921|0)==($919|0);
                   if ($922) {
                    break;
                   } else {
                    $$sroa$0822$0976 = $921;
                   }
                  }
                 }
                } while(0);
                $923 = HEAP32[$1>>2]|0;
                $924 = (__ZN5Image8checksumEv($923)|0);
                HEAP32[$vararg_buffer185>>2] = $924;
                __Z8v_printfiPKcz(8,6559,$vararg_buffer185);
                $925 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEi($13,16)|0);
                $926 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEi($13,16)|0);
                $927 = $925 << 16;
                $928 = (($926) + ($927))|0;
                HEAP32[$vararg_buffer188>>2] = $928;
                __Z8v_printfiPKcz(8,6582,$vararg_buffer188);
                $929 = ($924|0)==($928|0);
                if ($929) {
                 __Z8v_printfiPKcz(3,6692,$vararg_buffer195);
                 break;
                } else {
                 HEAP32[$vararg_buffer191>>2] = $924;
                 $vararg_ptr194 = ((($vararg_buffer191)) + 4|0);
                 HEAP32[$vararg_ptr194>>2] = $928;
                 __Z8v_printfiPKcz(1,6601,$vararg_buffer191);
                 break;
                }
               }
              } while(0);
              do {
               if ($28) {
                $935 = ($$1747|0)<(1);
                if ($935) {
                 $936 = Math_imul($$0750, $72)|0;
                 $937 = (($936|0) / ($74|0))&-1;
                 $$2748 = $937;
                } else {
                 $$2748 = $$1747;
                }
                $938 = ($$0750|0)<(1);
                if ($938) {
                 $939 = Math_imul($$2748, $74)|0;
                 $940 = (($939|0) / ($72|0))&-1;
                 $$1751 = $940;
                } else {
                 $$1751 = $$0750;
                }
                $941 = HEAP32[$1>>2]|0;
                $942 = (__ZNK5Image4colsEv($941)|0);
                $943 = ($$2748|0)==($942|0);
                if ($943) {
                 $944 = HEAP32[$1>>2]|0;
                 $945 = (__ZNK5Image4rowsEv($944)|0);
                 $946 = ($$1751|0)==($945|0);
                 if ($946) {
                  break;
                 }
                }
                HEAP32[$vararg_buffer205>>2] = $$2748;
                $vararg_ptr208 = ((($vararg_buffer205)) + 4|0);
                HEAP32[$vararg_ptr208>>2] = $$1751;
                __Z8v_printfiPKcz(3,6886,$vararg_buffer205);
                $947 = HEAP32[$761>>2]|0;
                $948 = HEAP32[$1>>2]|0;
                $949 = ($947|0)==($948|0);
                if ($949) {
                 break;
                }
                $$0641973 = 0;
                while(1) {
                 $950 = HEAP32[$1>>2]|0;
                 $951 = (($950) + (($$0641973*104)|0)|0);
                 __ZN5ImageC2ERKS_ii($vararg_buffer205,$951,$$2748,$$1751);
                 $952 = (($950) + (($$0641973*104)|0)|0);
                 (__ZN5ImageaSEOS_($952,$vararg_buffer205)|0);
                 __ZN5ImageD2Ev($vararg_buffer205);
                 $953 = (($$0641973) + 1)|0;
                 $954 = HEAP32[$761>>2]|0;
                 $955 = HEAP32[$1>>2]|0;
                 $956 = (($954) - ($955))|0;
                 $957 = (($956|0) / 104)&-1;
                 $958 = ($953>>>0)<($957>>>0);
                 if ($958) {
                  $$0641973 = $953;
                 } else {
                  break;
                 }
                }
               }
              } while(0);
              $959 = HEAP32[5583]|0;
              $960 = ($959|0)>(10000);
              if ($960) {
               HEAP32[5583] = 10000;
              }
              $961 = ($2|0)==(0|0);
              do {
               if (!($961)) {
                $962 = HEAP32[5583]|0;
                $963 = HEAP32[589]|0;
                $964 = ($962|0)>($963|0);
                if (!($964)) {
                 break;
                }
                $965 = HEAP32[$761>>2]|0;
                $966 = HEAP32[$1>>2]|0;
                $967 = ($965|0)==($966|0);
                if (!($967)) {
                 $$0971 = 0;
                 while(1) {
                  $987 = HEAP32[$4>>2]|0;
                  $988 = HEAP32[$1>>2]|0;
                  $989 = (($988) + (($$0971*104)|0)|0);
                  __ZNK5Image5cloneEv($vararg_buffer164,$989);
                  $990 = (($987) + (($$0971*104)|0)|0);
                  (__ZN5ImageaSEOS_($990,$vararg_buffer164)|0);
                  __ZN5ImageD2Ev($vararg_buffer164);
                  $991 = (($$0971) + 1)|0;
                  $992 = HEAP32[$761>>2]|0;
                  $993 = HEAP32[$1>>2]|0;
                  $994 = (($992) - ($993))|0;
                  $995 = (($994|0) / 104)&-1;
                  $996 = ($991>>>0)<($995>>>0);
                  if ($996) {
                   $$0971 = $991;
                  } else {
                   break;
                  }
                 }
                }
                $968 = 14080;
                $969 = $968;
                $970 = HEAP32[$969>>2]|0;
                $971 = (($968) + 4)|0;
                $972 = $971;
                $973 = HEAP32[$972>>2]|0;
                $974 = (___muldi3(($970|0),($973|0),10000,0)|0);
                $975 = tempRet0;
                $976 = 14072;
                $977 = $976;
                $978 = HEAP32[$977>>2]|0;
                $979 = (($976) + 4)|0;
                $980 = $979;
                $981 = HEAP32[$980>>2]|0;
                $982 = (___divdi3(($974|0),($975|0),($978|0),($981|0))|0);
                $983 = tempRet0;
                $984 = (__ZN8BufferIO5ftellEv($0)|0);
                $985 = ($984|0)<(0);
                $986 = $985 << 31 >> 31;
                (FUNCTION_TABLE_iiii[$2 & 63]($982,$984,$986)|0);
               }
              } while(0);
              $997 = 14072;
              $998 = $997;
              HEAP32[$998>>2] = 0;
              $999 = (($997) + 4)|0;
              $1000 = $999;
              HEAP32[$1000>>2] = 0;
              $1001 = 14080;
              $1002 = $1001;
              HEAP32[$1002>>2] = 0;
              $1003 = (($1001) + 4)|0;
              $1004 = $1003;
              HEAP32[$1004>>2] = 0;
              $1005 = ((($5)) + 20|0);
              $1006 = HEAP32[$1005>>2]|0;
              $1007 = ($1006|0)==(0);
              if ($1007) {
               $$12 = 1;
               break;
              }
              $1008 = HEAP32[$1>>2]|0;
              $1009 = ((($1008)) + 92|0);
              $1010 = ($1009|0)==($10|0);
              if ($1010) {
               $$12 = 1;
               break;
              }
              $1011 = HEAP32[$10>>2]|0;
              $1012 = HEAP32[$48>>2]|0;
              __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($1009,$1011,$1012);
              $$12 = 1;
             }
            } while(0);
            __ZNSt3__213__vector_baseIP9TransformI8BufferIOENS_9allocatorIS4_EEED2Ev($15);
            $$13 = $$12;
           }
           __ZNSt3__213__vector_baseINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEED2Ev($14);
           __ZNSt3__213__vector_baseINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEED2Ev($vararg_buffer35);
           $$16 = $$13;
          }
         } while(0);
         $$17 = $$16;
        }
       } while(0);
       __ZN8MetaDataD2Ev($12);
       $$21 = $$17;
      } else {
       $$21 = 0;
      }
     } else {
      $$21 = 0;
     }
    } else {
     $52 = (__ZN8BufferIO7getNameEv($0)|0);
     HEAP32[$vararg_buffer8>>2] = $52;
     __Z8e_printfPKcz(4349,$vararg_buffer8);
     $$21 = 0;
    }
   } while(0);
   __ZNSt3__213__vector_baseI8MetaDataNS_9allocatorIS1_EEED2Ev($10);
   $$22 = $$21;
  }
 } while(0);
 $$23 = $$22;
 STACKTOP = sp;return ($$23|0);
}
function __ZN8BufferIO4getsEPci($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$014$lcssa = 0, $$01416 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) + -1)|0;
 $4 = ($2|0)>(1);
 L1: do {
  if ($4) {
   $$01416 = 0;
   while(1) {
    $5 = (__ZN8BufferIO5isEOFEv($0)|0);
    if ($5) {
     $$014$lcssa = $$01416;
     break L1;
    }
    $6 = (__ZN8BufferIO4getcEv($0)|0);
    $7 = ($6|0)>(-1);
    if (!($7)) {
     $$014$lcssa = $$01416;
     break L1;
    }
    $8 = $6&255;
    $9 = (($1) + ($$01416)|0);
    HEAP8[$9>>0] = $8;
    $10 = (($$01416) + 1)|0;
    $11 = ($10|0)<($3|0);
    if ($11) {
     $$01416 = $10;
    } else {
     $$014$lcssa = $10;
     break;
    }
   }
  } else {
   $$014$lcssa = 0;
  }
 } while(0);
 $12 = (($1) + ($$014$lcssa)|0);
 HEAP8[$12>>0] = 0;
 return ($1|0);
}
function __ZN8BufferIO7getNameEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8601|0);
}
function __ZN8BufferIO5fseekEli($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___cxa_allocate_exception(8)|0);
 __ZNSt13runtime_errorC2EPKc($3,8585);
 ___cxa_throw(($3|0),(880|0),(65|0));
 // unreachable;
}
function __Z14ioget_int_8bitI8BufferIOEbRT_Pi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (__ZN8BufferIO4getcEv($0)|0);
 $3 = ((($0)) + 4116|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  __Z8e_printfPKcz(8570,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$1>>2] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __Z22read_big_endian_varintI8BufferIOEjRT_($0) {
 $0 = $0|0;
 var $$01722$lcssa24 = 0, $$2 = 0, $$lcssa23 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (__ZN8BufferIO4getcEv($0)|0);
 $2 = ($1|0)<(0);
 do {
  if (!($2)) {
   $3 = ($1|0)<(128);
   if ($3) {
    $$01722$lcssa24 = 0;$$lcssa23 = $1;
   } else {
    $5 = $1 << 7;
    $6 = (__ZN8BufferIO4getcEv($0)|0);
    $7 = ($6|0)<(0);
    if ($7) {
     break;
    }
    $8 = (($5) + -16384)|0;
    $9 = ($6|0)<(128);
    if ($9) {
     $$01722$lcssa24 = $8;$$lcssa23 = $6;
    } else {
     $10 = (($5) + 33537920)|0;
     $11 = (($10) + ($6))|0;
     $12 = $11 << 7;
     $13 = (__ZN8BufferIO4getcEv($0)|0);
     $14 = ($13|0)<(0);
     if ($14) {
      break;
     }
     $15 = ($13|0)<(128);
     if ($15) {
      $$01722$lcssa24 = $12;$$lcssa23 = $13;
     } else {
      $16 = (($12) + 33554304)|0;
      $17 = (($16) + ($13))|0;
      $18 = $17 << 7;
      $19 = (__ZN8BufferIO4getcEv($0)|0);
      $20 = ($19|0)<(0);
      if ($20) {
       break;
      }
      $21 = ($19|0)<(128);
      if ($21) {
       $$01722$lcssa24 = $18;$$lcssa23 = $19;
      } else {
       $22 = (($18) + 33554304)|0;
       $23 = (($22) + ($19))|0;
       $24 = $23 << 7;
       $25 = (__ZN8BufferIO4getcEv($0)|0);
       $26 = ($25|0)<(0);
       if ($26) {
        break;
       }
       $27 = ($25|0)<(128);
       if ($27) {
        $$01722$lcssa24 = $24;$$lcssa23 = $25;
       } else {
        $28 = (($24) + 33554304)|0;
        $29 = (($28) + ($25))|0;
        $30 = $29 << 7;
        $31 = (__ZN8BufferIO4getcEv($0)|0);
        $32 = ($31|0)<(0);
        if ($32) {
         break;
        }
        $33 = ($31|0)<(128);
        if ($33) {
         $$01722$lcssa24 = $30;$$lcssa23 = $31;
        } else {
         $34 = (($30) + 33554304)|0;
         $35 = (($34) + ($31))|0;
         $36 = $35 << 7;
         $37 = (__ZN8BufferIO4getcEv($0)|0);
         $38 = ($37|0)<(0);
         if ($38) {
          break;
         }
         $39 = ($37|0)<(128);
         if ($39) {
          $$01722$lcssa24 = $36;$$lcssa23 = $37;
         } else {
          $40 = (($36) + 33554304)|0;
          $41 = (($40) + ($37))|0;
          $42 = $41 << 7;
          $43 = (__ZN8BufferIO4getcEv($0)|0);
          $44 = ($43|0)<(0);
          if ($44) {
           break;
          }
          $45 = ($43|0)<(128);
          if ($45) {
           $$01722$lcssa24 = $42;$$lcssa23 = $43;
          } else {
           $46 = (($42) + 33554304)|0;
           $47 = (($46) + ($43))|0;
           $48 = $47 << 7;
           $49 = (__ZN8BufferIO4getcEv($0)|0);
           $50 = ($49|0)<(0);
           if ($50) {
            break;
           }
           $51 = ($49|0)<(128);
           if ($51) {
            $$01722$lcssa24 = $48;$$lcssa23 = $49;
           } else {
            $52 = (__ZN8BufferIO4getcEv($0)|0);
            $53 = ($52|0)<(0);
            if ($53) {
             break;
            }
            $54 = (($48) + 33554304)|0;
            $55 = (($54) + ($49))|0;
            $56 = $55 << 7;
            $57 = ($52|0)<(128);
            if ($57) {
             $$01722$lcssa24 = $56;$$lcssa23 = $52;
            } else {
             break;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   $4 = (($$lcssa23) + ($$01722$lcssa24))|0;
   $$2 = $4;
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 __Z8e_printfPKcz(8541,$vararg_buffer);
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function __ZN8MetaDataC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __Z10read_chunkI8BufferIOEiRT_R8MetaData($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$022 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (__ZN8BufferIO4getcEv($0)|0);
 $3 = $2&255;
 HEAP8[$1>>0] = $3;
 $sext = $2 << 24;
 $4 = ($sext|0)<(536870912);
 if ($4) {
  $5 = ($sext|0)>(0);
  if (!($5)) {
   $$022 = 1;
   STACKTOP = sp;return ($$022|0);
  }
  __Z8e_printfPKcz(8363,$vararg_buffer);
  $$022 = -2;
  STACKTOP = sp;return ($$022|0);
 }
 $6 = ((($1)) + 1|0);
 (__ZN8BufferIO4getsEPci($0,$6,4)|0);
 $7 = (_strcmp($1,4755)|0);
 $8 = ($7|0)==(0);
 do {
  if (!($8)) {
   $9 = (_strcmp($1,4760)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = (_strcmp($1,4765)|0);
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = HEAP8[$1>>0]|0;
     $14 = ($13<<24>>24)>(90);
     if ($14) {
      HEAP32[$vararg_buffer1>>2] = $1;
      __Z8v_printfiPKcz(1,8454,$vararg_buffer1);
      break;
     }
     HEAP32[$vararg_buffer3>>2] = $1;
     __Z8e_printfPKcz(8494,$vararg_buffer3);
     $$022 = -1;
     STACKTOP = sp;return ($$022|0);
    }
   }
  }
 } while(0);
 $15 = (__Z22read_big_endian_varintI8BufferIOEjRT_($0)|0);
 $16 = ((($1)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($1)) + 12|0);
 __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEj($17,$15);
 $18 = HEAP32[$16>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  $$022 = 0;
  STACKTOP = sp;return ($$022|0);
 }
 $$023 = 0;
 while(1) {
  $20 = (__ZN8BufferIO4getcEv($0)|0);
  $21 = $20&255;
  $22 = HEAP32[$17>>2]|0;
  $23 = (($22) + ($$023)|0);
  HEAP8[$23>>0] = $21;
  $24 = (($$023) + 1)|0;
  $25 = HEAP32[$16>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $$023 = $24;
  } else {
   $$022 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($$022|0);
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN8MetaDataC2ERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($2,$3);
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 24)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 24)&-1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 24)&-1;
  __ZNSt3__214__split_bufferI8MetaDataRNS_9allocatorIS1_EEEC2EjjS4_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN8MetaDataC2ERKS_($25,$1);
  $26 = HEAP32[$24>>2]|0;
  $27 = ((($26)) + 24|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$2);
  __ZNSt3__214__split_bufferI8MetaDataRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN5ImageC2Ei($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $2 = ((($0)) + 36|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 40|0);
 HEAP32[$3>>2] = 8;
 $4 = ((($0)) + 48|0);
 $5 = ((($0)) + 56|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($0)) + 60|0);
 $7 = ((($0)) + 92|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 96|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 100|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 20|0);
 $11 = ((($0)) + 52|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 44|0);
 HEAP8[$12>>0] = 0;
 HEAP32[$4>>2] = 0;
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;
 ;HEAP32[$6>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;HEAP32[$6+12>>2]=0|0;HEAP32[$6+16>>2]=0|0;HEAP32[$6+20>>2]=0|0;HEAP32[$6+24>>2]=0|0;HEAP8[$6+28>>0]=0|0;
 return;
}
function __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN5ImageC2EOS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $2 = ((($0)) + 40|0);
 HEAP32[$2>>2] = 8;
 $3 = ((($0)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 56|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($0)) + 60|0);
 $6 = ((($0)) + 92|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 96|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 100|0);
 HEAP32[$8>>2] = 0;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 (__ZN5ImageaSEOS_($0,$1)|0);
 return;
}
function __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 104)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 104)&-1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 104)&-1;
  __ZNSt3__214__split_bufferI5ImageRNS_9allocatorIS1_EEEC2EjjS4_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  __ZN5ImageC2EOS_($25,$1);
  $26 = HEAP32[$24>>2]|0;
  $27 = ((($26)) + 104|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$2);
  __ZNSt3__214__split_bufferI5ImageRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN5ImageD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 __ZNSt3__213__vector_baseI8MetaDataNS_9allocatorIS1_EEED2Ev($1);
 $2 = ((($0)) + 72|0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($2);
 $3 = ((($0)) + 60|0);
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($3);
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ((($7)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vi[$9 & 127]($5);
 }
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$10>>2] = 0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[$11>>2]|0;
  $14 = ((($13)) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 127]($11);
 }
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$16>>2] = 0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = HEAP32[$17>>2]|0;
  $20 = ((($19)) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vi[$21 & 127]($17);
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$22>>2] = 0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = HEAP32[$23>>2]|0;
  $26 = ((($25)) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vi[$27 & 127]($23);
 }
 $28 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  return;
 }
 $30 = HEAP32[$28>>2]|0;
 $31 = ((($30)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$32 & 127]($28);
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$0$lcssa$i$i = 0, $$067$i$i = 0, $$08$i$i = 0, $$cast$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 24)&-1;
 $12 = ($6>>>0)>($11>>>0);
 if ($12) {
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE10deallocateEv($0);
  $34 = (__ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
  $35 = ($34>>>0)<($6>>>0);
  if ($35) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $36 = HEAP32[$7>>2]|0;
  $37 = HEAP32[$0>>2]|0;
  $38 = (($36) - ($37))|0;
  $39 = (($38|0) / 24)&-1;
  $40 = $34 >>> 1;
  $41 = ($39>>>0)<($40>>>0);
  $42 = $39 << 1;
  $43 = ($42>>>0)<($6>>>0);
  $$sroa$speculated$i = $43 ? $6 : $42;
  $$0$i = $41 ? $$sroa$speculated$i : $34;
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8allocateEj($0,$$0$i);
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$1,$2,$6);
  return;
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($9))|0;
 $16 = (($15|0) / 24)&-1;
 $17 = ($6>>>0)>($16>>>0);
 $18 = (($1) + (($16*24)|0)|0);
 $$ = $17 ? $18 : $2;
 $19 = HEAP32[$0>>2]|0;
 $20 = ($$|0)==($1|0);
 if ($20) {
  $$0$lcssa$i$i = $19;
 } else {
  $$067$i$i = $1;$$08$i$i = $19;
  while(1) {
   (__ZN8MetaDataaSERKS_($$08$i$i,$$067$i$i)|0);
   $21 = ((($$067$i$i)) + 24|0);
   $22 = ((($$08$i$i)) + 24|0);
   $23 = ($21|0)==($$|0);
   if ($23) {
    $$0$lcssa$i$i = $22;
    break;
   } else {
    $$067$i$i = $21;$$08$i$i = $22;
   }
  }
 }
 $24 = HEAP32[$13>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = (($26|0) / 24)&-1;
 if ($17) {
  $28 = (($6) - ($27))|0;
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$$,$2,$28);
  return;
 }
 $$cast$i = $24;
 $29 = ($$cast$i|0)==($$0$lcssa$i$i|0);
 if (!($29)) {
  $31 = $$cast$i;
  while(1) {
   $30 = ((($31)) + -24|0);
   HEAP32[$13>>2] = $30;
   __ZN8MetaDataD2Ev($30);
   $32 = HEAP32[$13>>2]|0;
   $33 = ($32|0)==($$0$lcssa$i$i|0);
   if ($33) {
    break;
   } else {
    $31 = $32;
   }
  }
 }
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$27);
 return;
}
function __ZN8BufferIO5ftellEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN10RacInput24I8BufferIOEC2ERS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN8RacInputI11RacConfig248BufferIOEC2ERS1_($0,$1);
 return;
}
function __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$neg12 = 0, $$tr10$ph = 0, $$tr11 = 0, $$tr11$ph = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr10$ph = $1;$$tr11$ph = $2;
 L1: while(1) {
  $$tr11 = $$tr11$ph;
  while(1) {
   $3 = ($$tr11|0)==(0);
   if ($3) {
    break L1;
   }
   $4 = (($$tr11|0) / 2)&-1;
   $5 = HEAP32[$0>>2]|0;
   $6 = (__ZN8RacInputI11RacConfig248BufferIOE8read_bitEv($5)|0);
   if ($6) {
    break;
   } else {
    $$tr11 = $4;
   }
  }
  $7 = (($$tr10$ph) + 1)|0;
  $8 = (($7) + ($4))|0;
  $$neg12 = (($$tr11) + -1)|0;
  $9 = (($$neg12) - ($4))|0;
  $$tr10$ph = $8;$$tr11$ph = $9;
 }
 return ($$tr10$ph|0);
}
function __ZN6maniac4utilL5ilog2Ej_66($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $2 = (Math_clz32(($0|0))|0);
 $3 = (31 - ($2))|0;
 $$0 = $1 ? 0 : $3;
 return ($$0|0);
}
function __ZN5Image9semi_initEjjssi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$cast = 0, $$cast$i = 0, $$cast$i15 = 0, $$cast20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $scevgep$i$i$i = 0, $scevgep$i$i$i16 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $6 = sp;
 $7 = ((($0)) + 20|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($0)) + 28|0);
 HEAP16[$9>>1] = $3;
 $10 = ((($0)) + 30|0);
 HEAP16[$10>>1] = $4;
 $11 = ((($0)) + 32|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($0)) + 84|0);
 HEAP32[$12>>2] = -1;
 $13 = ((($0)) + 52|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 44|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($0)) + 48|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($0)) + 56|0);
 HEAP8[$16>>0] = 1;
 $17 = ((($0)) + 88|0);
 HEAP8[$17>>0] = 0;
 __ZN5Image5clearEv($0);
 $18 = ((($0)) + 60|0);
 $19 = ((($0)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$18>>2]|0;
 $22 = (($20) - ($21))|0;
 $23 = $22 >> 2;
 $$cast$i = $21;
 $$cast = $20;
 $24 = ($$cast|0)==($$cast$i|0);
 if (!($24)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $25 = $scevgep$i$i$i;
  $26 = (($25) - ($21))|0;
  $27 = $26 >>> 2;
  $28 = $27 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($28<<2)|0);
  HEAP32[$19>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($18,$23);
 $29 = HEAP32[$8>>2]|0;
 HEAP32[$6>>2] = 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($18,$29,$6);
 $30 = ((($0)) + 72|0);
 $31 = ((($0)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = HEAP32[$30>>2]|0;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $$cast$i15 = $33;
 $$cast20 = $32;
 $36 = ($$cast20|0)==($$cast$i15|0);
 if ($36) {
  __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($30,$35);
  $41 = HEAP32[$8>>2]|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($30,$41,$7);
  STACKTOP = sp;return 1;
 }
 $scevgep$i$i$i16 = ((($$cast20)) + -4|0);
 $37 = $scevgep$i$i$i16;
 $38 = (($37) - ($33))|0;
 $39 = $38 >>> 2;
 $40 = $39 ^ -1;
 $scevgep4$i$i$i17 = (($$cast20) + ($40<<2)|0);
 HEAP32[$31>>2] = $scevgep4$i$i$i17;
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($30,$35);
 $41 = HEAP32[$8>>2]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($30,$41,$7);
 STACKTOP = sp;return 1;
}
function __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEERNS_9allocatorIS6_EEEC2EjjS9_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  HEAP32[$25>>2] = $26;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($0,$2);
  __ZNSt3__214__split_bufferINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEERNS_9allocatorIS6_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN8RacInputI11RacConfig248BufferIOE8read_bitEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 1;
 $4 = (__ZN8RacInputI11RacConfig248BufferIOE3getEj($0,$3)|0);
 return ($4|0);
}
function __ZN8BufferIO5isEOFEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function __ZL9read_nameI10RacInput24I8BufferIOEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_Ri($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($3,$1);
 $4 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($3,0,13)|0);
 $5 = ($4|0)>(13);
 $$ = $5 ? 13 : $4;
 HEAP32[$2>>2] = $$;
 $6 = HEAP32[5580]|0;
 $7 = (($6) + (($$*12)|0)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$7);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__RAII_IncreaseAnnotatorC2ERKSA_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE21__push_back_slow_pathIS7_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEERNS_9allocatorIS7_EEEC2EjjSA_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$1>>2] = 0;
  HEAP32[$25>>2] = $26;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS7_RS9_EE($0,$2);
  __ZNSt3__214__split_bufferINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEERNS_9allocatorIS7_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 2;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 2;
  __ZNSt3__214__split_bufferIP9TransformI8BufferIOERNS_9allocatorIS4_EEEC2EjjS7_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$1>>2]|0;
  HEAP32[$25>>2] = $26;
  $27 = HEAP32[$24>>2]|0;
  $28 = ((($27)) + 4|0);
  HEAP32[$24>>2] = $28;
  __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($0,$2);
  __ZNSt3__214__split_bufferIP9TransformI8BufferIOERNS_9allocatorIS4_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN5Image9real_initEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(9);
 if ($7) {
  $8 = ($4|0)>(0);
  if (!($8)) {
   STACKTOP = sp;return 1;
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $11 = ((($0)) + 20|0);
   $12 = ((($0)) + 24|0);
   HEAP32[$2>>2] = 0;
   $13 = ((($0)) + 36|0);
   $14 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$2,$13)|0);
   $15 = HEAP32[$0>>2]|0;
   HEAP32[$0>>2] = $14;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = HEAP32[$15>>2]|0;
    $18 = ((($17)) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vi[$19 & 127]($15);
   }
  }
  $20 = ($4|0)>(1);
  if (!($20)) {
   STACKTOP = sp;return 1;
  }
  $21 = ((($0)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0|0);
  do {
   if ($23) {
    $24 = ((($0)) + 20|0);
    $25 = ((($0)) + 24|0);
    if ($1) {
     HEAP32[$2>>2] = 0;
     $26 = ((($0)) + 36|0);
     $27 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($24,$25,$2,$26)|0);
     $28 = HEAP32[$21>>2]|0;
     HEAP32[$21>>2] = $27;
     $29 = ($28|0)==(0|0);
     if (!($29)) {
      $30 = HEAP32[$28>>2]|0;
      $31 = ((($30)) + 32|0);
      $32 = HEAP32[$31>>2]|0;
      FUNCTION_TABLE_vi[$32 & 127]($28);
     }
     break;
    } else {
     HEAP32[$2>>2] = 0;
     $33 = ((($0)) + 36|0);
     $34 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($24,$25,$2,$33)|0);
     $35 = HEAP32[$21>>2]|0;
     HEAP32[$21>>2] = $34;
     $36 = ($35|0)==(0|0);
     if (!($36)) {
      $37 = HEAP32[$35>>2]|0;
      $38 = ((($37)) + 32|0);
      $39 = HEAP32[$38>>2]|0;
      FUNCTION_TABLE_vi[$39 & 127]($35);
     }
     break;
    }
   }
  } while(0);
  $40 = ($4|0)>(2);
  if (!($40)) {
   STACKTOP = sp;return 1;
  }
  $41 = ((($0)) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $44 = ((($0)) + 20|0);
   $45 = ((($0)) + 24|0);
   HEAP32[$2>>2] = 0;
   $46 = ((($0)) + 36|0);
   $47 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($44,$45,$2,$46)|0);
   $48 = HEAP32[$41>>2]|0;
   HEAP32[$41>>2] = $47;
   $49 = ($48|0)==(0|0);
   if (!($49)) {
    $50 = HEAP32[$48>>2]|0;
    $51 = ((($50)) + 32|0);
    $52 = HEAP32[$51>>2]|0;
    FUNCTION_TABLE_vi[$52 & 127]($48);
   }
  }
  $53 = ($4|0)>(3);
  if (!($53)) {
   STACKTOP = sp;return 1;
  }
  $54 = ((($0)) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if ($56) {
   $57 = ((($0)) + 20|0);
   $58 = ((($0)) + 24|0);
   HEAP32[$2>>2] = 0;
   $59 = ((($0)) + 36|0);
   $60 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($57,$58,$2,$59)|0);
   $61 = HEAP32[$54>>2]|0;
   HEAP32[$54>>2] = $60;
   $62 = ($61|0)==(0|0);
   if (!($62)) {
    $63 = HEAP32[$61>>2]|0;
    $64 = ((($63)) + 32|0);
    $65 = HEAP32[$64>>2]|0;
    FUNCTION_TABLE_vi[$65 & 127]($61);
   }
  }
 }
 $66 = ($4|0)>(4);
 if (!($66)) {
  STACKTOP = sp;return 1;
 }
 $67 = ((($0)) + 16|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0|0);
 if (!($69)) {
  STACKTOP = sp;return 1;
 }
 $70 = ((($0)) + 20|0);
 $71 = ((($0)) + 24|0);
 HEAP32[$2>>2] = 0;
 $72 = ((($0)) + 36|0);
 $73 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($70,$71,$2,$72)|0);
 $74 = HEAP32[$67>>2]|0;
 HEAP32[$67>>2] = $73;
 $75 = ($74|0)==(0|0);
 if (!($75)) {
  $76 = HEAP32[$74>>2]|0;
  $77 = ((($76)) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  FUNCTION_TABLE_vi[$78 & 127]($74);
 }
 STACKTOP = sp;return 1;
}
function __Z16flif_decode_mainILi10E8BufferIOEbR10RacInput24IT0_ERS2_RNSt3__26vectorI5ImageNS6_9allocatorIS8_EEEEPK11ColorRangesRNS7_IP9TransformIS2_ENS9_ISI_EEEER12flif_optionsPFjixESC_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$166 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer8 = sp + 48|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer4 = sp + 24|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp;
 $8 = sp + 116|0;
 $9 = sp + 104|0;
 $10 = sp + 100|0;
 $11 = sp + 76|0;
 $12 = sp + 88|0;
 $13 = sp + 64|0;
 $14 = sp + 52|0;
 $15 = ((($5)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = ((($17)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 63]($3)|0);
 __ZN4TreeC2Ev($9);
 __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEEC2EjRKS1_($8,$20,$9);
 __ZNSt3__213__vector_baseI20PropertyDecisionNodeNS_9allocatorIS1_EEED2Ev($9);
 HEAP32[$9>>2] = 0;
 $21 = HEAP8[$5>>0]|0;
 $22 = ($21<<24>>24)==(2);
 do {
  if ($22) {
   __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($10,$0);
   $23 = HEAP32[$2>>2]|0;
   $24 = (__ZNK5Image5zoomsEv($23)|0);
   $25 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($10,0,$24)|0);
   HEAP32[$9>>2] = $25;
   $26 = HEAP32[$2>>2]|0;
   $27 = (__ZNK5Image5zoomsEv($26)|0);
   $28 = HEAP32[$9>>2]|0;
   $29 = (($28) + 1)|0;
   $30 = (__Z22flif_decode_FLIF2_passI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_I4TreeNSD_ISK_EEEEiiR12flif_optionsRNSB_IP9TransformIS6_ENSD_ISS_EEEEPFjixESG_($1,$0,$2,$3,$8,$27,$29,$5,$4,$6,$7)|0);
   if (!($30)) {
    $31 = HEAP32[$3>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($3)|0);
    __ZNSt3__26vectorIiNS_9allocatorIiEEEC2EjRKi($11,$34,$9);
    $35 = HEAP32[$9>>2]|0;
    __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($12,$11);
    __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($2,$3,0,$35,0,-1,$16,$12,$4);
    __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($12);
    __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($11);
    $$166 = 0;
    __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
    STACKTOP = sp;return ($$166|0);
   }
   $$pr = HEAP8[$5>>0]|0;
   $36 = ($$pr<<24>>24)==(2);
   if ($36) {
    $37 = ((($5)) + 28|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)<(1);
    if ($39) {
     $62 = 14072;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = (($62) + 4)|0;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)>(0);
     $69 = ($64>>>0)>(1);
     $70 = ($67|0)==(0);
     $71 = $70 & $69;
     $72 = $68 | $71;
     if (!($72)) {
      break;
     }
    } else {
     $40 = 14080;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $43 = (($40) + 4)|0;
     $44 = $43;
     $45 = HEAP32[$44>>2]|0;
     $46 = 14072;
     $47 = $46;
     $48 = HEAP32[$47>>2]|0;
     $49 = (($46) + 4)|0;
     $50 = $49;
     $51 = HEAP32[$50>>2]|0;
     $52 = ($45|0)>($51|0);
     $53 = ($42>>>0)>=($48>>>0);
     $54 = ($45|0)==($51|0);
     $55 = $54 & $53;
     $56 = $52 | $55;
     $57 = ($51|0)>(0);
     $58 = ($48>>>0)>(1);
     $59 = ($51|0)==(0);
     $60 = $59 & $58;
     $61 = $57 | $60;
     $or$cond = $56 & $61;
     if (!($or$cond)) {
      break;
     }
    }
    $73 = 14080;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $76 = (($73) + 4)|0;
    $77 = $76;
    $78 = HEAP32[$77>>2]|0;
    $79 = 14072;
    $80 = $79;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($79) + 4)|0;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = $vararg_buffer;
    $86 = $85;
    HEAP32[$86>>2] = $75;
    $87 = (($85) + 4)|0;
    $88 = $87;
    HEAP32[$88>>2] = $78;
    $vararg_ptr1 = ((($vararg_buffer)) + 8|0);
    $89 = $vararg_ptr1;
    $90 = $89;
    HEAP32[$90>>2] = $81;
    $91 = (($89) + 4)|0;
    $92 = $91;
    HEAP32[$92>>2] = $84;
    __Z8v_printfiPKcz(3,6908,$vararg_buffer);
    $93 = HEAP32[$3>>2]|0;
    $94 = ((($93)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (FUNCTION_TABLE_ii[$95 & 63]($3)|0);
    __ZNSt3__26vectorIiNS_9allocatorIiEEEC2EjRKi($vararg_buffer,$96,$9);
    $97 = HEAP32[$9>>2]|0;
    __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($13,$vararg_buffer);
    __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($2,$3,0,$97,0,-1,$16,$13,$4);
    __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
    $98 = 14080;
    $99 = $98;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) + 4)|0;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = 14072;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $107 = (($104) + 4)|0;
    $108 = $107;
    $109 = HEAP32[$108>>2]|0;
    $110 = ($103|0)>($109|0);
    $111 = ($100>>>0)>=($106>>>0);
    $112 = ($103|0)==($109|0);
    $113 = $112 & $111;
    $114 = $110 | $113;
    __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($vararg_buffer);
    $$166 = $114;
    __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
    STACKTOP = sp;return ($$166|0);
   }
  }
 } while(0);
 __Z8v_printfiPKcz(3,6972,$vararg_buffer2);
 $115 = HEAP8[$5>>0]|0;
 $116 = (__Z16flif_decode_treeI8BufferIO15SimpleBitChance10RacInput24IS0_EEbRT_RT1_PK11ColorRangesRNSt3__26vectorI4TreeNSB_9allocatorISD_EEEE12flifEncoding($1,$0,$3,$8,$115)|0);
 $117 = HEAP8[$5>>0]|0;
 if (!($116)) {
  $118 = ($117<<24>>24)==(2);
  if (!($118)) {
   $$166 = 0;
   __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
   STACKTOP = sp;return ($$166|0);
  }
  __Z8v_printfiPKcz(1,7024,$vararg_buffer4);
  $119 = HEAP32[$3>>2]|0;
  $120 = ((($119)) + 8|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = (FUNCTION_TABLE_ii[$121 & 63]($3)|0);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2EjRKi($vararg_buffer4,$122,$9);
  $123 = HEAP32[$9>>2]|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($14,$vararg_buffer4);
  __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($2,$3,0,$123,0,-1,$16,$14,$4);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($14);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($vararg_buffer4);
  $$166 = 0;
  __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
  STACKTOP = sp;return ($$166|0);
 }
 switch ($117<<24>>24) {
 case 1:  {
  __Z8v_printfiPKcz(3,7109,$vararg_buffer6);
  $124 = (__Z26flif_decode_scanlines_passI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_I4TreeNSD_ISK_EEEER12flif_optionsRNSB_IP9TransformIS6_ENSD_ISS_EEEEPFjixESG_($1,$0,$2,$3,$8,$5,$4,$6,$7)|0);
  $$166 = $124;
  __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
  STACKTOP = sp;return ($$166|0);
  break;
 }
 case 2:  {
  __Z8v_printfiPKcz(3,7136,$vararg_buffer8);
  $125 = HEAP32[$9>>2]|0;
  $126 = (__Z22flif_decode_FLIF2_passI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_I4TreeNSD_ISK_EEEEiiR12flif_optionsRNSB_IP9TransformIS6_ENSD_ISS_EEEEPFjixESG_($1,$0,$2,$3,$8,$125,0,$5,$4,$6,$7)|0);
  $$166 = $126;
  __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
  STACKTOP = sp;return ($$166|0);
  break;
 }
 default: {
  $$166 = 0;
  __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($8);
  STACKTOP = sp;return ($$166|0);
 }
 }
 return (0)|0;
}
function __ZN5Image15normalize_scaleEv($0) {
 $0 = $0|0;
 var $$010 = 0, $$cast = 0, $$cast$i = 0, $$cast$i4 = 0, $$cast9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i5 = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4 >>> $6;
 $8 = (($7) + 1)|0;
 HEAP32[$2>>2] = $8;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = $11 >>> $12;
 $14 = (($13) + 1)|0;
 HEAP32[$9>>2] = $14;
 HEAP32[$5>>2] = 0;
 $15 = ((($0)) + 60|0);
 $16 = ((($0)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$15>>2]|0;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $$cast$i = $18;
 $$cast = $17;
 $21 = ($$cast|0)==($$cast$i|0);
 if (!($21)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $22 = $scevgep$i$i$i;
  $23 = (($22) - ($18))|0;
  $24 = $23 >>> 2;
  $25 = $24 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($25<<2)|0);
  HEAP32[$16>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($15,$20);
 $26 = HEAP32[$9>>2]|0;
 HEAP32[$1>>2] = 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($15,$26,$1);
 $27 = ((($0)) + 72|0);
 $28 = ((($0)) + 76|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$27>>2]|0;
 $31 = (($29) - ($30))|0;
 $32 = $31 >> 2;
 $$cast$i4 = $30;
 $$cast9 = $29;
 $33 = ($$cast9|0)==($$cast$i4|0);
 if (!($33)) {
  $scevgep$i$i$i5 = ((($$cast9)) + -4|0);
  $34 = $scevgep$i$i$i5;
  $35 = (($34) - ($30))|0;
  $36 = $35 >>> 2;
  $37 = $36 ^ -1;
  $scevgep4$i$i$i6 = (($$cast9) + ($37<<2)|0);
  HEAP32[$28>>2] = $scevgep4$i$i$i6;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($27,$32);
 $38 = HEAP32[$9>>2]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($27,$38,$2);
 $39 = ((($0)) + 32|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)>(0);
 if ($41) {
  $$010 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $42 = (($0) + ($$010<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 44|0);
  $46 = HEAP32[$45>>2]|0;
  FUNCTION_TABLE_vi[$46 & 127]($43);
  $47 = (($$010) + 1)|0;
  $48 = HEAP32[$39>>2]|0;
  $49 = ($47|0)<($48|0);
  if ($49) {
   $$010 = $47;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($0,$2,$7,$8,$13);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$2,$7,$8,$13);
 return;
}
function __ZN5ImageC2Ejjssii($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = 8;
 $9 = ((($0)) + 48|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 56|0);
 HEAP8[$10>>0] = 1;
 $11 = ((($0)) + 60|0);
 $12 = ((($0)) + 92|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 96|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 100|0);
 HEAP32[$14>>2] = 0;
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;HEAP32[$11+20>>2]=0|0;
 (__ZN5Image4initEjjssi($0,$1,$2,$3,$4,$5)|0);
 return;
}
function __ZNK5Image5cloneEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN5ImageC2ERKS_($0,$1);
 return;
}
function __ZNSt3__213__vector_baseI5ImageNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -104|0);
   HEAP32[$3>>2] = $6;
   __ZN5ImageD2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($0,$2,$7,$8,$13);
 return;
}
function __ZN5Image24make_invisible_rgb_blackEv($0) {
 $0 = $0|0;
 var $$01517 = 0, $$016 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(4);
 if ($3) {
  return;
 }
 __ZN5Image24undo_make_constant_planeEi($0,0);
 __ZN5Image24undo_make_constant_planeEi($0,1);
 __ZN5Image24undo_make_constant_planeEi($0,2);
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = ((($0)) + 20|0);
 $$01517 = 0;
 while(1) {
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$016 = 0;
   while(1) {
    $13 = (__ZNK5ImageclEijj($0,3,$$01517,$$016)|0);
    $14 = ($13<<16>>16)==(0);
    if ($14) {
     __ZN5Image3setEijjs($0,0,$$01517,$$016,0);
     __ZN5Image3setEijjs($0,1,$$01517,$$016,0);
     __ZN5Image3setEijjs($0,2,$$01517,$$016,0);
    }
    $15 = (($$016) + 1)|0;
    $16 = HEAP32[$7>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$016 = $15;
    } else {
     break;
    }
   }
  }
  $10 = (($$01517) + 1)|0;
  $11 = HEAP32[$4>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $$01517 = $10;
  } else {
   break;
  }
 }
 return;
}
function __ZN5Image8checksumEv($0) {
 $0 = $0|0;
 var $$010 = 0, $$08$lcssa = 0, $$089 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 16;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5))|0;
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $$010 = 0;$$089 = $6;
 } else {
  $$08$lcssa = $6;
  return ($$08$lcssa|0);
 }
 while(1) {
  $10 = (($0) + ($$010<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 63]($11,$$089)|0);
  $16 = (($$010) + 1)|0;
  $17 = HEAP32[$7>>2]|0;
  $18 = ($16|0)<($17|0);
  if ($18) {
   $$010 = $16;$$089 = $15;
  } else {
   $$08$lcssa = $15;
   break;
  }
 }
 return ($$08$lcssa|0);
}
function __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = 1 << $1;
 $3 = (($2) + -1)|0;
 $4 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($0,0,$3)|0);
 return ($4|0);
}
function __ZN5ImageC2ERKS_ii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04490 = 0, $$04593 = 0, $$089 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $5 = ((($0)) + 40|0);
 HEAP32[$5>>2] = 8;
 $6 = ((($0)) + 48|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 56|0);
 HEAP8[$7>>0] = 1;
 $8 = ((($0)) + 60|0);
 $9 = ((($0)) + 92|0);
 $10 = ((($1)) + 92|0);
 ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;HEAP32[$8+16>>2]=0|0;HEAP32[$8+20>>2]=0|0;
 __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEEC2ERKS4_($9,$10);
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = $2;
 $12 = ((($0)) + 24|0);
 HEAP32[$12>>2] = $3;
 $13 = ((($1)) + 28|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ((($0)) + 28|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($1)) + 30|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ((($0)) + 30|0);
 HEAP16[$18>>1] = $17;
 $19 = ((($1)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($0)) + 32|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($0)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($1)) + 44|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ((($0)) + 44|0);
 HEAP8[$25>>0] = $24;
 $26 = ((($1)) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$6>>2] = $27;
 $28 = ((($1)) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 52|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 84|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($0)) + 84|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($1)) + 88|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ((($0)) + 88|0);
 HEAP8[$36>>0] = $35;
 __ZN5Image5clearEv($0);
 $37 = HEAP32[$21>>2]|0;
 $38 = HEAP32[$5>>2]|0;
 $39 = ($38|0)<(9);
 if ($39) {
  $40 = ($37|0)>(0);
  if ($40) {
   HEAP32[$4>>2] = 0;
   $45 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$4,$22)|0);
   $46 = HEAP32[$0>>2]|0;
   HEAP32[$0>>2] = $45;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    $48 = HEAP32[$46>>2]|0;
    $49 = ((($48)) + 32|0);
    $50 = HEAP32[$49>>2]|0;
    FUNCTION_TABLE_vi[$50 & 127]($46);
   }
   $51 = ($37|0)>(1);
   if ($51) {
    HEAP32[$4>>2] = 0;
    $52 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$4,$22)|0);
    $53 = ((($0)) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    HEAP32[$53>>2] = $52;
    $55 = ($54|0)==(0|0);
    if (!($55)) {
     $56 = HEAP32[$54>>2]|0;
     $57 = ((($56)) + 32|0);
     $58 = HEAP32[$57>>2]|0;
     FUNCTION_TABLE_vi[$58 & 127]($54);
    }
    $59 = ($37|0)>(2);
    if ($59) {
     HEAP32[$4>>2] = 0;
     $60 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$4,$22)|0);
     $61 = ((($0)) + 8|0);
     $62 = HEAP32[$61>>2]|0;
     HEAP32[$61>>2] = $60;
     $63 = ($62|0)==(0|0);
     if (!($63)) {
      $64 = HEAP32[$62>>2]|0;
      $65 = ((($64)) + 32|0);
      $66 = HEAP32[$65>>2]|0;
      FUNCTION_TABLE_vi[$66 & 127]($62);
     }
     $67 = ($37|0)>(3);
     if ($67) {
      HEAP32[$4>>2] = 0;
      $68 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$4,$22)|0);
      $69 = ((($0)) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      HEAP32[$69>>2] = $68;
      $71 = ($70|0)==(0|0);
      if (!($71)) {
       $72 = HEAP32[$70>>2]|0;
       $73 = ((($72)) + 32|0);
       $74 = HEAP32[$73>>2]|0;
       FUNCTION_TABLE_vi[$74 & 127]($70);
      }
      label = 17;
     }
    }
   }
  }
 } else {
  label = 17;
 }
 if ((label|0) == 17) {
  $75 = ($37|0)>(4);
  if ($75) {
   HEAP32[$4>>2] = 0;
   $76 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($11,$12,$4,$22)|0);
   $77 = ((($0)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP32[$77>>2] = $76;
   $79 = ($78|0)==(0|0);
   if (!($79)) {
    $80 = HEAP32[$78>>2]|0;
    $81 = ((($80)) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    FUNCTION_TABLE_vi[$82 & 127]($78);
   }
  }
 }
 $41 = HEAP32[$21>>2]|0;
 $42 = ($41|0)>(0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = ((($1)) + 24|0);
 $44 = ((($1)) + 20|0);
 $$04593 = 0;
 while(1) {
  $83 = HEAP32[$12>>2]|0;
  $84 = ($83|0)==(0);
  if (!($84)) {
   $$04490 = 0;
   while(1) {
    $85 = HEAP32[$11>>2]|0;
    $86 = ($85|0)==(0);
    if (!($86)) {
     $$089 = 0;$100 = $85;
     while(1) {
      $93 = HEAP32[$43>>2]|0;
      $94 = Math_imul($93, $$04490)|0;
      $95 = HEAP32[$12>>2]|0;
      $96 = (($94>>>0) / ($95>>>0))&-1;
      $97 = HEAP32[$44>>2]|0;
      $98 = Math_imul($97, $$089)|0;
      $99 = (($98>>>0) / ($100>>>0))&-1;
      $101 = (__ZNK5ImageclEijj($1,$$04593,$96,$99)|0);
      __ZN5Image3setEijjs($0,$$04593,$$04490,$$089,$101);
      $102 = (($$089) + 1)|0;
      $103 = HEAP32[$11>>2]|0;
      $104 = ($102>>>0)<($103>>>0);
      if ($104) {
       $$089 = $102;$100 = $103;
      } else {
       break;
      }
     }
    }
    $90 = (($$04490) + 1)|0;
    $91 = HEAP32[$12>>2]|0;
    $92 = ($90>>>0)<($91>>>0);
    if ($92) {
     $$04490 = $90;
    } else {
     break;
    }
   }
  }
  $87 = (($$04593) + 1)|0;
  $88 = HEAP32[$21>>2]|0;
  $89 = ($87|0)<($88|0);
  if ($89) {
   $$04593 = $87;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN5ImageaSEOS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$032 = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy1 = sp + 1|0;
 $2 = sp;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 28|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($0)) + 28|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($1)) + 30|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($0)) + 30|0);
 HEAP16[$14>>1] = $13;
 $15 = ((($1)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 32|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($1)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 36|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($1)) + 88|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ((($0)) + 88|0);
 HEAP8[$23>>0] = $22;
 $24 = HEAP32[$17>>2]|0;
 $25 = ($24|0)>(0);
 if ($25) {
  $$032 = 0;
  while(1) {
   $51 = (($0) + ($$032<<2)|0);
   $52 = (($1) + ($$032<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$52>>2] = 0;
   $54 = HEAP32[$51>>2]|0;
   HEAP32[$51>>2] = $53;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = HEAP32[$54>>2]|0;
    $57 = ((($56)) + 32|0);
    $58 = HEAP32[$57>>2]|0;
    FUNCTION_TABLE_vi[$58 & 127]($54);
   }
   $59 = (($$032) + 1)|0;
   $60 = HEAP32[$17>>2]|0;
   $61 = ($59|0)<($60|0);
   if ($61) {
    $$032 = $59;
   } else {
    break;
   }
  }
 }
 $26 = ((($1)) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 52|0);
 HEAP32[$28>>2] = $27;
 $29 = ($0|0)==($1|0);
 if (!($29)) {
  $30 = ((($0)) + 92|0);
  $31 = ((($1)) + 92|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($1)) + 96|0);
  $34 = HEAP32[$33>>2]|0;
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($30,$32,$34);
 }
 HEAP32[$26>>2] = 0;
 HEAP8[$21>>0] = 0;
 $35 = ((($1)) + 44|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $36 = HEAP8[$35>>0]|0;
 $37 = ((($0)) + 44|0);
 HEAP8[$37>>0] = $36;
 $38 = ((($1)) + 48|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($0)) + 48|0);
 HEAP32[$40>>2] = $39;
 HEAP32[$38>>2] = 0;
 $41 = ((($1)) + 56|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = ((($0)) + 56|0);
 HEAP8[$43>>0] = $42;
 $44 = ((($0)) + 60|0);
 $45 = ((($1)) + 60|0);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($44,$45,$$byval_copy1);
 $46 = ((($0)) + 72|0);
 $47 = ((($1)) + 72|0);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($46,$47,$$byval_copy1);
 $48 = ((($1)) + 84|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($0)) + 84|0);
 HEAP32[$50>>2] = $49;
 HEAP8[$35>>0] = 0;
 HEAP8[$41>>0] = 1;
 HEAP32[$48>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__213__vector_baseIP9TransformI8BufferIOENS_9allocatorIS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNSt3__213__vector_baseINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -4|0);
   HEAP32[$3>>2] = $6;
   $8 = HEAP32[$6>>2]|0;
   HEAP32[$6>>2] = 0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $12 = HEAP32[$8>>2]|0;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    FUNCTION_TABLE_vi[$14 & 127]($8);
   }
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10|0)==($1|0);
   if ($11) {
    break;
   } else {
    $7 = $10;
   }
  }
 }
 $15 = HEAP32[$0>>2]|0;
 __ZdlPv($15);
 return;
}
function __ZNSt3__213__vector_baseINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -4|0);
   HEAP32[$3>>2] = $6;
   $8 = HEAP32[$6>>2]|0;
   HEAP32[$6>>2] = 0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $12 = HEAP32[$8>>2]|0;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    FUNCTION_TABLE_vi[$14 & 127]($8);
   }
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10|0)==($1|0);
   if ($11) {
    break;
   } else {
    $7 = $10;
   }
  }
 }
 $15 = HEAP32[$0>>2]|0;
 __ZdlPv($15);
 return;
}
function __ZN8MetaDataD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 return;
}
function __ZNSt3__213__vector_baseI8MetaDataNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -24|0);
   HEAP32[$3>>2] = $6;
   __ZN8MetaDataD2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE10deallocateEv($0);
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $8;
 HEAP32[$7>>2] = 0;
 HEAP32[$4>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE10deallocateEv($0) {
 $0 = $0|0;
 var $$cast = 0, $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $$cast$i = $5;
 $$cast = $4;
 $8 = ($$cast|0)==($$cast$i|0);
 if (!($8)) {
  $scevgep$i$i$i = ((($$cast)) + -4|0);
  $9 = $scevgep$i$i$i;
  $10 = (($9) - ($5))|0;
  $11 = $10 >>> 2;
  $12 = $11 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($12<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($0,$7);
 $13 = HEAP32[$0>>2]|0;
 __ZdlPv($13);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 2;
 $13 = (($2) + ($12<<2)|0);
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$7,$8,$13);
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEEC2ERKS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 24)&-1;
 $9 = ($7|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$10,$11,$8);
 return;
}
function __ZN5Image5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = 0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($3)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 127]($1);
 }
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = 0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $11 = HEAP32[$7>>2]|0;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vi[$13 & 127]($7);
 }
 $14 = ((($0)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$14>>2] = 0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = HEAP32[$15>>2]|0;
  $18 = ((($17)) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vi[$19 & 127]($15);
 }
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$20>>2] = 0;
 $22 = ($21|0)==(0|0);
 if (!($22)) {
  $23 = HEAP32[$21>>2]|0;
  $24 = ((($23)) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_vi[$25 & 127]($21);
 }
 $26 = ((($0)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$26>>2] = 0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  $29 = HEAP32[$27>>2]|0;
  $30 = ((($29)) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vi[$31 & 127]($27);
 }
 $10 = ((($0)) + 48|0);
 $9 = HEAP32[$10>>2]|0;
 $32 = ($9|0)==(0|0);
 if ($32) {
  HEAP32[$10>>2] = 0;
  return;
 }
 __ZN5ImageD2Ev($9);
 __ZdlPv($9);
 HEAP32[$10>>2] = 0;
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(178956970);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*24)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*24)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$07$i = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = ($1|0)==($2|0);
 if (!($6)) {
  $$07$i = $1;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   __ZN8MetaDataC2ERKS_($7,$$07$i);
   $8 = ((($$07$i)) + 24|0);
   $9 = HEAP32[$5>>2]|0;
   $10 = ((($9)) + 24|0);
   HEAP32[$5>>2] = $10;
   $11 = ($8|0)==($2|0);
   if ($11) {
    break;
   } else {
    $$07$i = $8;
   }
  }
 }
 __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 178956970;
}
function __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = (($2) + (($6*24)|0)|0);
 $8 = (($2) + (($1*24)|0)|0);
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN5ImageC2ERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $2 = ((($0)) + 40|0);
 HEAP32[$2>>2] = 8;
 $3 = ((($0)) + 48|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 56|0);
 HEAP8[$4>>0] = 1;
 $5 = ((($0)) + 60|0);
 $6 = ((($0)) + 92|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($0)) + 96|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 100|0);
 HEAP32[$8>>2] = 0;
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 (__ZN5ImageaSERKS_($0,$1)|0);
 return;
}
function __ZN5ImageaSERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04279 = 0, $$04381 = 0, $$078 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 28|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($0)) + 28|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($1)) + 30|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ((($0)) + 30|0);
 HEAP16[$14>>1] = $13;
 $15 = ((($1)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($0)) + 32|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($1)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 36|0);
 HEAP32[$20>>2] = $19;
 $21 = ($0|0)==($1|0);
 if (!($21)) {
  $22 = ((($0)) + 92|0);
  $23 = ((($1)) + 92|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($1)) + 96|0);
  $26 = HEAP32[$25>>2]|0;
  __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_($22,$24,$26);
 }
 __ZN5Image5clearEv($0);
 $27 = ((($1)) + 44|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ((($0)) + 44|0);
 HEAP8[$29>>0] = $28;
 $30 = ((($1)) + 48|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0|0);
 if ($32) {
  $36 = ((($0)) + 48|0);
  HEAP32[$36>>2] = 0;
 } else {
  $33 = (__Znwj(104)|0);
  $34 = HEAP32[$30>>2]|0;
  __ZN5ImageC2ERKS_($33,$34);
  $35 = ((($0)) + 48|0);
  HEAP32[$35>>2] = $33;
 }
 $37 = ((($1)) + 52|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 52|0);
 HEAP32[$39>>2] = $38;
 $40 = ($0|0)==($1|0);
 if (!($40)) {
  $41 = ((($0)) + 60|0);
  $42 = ((($1)) + 60|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($1)) + 64|0);
  $45 = HEAP32[$44>>2]|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($41,$43,$45);
 }
 $46 = ($0|0)==($1|0);
 if (!($46)) {
  $47 = ((($0)) + 72|0);
  $48 = ((($1)) + 72|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($1)) + 76|0);
  $51 = HEAP32[$50>>2]|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($47,$49,$51);
 }
 $52 = ((($1)) + 84|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($0)) + 84|0);
 HEAP32[$54>>2] = $53;
 $55 = ((($1)) + 88|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = ((($0)) + 88|0);
 HEAP8[$57>>0] = $56;
 $58 = HEAP32[$17>>2]|0;
 $59 = ((($0)) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)<(9);
 if ($61) {
  $62 = ($58|0)>(0);
  if ($62) {
   HEAP32[$2>>2] = 0;
   $63 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$8,$2,$20)|0);
   $64 = HEAP32[$0>>2]|0;
   HEAP32[$0>>2] = $63;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    $66 = HEAP32[$64>>2]|0;
    $67 = ((($66)) + 32|0);
    $68 = HEAP32[$67>>2]|0;
    FUNCTION_TABLE_vi[$68 & 127]($64);
   }
   $69 = ($58|0)>(1);
   if ($69) {
    HEAP32[$2>>2] = 0;
    $70 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$8,$2,$20)|0);
    $71 = ((($0)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$71>>2] = $70;
    $73 = ($72|0)==(0|0);
    if (!($73)) {
     $74 = HEAP32[$72>>2]|0;
     $75 = ((($74)) + 32|0);
     $76 = HEAP32[$75>>2]|0;
     FUNCTION_TABLE_vi[$76 & 127]($72);
    }
    $77 = ($58|0)>(2);
    if ($77) {
     HEAP32[$2>>2] = 0;
     $78 = (__Z11make_uniqueI5PlaneIsEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$8,$2,$20)|0);
     $79 = ((($0)) + 8|0);
     $80 = HEAP32[$79>>2]|0;
     HEAP32[$79>>2] = $78;
     $81 = ($80|0)==(0|0);
     if (!($81)) {
      $82 = HEAP32[$80>>2]|0;
      $83 = ((($82)) + 32|0);
      $84 = HEAP32[$83>>2]|0;
      FUNCTION_TABLE_vi[$84 & 127]($80);
     }
     $85 = ($58|0)>(3);
     if ($85) {
      HEAP32[$2>>2] = 0;
      $86 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$8,$2,$20)|0);
      $87 = ((($0)) + 12|0);
      $88 = HEAP32[$87>>2]|0;
      HEAP32[$87>>2] = $86;
      $89 = ($88|0)==(0|0);
      if (!($89)) {
       $90 = HEAP32[$88>>2]|0;
       $91 = ((($90)) + 32|0);
       $92 = HEAP32[$91>>2]|0;
       FUNCTION_TABLE_vi[$92 & 127]($88);
      }
      label = 24;
     }
    }
   }
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  $93 = ($58|0)>(4);
  if ($93) {
   HEAP32[$2>>2] = 0;
   $94 = (__Z11make_uniqueI5PlaneIhEJRjS2_iRiEENSt3__210unique_ptrIT_NS4_14default_deleteIS6_EEEEDpOT0_($5,$8,$2,$20)|0);
   $95 = ((($0)) + 16|0);
   $96 = HEAP32[$95>>2]|0;
   HEAP32[$95>>2] = $94;
   $97 = ($96|0)==(0|0);
   if (!($97)) {
    $98 = HEAP32[$96>>2]|0;
    $99 = ((($98)) + 32|0);
    $100 = HEAP32[$99>>2]|0;
    FUNCTION_TABLE_vi[$100 & 127]($96);
   }
  }
 }
 $101 = HEAP32[$17>>2]|0;
 $102 = ($101|0)>(0);
 if ($102) {
  $$04381 = 0;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 while(1) {
  $103 = HEAP32[$8>>2]|0;
  $104 = (($103) + -1)|0;
  $105 = HEAP32[$20>>2]|0;
  $106 = $104 >>> $105;
  $107 = ($106|0)==(-1);
  if (!($107)) {
   $$04279 = 0;
   while(1) {
    $108 = HEAP32[$5>>2]|0;
    $109 = (($108) + -1)|0;
    $110 = HEAP32[$20>>2]|0;
    $111 = $109 >>> $110;
    $112 = ($111|0)==(-1);
    if (!($112)) {
     $$078 = 0;
     while(1) {
      $123 = (__ZNK5ImageclEijj($1,$$04381,$$04279,$$078)|0);
      __ZN5Image3setEijjs($0,$$04381,$$04279,$$078,$123);
      $124 = (($$078) + 1)|0;
      $125 = HEAP32[$5>>2]|0;
      $126 = (($125) + -1)|0;
      $127 = HEAP32[$20>>2]|0;
      $128 = $126 >>> $127;
      $129 = (($128) + 1)|0;
      $130 = ($124>>>0)<($129>>>0);
      if ($130) {
       $$078 = $124;
      } else {
       break;
      }
     }
    }
    $116 = (($$04279) + 1)|0;
    $117 = HEAP32[$8>>2]|0;
    $118 = (($117) + -1)|0;
    $119 = HEAP32[$20>>2]|0;
    $120 = $118 >>> $119;
    $121 = (($120) + 1)|0;
    $122 = ($116>>>0)<($121>>>0);
    if ($122) {
     $$04279 = $116;
    } else {
     break;
    }
   }
  }
  $113 = (($$04381) + 1)|0;
  $114 = HEAP32[$17>>2]|0;
  $115 = ($113|0)<($114|0);
  if ($115) {
   $$04381 = $113;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE6assignIPjEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$cast$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = ($6>>>0)>($11>>>0);
 if ($12) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEE10deallocateEv($0);
  $36 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
  $37 = ($36>>>0)<($6>>>0);
  if ($37) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $38 = HEAP32[$7>>2]|0;
  $39 = HEAP32[$0>>2]|0;
  $40 = (($38) - ($39))|0;
  $41 = $40 >> 2;
  $42 = $36 >>> 1;
  $43 = ($41>>>0)<($42>>>0);
  $44 = $40 >> 1;
  $45 = ($44>>>0)<($6>>>0);
  $$sroa$speculated$i = $45 ? $6 : $44;
  $$0$i = $43 ? $$sroa$speculated$i : $36;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE8allocateEj($0,$$0$i);
  __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endIPjEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$6);
  return;
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($9))|0;
 $16 = $15 >> 2;
 $17 = ($6>>>0)>($16>>>0);
 $18 = (($1) + ($16<<2)|0);
 $$ = $17 ? $18 : $2;
 $19 = HEAP32[$0>>2]|0;
 $20 = $$;
 $21 = (($20) - ($4))|0;
 $22 = $21 >> 2;
 $23 = ($22|0)==(0);
 if (!($23)) {
  _memmove(($19|0),($1|0),($21|0))|0;
 }
 $24 = (($19) + ($22<<2)|0);
 $25 = HEAP32[$13>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($25) - ($26))|0;
 $28 = $27 >> 2;
 if ($17) {
  $29 = (($6) - ($28))|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endIPjEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$$,$2,$29);
  return;
 }
 $$cast$i = $25;
 $30 = ($$cast$i|0)==($24|0);
 if (!($30)) {
  $scevgep$i$i = ((($$cast$i)) + -4|0);
  $31 = $scevgep$i$i;
  $32 = $24;
  $33 = (($31) - ($32))|0;
  $34 = $33 >>> 2;
  $35 = $34 ^ -1;
  $scevgep4$i$i = (($$cast$i) + ($35<<2)|0);
  HEAP32[$13>>2] = $scevgep4$i$i;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($0,$28);
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE18__construct_at_endIPjEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 2;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 2;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<2)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorIjNS_9allocatorIjEEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZN5Image4initEjjssi($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZN5Image9semi_initEjjssi($0,$1,$2,$3,$4,$5)|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (__ZN5Image9real_initEb($0,0)|0);
 $$0 = $7;
 return ($$0|0);
}
function __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($1>>>0);
 if ($8) {
  $9 = (($1) - ($7))|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEjRKj($0,$9,$2);
  return;
 }
 $10 = ($7>>>0)>($1>>>0);
 if (!($10)) {
  return;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($1<<2)|0);
 $$cast$i = $4;
 $13 = ($$cast$i|0)==($12|0);
 if (!($13)) {
  $scevgep$i$i = ((($$cast$i)) + -4|0);
  $14 = $scevgep$i$i;
  $15 = $12;
  $16 = (($14) - ($15))|0;
  $17 = $16 >>> 2;
  $18 = $17 ^ -1;
  $scevgep4$i$i = (($$cast$i) + ($18<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 __ZNKSt3__26vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($0,$7);
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i11 = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $$0$i = $1;
  while(1) {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$0,1);
   $11 = HEAP32[$6>>2]|0;
   $12 = HEAP32[$2>>2]|0;
   HEAP32[$11>>2] = $12;
   $13 = HEAP32[$6>>2]|0;
   $14 = ((($13)) + 4|0);
   HEAP32[$6>>2] = $14;
   $15 = (($$0$i) + -1)|0;
   __ZNSt3__26vectorIjNS_9allocatorIjEEE24__RAII_IncreaseAnnotator6__doneEv($3);
   $16 = ($15|0)==(0);
   if ($16) {
    break;
   } else {
    $$0$i = $15;
   }
  }
  STACKTOP = sp;return;
 }
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$6>>2]|0;
 $19 = HEAP32[$0>>2]|0;
 $20 = (($18) - ($19))|0;
 $21 = $20 >> 2;
 $22 = (($21) + ($1))|0;
 $23 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $24 = ($23>>>0)<($22>>>0);
 if ($24) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $25 = ((($0)) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($26) - ($27))|0;
 $29 = $28 >> 2;
 $30 = $23 >>> 1;
 $31 = ($29>>>0)<($30>>>0);
 $32 = $28 >> 1;
 $33 = ($32>>>0)<($22>>>0);
 $$sroa$speculated$i = $33 ? $22 : $32;
 $$0$i11 = $31 ? $$sroa$speculated$i : $23;
 $34 = HEAP32[$6>>2]|0;
 $35 = (($34) - ($27))|0;
 $36 = $35 >> 2;
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($3,$$0$i11,$36,$17);
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEjRKj($3,$1,$2);
 __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$3);
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$promoted = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$promoted = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$promoted;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = ((($5)) + 4|0);
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$5 = $6;
  }
 }
 $scevgep = (($$promoted) + ($1<<2)|0);
 HEAP32[$3>>2] = $scevgep;
 return;
}
function __ZN4TreeC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 __ZN20PropertyDecisionNodeC2Eiii($1,-1,0,0);
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEEC2EjRKS1_($0,1,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEEC2EjRKS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  __ZN4TreeC2ERKS_($8,$2);
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($9)) + 12|0);
  HEAP32[$7>>2] = $10;
  $11 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseI20PropertyDecisionNodeNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -16|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 4;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + ($10<<4)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNK5Image5zoomsEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $1 = (__ZN5Image17zoom_rowpixelsizeEi($$0)|0);
  $2 = (__ZNK5Image4rowsEv($0)|0);
  $3 = ($1>>>0)<($2>>>0);
  if (!($3)) {
   $4 = (__ZN5Image17zoom_colpixelsizeEi($$0)|0);
   $5 = (__ZNK5Image4colsEv($0)|0);
   $6 = ($4>>>0)<($5>>>0);
   if (!($6)) {
    break;
   }
  }
  $7 = (($$0) + 1)|0;
  $$0 = $7;
 }
 return ($$0|0);
}
function __Z22flif_decode_FLIF2_passI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_I4TreeNSD_ISK_EEEEiiR12flif_optionsRNSB_IP9TransformIS6_ENSD_ISS_EEEEPFjixESG_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$06381 = 0, $$06477 = 0, $$sroa$068$076 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $11 = sp + 28|0;
 $12 = sp + 16|0;
 $13 = sp + 4|0;
 $14 = sp;
 HEAP32[$12>>2] = 0;
 $15 = ((($12)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($12)) + 8|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$2>>2]|0;
 $18 = (__ZNK5Image9numPlanesEv($17)|0);
 __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE7reserveEj($12,$18);
 $19 = HEAP32[$2>>2]|0;
 $20 = (__ZNK5Image9numPlanesEv($19)|0);
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = ((($13)) + 4|0);
  $23 = ((($13)) + 8|0);
  $24 = ((($7)) + 12|0);
  $25 = ((($7)) + 8|0);
  $26 = ((($12)) + 8|0);
  $$06381 = 0;
  while(1) {
   HEAP32[$13>>2] = 0;
   HEAP32[$22>>2] = 0;
   HEAP32[$23>>2] = 0;
   __Z14initPropRangesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($13,$3,$$06381);
   $27 = HEAP32[$4>>2]|0;
   $28 = (($27) + (($$06381*12)|0)|0);
   HEAP32[$14>>2] = 0;
   $29 = HEAP32[$15>>2]|0;
   $30 = HEAP32[$26>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($11,$12,1);
    $32 = HEAP32[$15>>2]|0;
    $33 = HEAP32[$14>>2]|0;
    $34 = HEAP32[$24>>2]|0;
    $35 = HEAP32[$25>>2]|0;
    __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_RNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEER4Treeiii($32,$1,$13,$28,$33,$34,$35);
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($11);
    $36 = HEAP32[$15>>2]|0;
    $37 = ((($36)) + 16412|0);
    HEAP32[$15>>2] = $37;
   } else {
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS5_RNS0_INS_4pairIssEENS7_ISD_EEEER4TreeiRiSJ_EEEvDpOT_($12,$1,$13,$28,$14,$24,$25);
   }
   __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($13);
   $38 = (($$06381) + 1)|0;
   $39 = HEAP32[$2>>2]|0;
   $40 = (__ZNK5Image9numPlanesEv($39)|0);
   $41 = ($38|0)<($40|0);
   if ($41) {
    $$06381 = $38;
   } else {
    break;
   }
  }
 }
 $42 = HEAP32[$2>>2]|0;
 $43 = (__ZNK5Image5zoomsEv($42)|0);
 $44 = ($43|0)==($5|0);
 $45 = ($6|0)>(0);
 $or$cond = $45 & $44;
 if (!($or$cond)) {
  $93 = (__Z23flif_decode_FLIF2_innerI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE11ColorRangesEbRT_RT0_RNSt3__26vectorIT1_NSB_9allocatorISD_EEEERNSC_I5ImageNSE_ISI_EEEEPKT2_iiR12flif_optionsRNSC_IP9TransformIS7_ENSE_IST_EEEEPFjixESL_($0,$1,$12,$2,$3,$5,$6,$7,$8,$9,$10)|0);
  __ZNSt3__213__vector_baseI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEED2Ev($12);
  STACKTOP = sp;return ($93|0);
 }
 __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($11,$1);
 $46 = HEAP32[$2>>2]|0;
 $47 = (__ZNK5Image9numPlanesEv($46)|0);
 $48 = ($47|0)>(0);
 if ($48) {
  $49 = ((($2)) + 4|0);
  $$06477 = 0;
  while(1) {
   $50 = HEAP32[$3>>2]|0;
   $51 = ((($50)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iii[$52 & 63]($3,$$06477)|0);
   $54 = HEAP32[$3>>2]|0;
   $55 = ((($54)) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (FUNCTION_TABLE_iii[$56 & 63]($3,$$06477)|0);
   $58 = ($53<<16>>16)<($57<<16>>16);
   if ($58) {
    $59 = HEAP32[$2>>2]|0;
    $60 = HEAP32[$49>>2]|0;
    $61 = ($59|0)==($60|0);
    if (!($61)) {
     $$sroa$068$076 = $59;
     while(1) {
      $74 = HEAP32[$3>>2]|0;
      $75 = ((($74)) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_iii[$76 & 63]($3,$$06477)|0);
      $78 = $77 << 16 >> 16;
      $79 = HEAP32[$3>>2]|0;
      $80 = ((($79)) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (FUNCTION_TABLE_iii[$81 & 63]($3,$$06477)|0);
      $83 = $82 << 16 >> 16;
      $84 = (($83) - ($78))|0;
      $85 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($11,$78,$84)|0);
      $86 = $85&65535;
      __ZN5Image3setEiijjs($$sroa$068$076,$$06477,0,0,0,$86);
      $87 = ((($$sroa$068$076)) + 104|0);
      $88 = ($87|0)==($60|0);
      if ($88) {
       break;
      } else {
       $$sroa$068$076 = $87;
      }
     }
    }
    $62 = 14080;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = (_i64Add(($64|0),($67|0),1,0)|0);
    $69 = tempRet0;
    $70 = 14080;
    $71 = $70;
    HEAP32[$71>>2] = $68;
    $72 = (($70) + 4)|0;
    $73 = $72;
    HEAP32[$73>>2] = $69;
   }
   $89 = (($$06477) + 1)|0;
   $90 = HEAP32[$2>>2]|0;
   $91 = (__ZNK5Image9numPlanesEv($90)|0);
   $92 = ($89|0)<($91|0);
   if ($92) {
    $$06477 = $89;
   } else {
    break;
   }
  }
 }
 $93 = (__Z23flif_decode_FLIF2_innerI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE11ColorRangesEbRT_RT0_RNSt3__26vectorIT1_NSB_9allocatorISD_EEEERNSC_I5ImageNSE_ISI_EEEEPKT2_iiR12flif_optionsRNSC_IP9TransformIS7_ENSE_IST_EEEEPFjixESL_($0,$1,$12,$2,$3,$5,$6,$7,$8,$9,$10)|0);
 __ZNSt3__213__vector_baseI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEED2Ev($12);
 STACKTOP = sp;return ($93|0);
}
function __ZNSt3__26vectorIiNS_9allocatorIiEEEC2EjRKi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIiNS_9allocatorIiEEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$2>>2]|0;
  HEAP32[$8>>2] = $9;
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 4|0);
  HEAP32[$7>>2] = $11;
  $12 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  } else {
   $$0$i = $12;
  }
 }
 STACKTOP = sp;return;
}
function __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0200$lcssa = 0, $$0200268 = 0, $$0201280 = 0, $$0202256 = 0, $$0203258 = 0, $$0204274 = 0, $$0205263 = 0, $$0206272 = 0, $$0207$ph267 = 0, $$0209282 = 0, $$0210284 = 0, $$0211290 = 0, $$0253 = 0, $$1 = 0, $$cast$i = 0, $$sroa$0214$0254 = 0, $$sroa$0220$0261 = 0, $$sroa$0226$0286 = 0, $$sroa$0232$0276 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond212 = 0, $scevgep4$i$i$i = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $9 = ($5|0)>(-1);
 L1: do {
  if ($9) {
   $10 = HEAP32[$7>>2]|0;
   $11 = (($10) + ($2<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$0>>2]|0;
   $14 = (__ZNK5Image4colsEi($13,$12)|0);
   $15 = HEAP32[$0>>2]|0;
   $16 = (__ZNK5Image4rowsEi($15,$12)|0);
   HEAP32[$vararg_buffer>>2] = $2;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $16;
   __Z12v_printf_ttyiPKcz(2,7591,$vararg_buffer);
   __Z12v_printf_ttyiPKcz(5,4962,$vararg_buffer3);
   $17 = ($12|0)<($4|0);
   if (!($17)) {
    $18 = HEAP32[$7>>2]|0;
    $19 = (($18) + ($2<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + -1)|0;
    HEAP32[$19>>2] = $21;
   }
   $22 = $12 & 1;
   $23 = ($22|0)==(0);
   $24 = HEAP32[$0>>2]|0;
   $25 = (__ZNK5Image4rowsEi($24,$12)|0);
   $26 = ($25>>>0)>($5>>>0);
   if (!($23)) {
    if (!($26)) {
     break;
    }
    $27 = ((($0)) + 4|0);
    $$0211290 = $5;
    while(1) {
     $52 = HEAP32[$0>>2]|0;
     $53 = HEAP32[$27>>2]|0;
     $54 = ($52|0)==($53|0);
     if (!($54)) {
      $$sroa$0226$0286 = $52;
      while(1) {
       $59 = ((($$sroa$0226$0286)) + 44|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ($60<<24>>24)==(0);
       $62 = (__ZNK5Image4colsEi($$sroa$0226$0286,$12)|0);
       $63 = ($62>>>0)>(1);
       if ($61) {
        if ($63) {
         $$0210284 = 1;
         while(1) {
          $64 = (__Z7predictRK5Imageiijji($$sroa$0226$0286,$12,$2,$$0211290,$$0210284,0)|0);
          __ZN5Image3setEiijjs($$sroa$0226$0286,$2,$12,$$0211290,$$0210284,$64);
          $65 = (($$0210284) + 2)|0;
          $66 = (__ZNK5Image4colsEi($$sroa$0226$0286,$12)|0);
          $67 = ($65>>>0)<($66>>>0);
          if ($67) {
           $$0210284 = $65;
          } else {
           break;
          }
         }
        }
       } else {
        if ($63) {
         $$0209282 = 1;
         while(1) {
          $68 = (($$0209282) + -1)|0;
          $69 = (__ZNK5ImageclEiijj($$sroa$0226$0286,$2,$12,$$0211290,$68)|0);
          __ZN5Image3setEiijjs($$sroa$0226$0286,$2,$12,$$0211290,$$0209282,$69);
          $70 = (($$0209282) + 2)|0;
          $71 = (__ZNK5Image4colsEi($$sroa$0226$0286,$12)|0);
          $72 = ($70>>>0)<($71>>>0);
          if ($72) {
           $$0209282 = $70;
          } else {
           break;
          }
         }
        }
       }
       $73 = ((($$sroa$0226$0286)) + 104|0);
       $74 = ($73|0)==($53|0);
       if ($74) {
        break;
       } else {
        $$sroa$0226$0286 = $73;
       }
      }
     }
     $55 = (($$0211290) + 1)|0;
     $56 = HEAP32[$0>>2]|0;
     $57 = (__ZNK5Image4rowsEi($56,$12)|0);
     $58 = ($55>>>0)<($57>>>0);
     if ($58) {
      $$0211290 = $55;
     } else {
      break L1;
     }
    }
   }
   if ($26) {
    $28 = ((($0)) + 4|0);
    $$0201280 = $5;
    while(1) {
     $29 = HEAP32[$0>>2]|0;
     $30 = HEAP32[$28>>2]|0;
     $31 = ($29|0)==($30|0);
     if (!($31)) {
      $32 = (($$0201280) + -1)|0;
      $$sroa$0232$0276 = $29;
      while(1) {
       $37 = ((($$sroa$0232$0276)) + 44|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       $40 = (__ZNK5Image4colsEi($$sroa$0232$0276,$12)|0);
       $41 = ($40|0)!=(0);
       if ($39) {
        if ($41) {
         $$0204274 = 0;
         while(1) {
          $42 = (__Z7predictRK5Imageiijji($$sroa$0232$0276,$12,$2,$$0201280,$$0204274,0)|0);
          __ZN5Image3setEiijjs($$sroa$0232$0276,$2,$12,$$0201280,$$0204274,$42);
          $43 = (($$0204274) + 1)|0;
          $44 = (__ZNK5Image4colsEi($$sroa$0232$0276,$12)|0);
          $45 = ($43>>>0)<($44>>>0);
          if ($45) {
           $$0204274 = $43;
          } else {
           break;
          }
         }
        }
       } else {
        if ($41) {
         $$0206272 = 0;
         while(1) {
          $46 = (__ZNK5ImageclEiijj($$sroa$0232$0276,$2,$12,$32,$$0206272)|0);
          __ZN5Image3setEiijjs($$sroa$0232$0276,$2,$12,$$0201280,$$0206272,$46);
          $47 = (($$0206272) + 1)|0;
          $48 = (__ZNK5Image4colsEi($$sroa$0232$0276,$12)|0);
          $49 = ($47>>>0)<($48>>>0);
          if ($49) {
           $$0206272 = $47;
          } else {
           break;
          }
         }
        }
       }
       $50 = ((($$sroa$0232$0276)) + 104|0);
       $51 = ($50|0)==($30|0);
       if ($51) {
        break;
       } else {
        $$sroa$0232$0276 = $50;
       }
      }
     }
     $33 = (($$0201280) + 2)|0;
     $34 = HEAP32[$0>>2]|0;
     $35 = (__ZNK5Image4rowsEi($34,$12)|0);
     $36 = ($33>>>0)<($35>>>0);
     if ($36) {
      $$0201280 = $33;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 $75 = HEAP32[$0>>2]|0;
 $76 = ((($75)) + 44|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ($77<<24>>24)!=(0);
 $79 = ($6|0)==(1);
 $or$cond = $79 & $78;
 if ($or$cond) {
  $80 = ((($8)) + 4|0);
  $81 = HEAP32[$0>>2]|0;
  $82 = ((($81)) + 44|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)==(0);
  L43: do {
   if ($84) {
    $$0200$lcssa = $1;
   } else {
    $$0200268 = $1;
    while(1) {
     $85 = HEAP32[$80>>2]|0;
     $86 = HEAP32[$8>>2]|0;
     $87 = ($85|0)==($86|0);
     if ($87) {
      $$0200$lcssa = $$0200268;
      break L43;
     }
     $88 = HEAP32[$80>>2]|0;
     $89 = ((($88)) + -4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($91)) + 28|0);
     $93 = HEAP32[$92>>2]|0;
     FUNCTION_TABLE_vii[$93 & 31]($90,$0);
     $94 = HEAP32[$80>>2]|0;
     $$cast$i = $94;
     $95 = HEAP32[$8>>2]|0;
     $96 = (($$cast$i) - ($95))|0;
     $97 = $96 >> 2;
     $scevgep4$i$i$i = ((($94)) + -4|0);
     HEAP32[$80>>2] = $scevgep4$i$i$i;
     __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_shrinkEj($8,$97);
     $98 = HEAP32[$$0200268>>2]|0;
     $99 = ((($98)) + 32|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (FUNCTION_TABLE_ii[$100 & 63]($$0200268)|0);
     $102 = HEAP32[$0>>2]|0;
     $103 = ((($102)) + 44|0);
     $104 = HEAP8[$103>>0]|0;
     $105 = ($104<<24>>24)==(0);
     if ($105) {
      $$0200$lcssa = $101;
      break;
     } else {
      $$0200268 = $101;
     }
    }
   }
  } while(0);
  $106 = HEAP32[$7>>2]|0;
  $107 = ((($106)) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP32[$106>>2] = $108;
  $109 = HEAP32[$7>>2]|0;
  $110 = ((($109)) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ((($109)) + 8|0);
  HEAP32[$112>>2] = $111;
  $113 = ((($7)) + 4|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = HEAP32[$7>>2]|0;
  $116 = (($114) - ($115))|0;
  $117 = $116 >> 2;
  $118 = ($117>>>0)>(3);
  if ($118) {
   $119 = HEAP32[$7>>2]|0;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($119)) + 12|0);
   HEAP32[$122>>2] = $121;
   $$1 = $$0200$lcssa;
  } else {
   $$1 = $$0200$lcssa;
  }
 } else {
  $$1 = $1;
 }
 $123 = HEAP32[$$1>>2]|0;
 $124 = ((($123)) + 8|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (FUNCTION_TABLE_ii[$125 & 63]($$1)|0);
 $127 = ($126|0)>(0);
 if (!($127)) {
  __Z12v_printf_ttyiPKcz(2,4962,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $128 = ((($0)) + 4|0);
 $129 = ((($0)) + 4|0);
 $$0207$ph267 = 0;
 L54: while(1) {
  $130 = ($$0207$ph267|0)==(4);
  while(1) {
   $131 = HEAP32[$7>>2]|0;
   $132 = (($131) + ($$0207$ph267<<2)|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($133|0)<($4|0);
   if ($134) {
    break;
   }
   $141 = (($133) + -1)|0;
   HEAP32[$132>>2] = $141;
   $142 = HEAP32[$$1>>2]|0;
   $143 = ((($142)) + 12|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (FUNCTION_TABLE_iii[$144 & 63]($$1,$$0207$ph267)|0);
   $146 = HEAP32[$$1>>2]|0;
   $147 = ((($146)) + 16|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = (FUNCTION_TABLE_iii[$148 & 63]($$1,$$0207$ph267)|0);
   $150 = ($145<<16>>16)>=($149<<16>>16);
   $or$cond212 = $130 | $150;
   do {
    if (!($or$cond212)) {
     $151 = (($133|0) / 2)&-1;
     $152 = 1 << $151;
     $153 = ($152|0)<($6|0);
     if (!($153)) {
      $159 = HEAP32[$0>>2]|0;
      $160 = (__ZNK5Image4colsEi($159,$133)|0);
      $161 = HEAP32[$0>>2]|0;
      $162 = (__ZNK5Image4rowsEi($161,$133)|0);
      HEAP32[$vararg_buffer7>>2] = $$0207$ph267;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $160;
      $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
      HEAP32[$vararg_ptr11>>2] = $162;
      __Z12v_printf_ttyiPKcz(2,7641,$vararg_buffer7);
      __Z12v_printf_ttyiPKcz(5,4962,$vararg_buffer12);
      $163 = $133 & 1;
      $164 = ($163|0)==(0);
      $165 = HEAP32[$0>>2]|0;
      $166 = (__ZNK5Image4rowsEi($165,$133)|0);
      if ($164) {
       $168 = ($166>>>0)>(1);
       if ($168) {
        $$0205263 = 1;
       } else {
        break;
       }
       while(1) {
        $169 = HEAP32[$0>>2]|0;
        $170 = HEAP32[$128>>2]|0;
        $171 = ($169|0)==($170|0);
        if (!($171)) {
         $$sroa$0220$0261 = $169;
         while(1) {
          $172 = (__ZNK5Image4colsEi($$sroa$0220$0261,$133)|0);
          $173 = ($172|0)==(0);
          if (!($173)) {
           $$0203258 = 0;
           while(1) {
            $180 = (__Z7predictRK5Imageiijji($$sroa$0220$0261,$133,$$0207$ph267,$$0205263,$$0203258,0)|0);
            __ZN5Image3setEiijjs($$sroa$0220$0261,$$0207$ph267,$133,$$0205263,$$0203258,$180);
            $181 = (($$0203258) + 1)|0;
            $182 = (__ZNK5Image4colsEi($$sroa$0220$0261,$133)|0);
            $183 = ($181>>>0)<($182>>>0);
            if ($183) {
             $$0203258 = $181;
            } else {
             break;
            }
           }
          }
          $178 = ((($$sroa$0220$0261)) + 104|0);
          $179 = ($178|0)==($170|0);
          if ($179) {
           break;
          } else {
           $$sroa$0220$0261 = $178;
          }
         }
        }
        $174 = (($$0205263) + 2)|0;
        $175 = HEAP32[$0>>2]|0;
        $176 = (__ZNK5Image4rowsEi($175,$133)|0);
        $177 = ($174>>>0)<($176>>>0);
        if ($177) {
         $$0205263 = $174;
        } else {
         break;
        }
       }
      } else {
       $167 = ($166|0)==(0);
       if ($167) {
        break;
       } else {
        $$0202256 = 0;
       }
       while(1) {
        $184 = HEAP32[$0>>2]|0;
        $185 = HEAP32[$129>>2]|0;
        $186 = ($184|0)==($185|0);
        if (!($186)) {
         $$sroa$0214$0254 = $184;
         while(1) {
          $187 = (__ZNK5Image4colsEi($$sroa$0214$0254,$133)|0);
          $188 = ($187>>>0)>(1);
          if ($188) {
           $$0253 = 1;
           while(1) {
            $195 = (__Z7predictRK5Imageiijji($$sroa$0214$0254,$133,$$0207$ph267,$$0202256,$$0253,0)|0);
            __ZN5Image3setEiijjs($$sroa$0214$0254,$$0207$ph267,$133,$$0202256,$$0253,$195);
            $196 = (($$0253) + 2)|0;
            $197 = (__ZNK5Image4colsEi($$sroa$0214$0254,$133)|0);
            $198 = ($196>>>0)<($197>>>0);
            if ($198) {
             $$0253 = $196;
            } else {
             break;
            }
           }
          }
          $193 = ((($$sroa$0214$0254)) + 104|0);
          $194 = ($193|0)==($185|0);
          if ($194) {
           break;
          } else {
           $$sroa$0214$0254 = $193;
          }
         }
        }
        $189 = (($$0202256) + 1)|0;
        $190 = HEAP32[$0>>2]|0;
        $191 = (__ZNK5Image4rowsEi($190,$133)|0);
        $192 = ($189>>>0)<($191>>>0);
        if ($192) {
         $$0202256 = $189;
        } else {
         break;
        }
       }
      }
     }
    }
   } while(0);
   $154 = HEAP32[$$1>>2]|0;
   $155 = ((($154)) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (FUNCTION_TABLE_ii[$156 & 63]($$1)|0);
   $158 = ($$0207$ph267|0)<($157|0);
   if (!($158)) {
    label = 36;
    break L54;
   }
  }
  $135 = (($$0207$ph267) + 1)|0;
  $136 = HEAP32[$$1>>2]|0;
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (FUNCTION_TABLE_ii[$138 & 63]($$1)|0);
  $140 = ($135|0)<($139|0);
  if ($140) {
   $$0207$ph267 = $135;
  } else {
   label = 36;
   break;
  }
 }
 if ((label|0) == 36) {
  __Z12v_printf_ttyiPKcz(2,4962,$vararg_buffer5);
  STACKTOP = sp;return;
 }
}
function __Z16flif_decode_treeI8BufferIO15SimpleBitChance10RacInput24IS0_EEbRT_RT1_PK11ColorRangesRNSt3__26vectorI4TreeNSB_9allocatorISD_EEEE12flifEncoding($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$032 = 0, $$125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp + 28|0;
 $6 = sp;
 $7 = ((($5)) + 4|0);
 $8 = ((($5)) + 8|0);
 $9 = ($4<<24>>24)==(1);
 $$032 = 0;
 while(1) {
  $10 = HEAP32[$2>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$12 & 63]($2)|0);
  $14 = ($$032|0)<($13|0);
  if (!($14)) {
   $$125 = 1;
   label = 10;
   break;
  }
  HEAP32[$5>>2] = 0;
  HEAP32[$7>>2] = 0;
  HEAP32[$8>>2] = 0;
  if ($9) {
   __Z24initPropRanges_scanlinesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($5,$2,$$032);
  } else {
   __Z14initPropRangesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($5,$2,$$032);
  }
  __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEEC2ERS3_RKNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEEii($6,$1,$5,2,226050910);
  $15 = HEAP32[$2>>2]|0;
  $16 = ((($15)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$17 & 63]($2,$$032)|0);
  $19 = HEAP32[$2>>2]|0;
  $20 = ((($19)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iii[$21 & 63]($2,$$032)|0);
  $23 = ($18<<16>>16)<($22<<16>>16);
  if ($23) {
   $24 = HEAP32[$3>>2]|0;
   $25 = (($24) + (($$032*12)|0)|0);
   $26 = (__ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE9read_treeER4Tree($6,$25)|0);
   if (!($26)) {
    break;
   }
  }
  __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEED2Ev($6);
  __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($5);
  $27 = (($$032) + 1)|0;
  $$032 = $27;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$125|0);
 }
 __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEED2Ev($6);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($5);
 $$125 = 0;
 STACKTOP = sp;return ($$125|0);
}
function __Z26flif_decode_scanlines_passI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_I4TreeNSD_ISK_EEEER12flif_optionsRNSB_IP9TransformIS6_ENSD_ISS_EEEEPFjixESG_($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 16|0;
 $11 = sp + 4|0;
 $12 = sp;
 HEAP32[$10>>2] = 0;
 $13 = ((($10)) + 4|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($10)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (__ZNK5Image9numPlanesEv($15)|0);
 __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE7reserveEj($10,$16);
 $17 = HEAP32[$2>>2]|0;
 $18 = (__ZNK5Image9numPlanesEv($17)|0);
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = ((($11)) + 4|0);
  $21 = ((($11)) + 8|0);
  $22 = ((($5)) + 12|0);
  $23 = ((($5)) + 8|0);
  $24 = ((($10)) + 8|0);
  $$028 = 0;
  while(1) {
   HEAP32[$11>>2] = 0;
   HEAP32[$20>>2] = 0;
   HEAP32[$21>>2] = 0;
   __Z24initPropRanges_scanlinesRNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEERK11ColorRangesi($11,$3,$$028);
   $28 = HEAP32[$4>>2]|0;
   $29 = (($28) + (($$028*12)|0)|0);
   HEAP32[$12>>2] = 0;
   $30 = HEAP32[$13>>2]|0;
   $31 = HEAP32[$24>>2]|0;
   $32 = ($30>>>0)<($31>>>0);
   if ($32) {
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($9,$10,1);
    $33 = HEAP32[$13>>2]|0;
    $34 = HEAP32[$12>>2]|0;
    $35 = HEAP32[$22>>2]|0;
    $36 = HEAP32[$23>>2]|0;
    __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_RNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEER4Treeiii($33,$1,$11,$29,$34,$35,$36);
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($9);
    $37 = HEAP32[$13>>2]|0;
    $38 = ((($37)) + 16412|0);
    HEAP32[$13>>2] = $38;
   } else {
    __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS5_RNS0_INS_4pairIssEENS7_ISD_EEEER4TreeiRiSJ_EEEvDpOT_($10,$1,$11,$29,$12,$22,$23);
   }
   __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($11);
   $39 = (($$028) + 1)|0;
   $40 = HEAP32[$2>>2]|0;
   $41 = (__ZNK5Image9numPlanesEv($40)|0);
   $42 = ($39|0)<($41|0);
   if ($42) {
    $$028 = $39;
   } else {
    break;
   }
  }
 }
 $25 = ((($5)) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (__Z27flif_decode_scanlines_innerI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorIT1_NSA_9allocatorISC_EEEERNSB_I5ImageNSD_ISH_EEEEPK11ColorRangesiRNSB_IP9TransformIS6_ENSD_ISQ_EEEEPFjixESK_($0,$1,$10,$2,$3,$26,$6,$7,$8)|0);
 __ZNSt3__213__vector_baseI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEED2Ev($10);
 STACKTOP = sp;return ($27|0);
}
function __ZNSt3__213__vector_baseI4TreeNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__213__vector_baseI20PropertyDecisionNodeNS_9allocatorIS1_EEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 16412)&-1;
 $8 = ($7>>>0)<($1>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ((($0)) + 8|0);
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13|0) / 16412)&-1;
 __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEEC2EjjS9_($2,$1,$14,$9);
 __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($0,$2);
 __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __Z27flif_decode_scanlines_innerI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EEEbRT_RT0_RNSt3__26vectorIT1_NSA_9allocatorISC_EEEERNSB_I5ImageNSD_ISH_EEEEPK11ColorRangesiRNSB_IP9TransformIS6_ENSD_ISQ_EEEEPFjixESK_($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $$0176287 = 0, $$0178304 = 0, $$0185302 = 0, $$0186282 = 0, $$0187283 = 0, $$0188300 = 0, $$0205297 = 0, $$0206296 = 0, $$0208295 = 0, $$0290 = 0, $$0291 = 0, $$1207214 = 0, $$5184 = 0, $$in = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $NB_PROPERTIES_scanlinesA$NB_PROPERTIES_scanlines = 0, $exitcond = 0, $or$cond = 0, $or$cond210 = 0, $or$cond306 = 0, $or$cond5 = 0, $or$cond5$not = 0;
 var $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer = sp;
 $9 = sp + 204|0;
 $10 = sp + 192|0;
 $11 = sp + 88|0;
 $12 = sp + 44|0;
 $13 = HEAP32[$3>>2]|0;
 $14 = (__ZNK5Image9numPlanesEv($13)|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + 56|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($14|0)==(5);
 $19 = ($7|0)!=(0|0);
 $20 = ($5|0)<(100);
 $or$cond = $20 | $19;
 $21 = ($14|0)>(0);
 $or$cond306 = $or$cond & $21;
 if ($or$cond306) {
  $22 = ((($3)) + 4|0);
  $$0178304 = 0;
  while(1) {
   $23 = HEAP32[$4>>2]|0;
   $24 = ((($23)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (FUNCTION_TABLE_iii[$25 & 63]($4,$$0178304)|0);
   $27 = HEAP32[$4>>2]|0;
   $28 = ((($27)) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (FUNCTION_TABLE_iii[$29 & 63]($4,$$0178304)|0);
   $31 = ($26<<16>>16)<($30<<16>>16);
   if ($31) {
    $32 = HEAP32[$22>>2]|0;
    $33 = HEAP32[$3>>2]|0;
    $34 = (($32) - ($33))|0;
    $35 = ($34|0)>(0);
    if ($35) {
     $$0185302 = 0;
     while(1) {
      $36 = HEAP32[$3>>2]|0;
      $37 = (($36) + (($$0185302*104)|0)|0);
      $38 = (__ZNK5Image4rowsEv($37)|0);
      $39 = ($38|0)==(0);
      if (!($39)) {
       $$0188300 = 0;
       while(1) {
        $40 = HEAP32[$3>>2]|0;
        $41 = (($40) + (($$0185302*104)|0)|0);
        $42 = (__ZNK5Image4colsEv($41)|0);
        $43 = ($42|0)==(0);
        if (!($43)) {
         $$0205297 = 0;
         while(1) {
          $55 = HEAP32[$3>>2]|0;
          $56 = (($55) + (($$0185302*104)|0)|0);
          $57 = HEAP32[$4>>2]|0;
          $58 = ((($57)) + 12|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = (FUNCTION_TABLE_iii[$59 & 63]($4,$$0178304)|0);
          $61 = $60 << 16 >> 16;
          $62 = HEAP32[$4>>2]|0;
          $63 = ((($62)) + 16|0);
          $64 = HEAP32[$63>>2]|0;
          $65 = (FUNCTION_TABLE_iii[$64 & 63]($4,$$0178304)|0);
          $66 = $65 << 16 >> 16;
          $67 = (($66) + ($61))|0;
          $68 = (($67|0) / 2)&-1;
          $69 = $68&65535;
          __ZN5Image3setEijjs($56,$$0178304,$$0188300,$$0205297,$69);
          $70 = (($$0205297) + 1)|0;
          $71 = HEAP32[$3>>2]|0;
          $72 = (($71) + (($$0185302*104)|0)|0);
          $73 = (__ZNK5Image4colsEv($72)|0);
          $74 = ($70>>>0)<($73>>>0);
          if ($74) {
           $$0205297 = $70;
          } else {
           break;
          }
         }
        }
        $50 = (($$0188300) + 1)|0;
        $51 = HEAP32[$3>>2]|0;
        $52 = (($51) + (($$0185302*104)|0)|0);
        $53 = (__ZNK5Image4rowsEv($52)|0);
        $54 = ($50>>>0)<($53>>>0);
        if ($54) {
         $$0188300 = $50;
        } else {
         break;
        }
       }
      }
      $44 = (($$0185302) + 1)|0;
      $45 = HEAP32[$22>>2]|0;
      $46 = HEAP32[$3>>2]|0;
      $47 = (($45) - ($46))|0;
      $48 = (($47|0) / 104)&-1;
      $49 = ($44|0)<($48|0);
      if ($49) {
       $$0185302 = $44;
      } else {
       break;
      }
     }
    }
   }
   $75 = (($$0178304) + 1)|0;
   $exitcond = ($75|0)==($14|0);
   if ($exitcond) {
    break;
   } else {
    $$0178304 = $75;
   }
  }
 }
 __Z12computeGreysPK11ColorRanges($9,$4);
 $76 = ($14|0)>(3);
 $NB_PROPERTIES_scanlinesA$NB_PROPERTIES_scanlines = $76 ? 2400 : 2380;
 $77 = ($5|0)<(0);
 $78 = $77 << 31 >> 31;
 $79 = ((($3)) + 4|0);
 $80 = ((($6)) + 4|0);
 $81 = ((($3)) + 4|0);
 $82 = ($17<<24>>24)!=(0);
 $83 = ($17<<24>>24)!=(0);
 $$0206296 = 0;$$0208295 = 0;
 L19: while(1) {
  $84 = (2360 + ($$0208295<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)<($14|0);
  if ($86) {
   $87 = (($$0206296) + 1)|0;
   $$in = (($NB_PROPERTIES_scanlinesA$NB_PROPERTIES_scanlines) + ($85<<2)|0);
   $88 = HEAP32[$$in>>2]|0;
   __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($10,$88);
   $89 = 14080;
   $90 = $89;
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + 4)|0;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (___muldi3(($91|0),($94|0),100,0)|0);
   $96 = tempRet0;
   $97 = 14072;
   $98 = $97;
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + 4)|0;
   $101 = $100;
   $102 = HEAP32[$101>>2]|0;
   $103 = (___muldi3(($99|0),($102|0),($5|0),($78|0))|0);
   $104 = tempRet0;
   $105 = ($96|0)>($104|0);
   $106 = ($95>>>0)>($103>>>0);
   $107 = ($96|0)==($104|0);
   $108 = $107 & $106;
   $109 = $105 | $108;
   if ($109) {
    label = 14;
    break;
   }
   $112 = HEAP32[$4>>2]|0;
   $113 = ((($112)) + 12|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (FUNCTION_TABLE_iii[$114 & 63]($4,$85)|0);
   $116 = HEAP32[$4>>2]|0;
   $117 = ((($116)) + 16|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (FUNCTION_TABLE_iii[$118 & 63]($4,$85)|0);
   $120 = ($115<<16>>16)<($119<<16>>16);
   if ($120) {
    $121 = HEAP32[$4>>2]|0;
    $122 = ((($121)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (FUNCTION_TABLE_iii[$123 & 63]($4,$85)|0);
    $125 = 14080;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($125) + 4)|0;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $131 = (___muldi3(($127|0),($130|0),100,0)|0);
    $132 = tempRet0;
    $133 = 14072;
    $134 = $133;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($133) + 4)|0;
    $137 = $136;
    $138 = HEAP32[$137>>2]|0;
    $139 = (___divdi3(($131|0),($132|0),($135|0),($138|0))|0);
    $140 = tempRet0;
    $141 = HEAP32[$3>>2]|0;
    $142 = (__ZNK5Image4colsEv($141)|0);
    $143 = HEAP32[$3>>2]|0;
    $144 = (__ZNK5Image4rowsEv($143)|0);
    HEAP32[$vararg_buffer4>>2] = $139;
    $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $87;
    $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
    HEAP32[$vararg_ptr8>>2] = $14;
    $vararg_ptr9 = ((($vararg_buffer4)) + 12|0);
    HEAP32[$vararg_ptr9>>2] = $142;
    $vararg_ptr10 = ((($vararg_buffer4)) + 16|0);
    HEAP32[$vararg_ptr10>>2] = $144;
    __Z12v_printf_ttyiPKcz(2,7240,$vararg_buffer4);
    __Z12v_printf_ttyiPKcz(4,4962,$vararg_buffer11);
    $145 = HEAP32[$3>>2]|0;
    $146 = (__ZNK5Image4colsEv($145)|0);
    $147 = HEAP32[$3>>2]|0;
    $148 = (__ZNK5Image4rowsEv($147)|0);
    $149 = Math_imul($148, $146)|0;
    $150 = 14080;
    $151 = $150;
    $152 = HEAP32[$151>>2]|0;
    $153 = (($150) + 4)|0;
    $154 = $153;
    $155 = HEAP32[$154>>2]|0;
    $156 = (_i64Add(($149|0),0,($152|0),($155|0))|0);
    $157 = tempRet0;
    $158 = 14080;
    $159 = $158;
    HEAP32[$159>>2] = $156;
    $160 = (($158) + 4)|0;
    $161 = $160;
    HEAP32[$161>>2] = $157;
    $162 = HEAP32[$3>>2]|0;
    $163 = (__ZNK5Image4rowsEv($162)|0);
    $164 = ($163|0)==(0);
    if (!($164)) {
     $$0187283 = 0;
     while(1) {
      $165 = HEAP32[$3>>2]|0;
      $166 = (__ZNK5Image4colsEv($165)|0);
      $167 = ($166|0)==(0);
      if ($167) {
       break L19;
      }
      $168 = HEAP32[$81>>2]|0;
      $169 = HEAP32[$3>>2]|0;
      $170 = (($168) - ($169))|0;
      $171 = ($170|0)>(0);
      if ($171) {
       $$0186282 = 0;
       while(1) {
        $176 = HEAP32[$3>>2]|0;
        $177 = (($176) + (($$0186282*104)|0)|0);
        $178 = (__ZN5Image8getPlaneEi($177,$85)|0);
        __ZN13ConstantPlaneC2Es($11,1);
        if ($76) {
         $179 = (__ZN5Image8getPlaneEi($177,3)|0);
         $181 = $179;
        } else {
         $181 = $11;
        }
        $180 = HEAP32[$181>>2]|0;
        $182 = ((($180)) + 20|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = (FUNCTION_TABLE_ii[$183 & 63]($181)|0);
        if ($184) {
         $185 = HEAP32[$2>>2]|0;
         $186 = (($185) + (($85*16412)|0)|0);
         $187 = HEAP32[$9>>2]|0;
         $188 = (($187) + ($85<<1)|0);
         $189 = HEAP16[$188>>1]|0;
         __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneEC2ERS5_RNSt3__26vectorI5ImageNS9_9allocatorISB_EEEEPK11ColorRangesRNSA_IsNSC_IsEEEERK12GeneralPlaneiijssbb($12,$186,$3,$4,$10,$181,$85,$$0186282,$$0187283,$189,$124,$82,$18);
         $190 = HEAP32[$178>>2]|0;
         $191 = ((($190)) + 48|0);
         $192 = HEAP32[$191>>2]|0;
         FUNCTION_TABLE_vii[$192 & 31]($178,$12);
         __ZN12PlaneVisitorD2Ev($12);
        } else {
         $193 = (__ZNK5Image8getDepthEv($177)|0);
         $194 = ($193|0)<(9);
         if ($194) {
          $195 = HEAP32[$2>>2]|0;
          $196 = (($195) + (($85*16412)|0)|0);
          $197 = HEAP32[$9>>2]|0;
          $198 = (($197) + ($85<<1)|0);
          $199 = HEAP16[$198>>1]|0;
          __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEEC2ERS5_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_IsNSD_IsEEEERK12GeneralPlaneiijssbb($12,$196,$3,$4,$10,$181,$85,$$0186282,$$0187283,$199,$124,$83,$18);
          $200 = HEAP32[$178>>2]|0;
          $201 = ((($200)) + 48|0);
          $202 = HEAP32[$201>>2]|0;
          FUNCTION_TABLE_vii[$202 & 31]($178,$12);
          __ZN12PlaneVisitorD2Ev($12);
         }
        }
        __ZN12GeneralPlaneD2Ev($11);
        $203 = (($$0186282) + 1)|0;
        $204 = HEAP32[$81>>2]|0;
        $205 = HEAP32[$3>>2]|0;
        $206 = (($204) - ($205))|0;
        $207 = (($206|0) / 104)&-1;
        $208 = ($203|0)<($207|0);
        if ($208) {
         $$0186282 = $203;
        } else {
         break;
        }
       }
      }
      $172 = (($$0187283) + 1)|0;
      $173 = HEAP32[$3>>2]|0;
      $174 = (__ZNK5Image4rowsEv($173)|0);
      $175 = ($172>>>0)<($174>>>0);
      if ($175) {
       $$0187283 = $172;
      } else {
       break;
      }
     }
    }
    $209 = 14080;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = (($209) + 4)|0;
    $213 = $212;
    $214 = HEAP32[$213>>2]|0;
    $215 = (___muldi3(($211|0),($214|0),10000,0)|0);
    $216 = tempRet0;
    $217 = 14072;
    $218 = $217;
    $219 = HEAP32[$218>>2]|0;
    $220 = (($217) + 4)|0;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (___divdi3(($215|0),($216|0),($219|0),($222|0))|0);
    $224 = tempRet0;
    $225 = ($85|0)!=(4);
    $or$cond5 = $19 & $225;
    $or$cond5$not = $or$cond5 ^ 1;
    $226 = HEAP32[5583]|0;
    $227 = ($223|0)<($226|0);
    $or$cond210 = $227 | $or$cond5$not;
    if (!($or$cond210)) {
     $228 = HEAP32[$79>>2]|0;
     $229 = HEAP32[$3>>2]|0;
     $230 = ($228|0)==($229|0);
     if (!($230)) {
      $$0176287 = 0;
      while(1) {
       $236 = HEAP32[$8>>2]|0;
       $237 = HEAP32[$3>>2]|0;
       $238 = (($237) + (($$0176287*104)|0)|0);
       __ZNK5Image5cloneEv($11,$238);
       $239 = (($236) + (($$0176287*104)|0)|0);
       (__ZN5ImageaSEOS_($239,$11)|0);
       __ZN5ImageD2Ev($11);
       $240 = (($$0176287) + 1)|0;
       $241 = HEAP32[$79>>2]|0;
       $242 = HEAP32[$3>>2]|0;
       $243 = (($241) - ($242))|0;
       $244 = (($243|0) / 104)&-1;
       $245 = ($240>>>0)<($244>>>0);
       if ($245) {
        $$0176287 = $240;
       } else {
        break;
       }
      }
     }
     $231 = HEAP32[$80>>2]|0;
     $232 = HEAP32[$6>>2]|0;
     $233 = (($231) - ($232))|0;
     $234 = ($233|0)>(0);
     if ($234) {
      $235 = $233 >> 2;
      $$0290 = (($235) + -1)|0;
      $$0291 = $$0290;
      while(1) {
       $251 = HEAP32[$6>>2]|0;
       $252 = (($251) + ($$0291<<2)|0);
       $253 = HEAP32[$252>>2]|0;
       $254 = HEAP32[$253>>2]|0;
       $255 = ((($254)) + 12|0);
       $256 = HEAP32[$255>>2]|0;
       $257 = (FUNCTION_TABLE_ii[$256 & 63]($253)|0);
       if ($257) {
        $259 = HEAP32[$6>>2]|0;
        $260 = (($259) + ($$0291<<2)|0);
        $261 = HEAP32[$260>>2]|0;
        $262 = HEAP32[$261>>2]|0;
        $263 = ((($262)) + 28|0);
        $264 = HEAP32[$263>>2]|0;
        FUNCTION_TABLE_vii[$264 & 31]($261,$8);
       }
       $$0 = (($$0291) + -1)|0;
       $258 = ($$0|0)>(-1);
       if ($258) {
        $$0291 = $$0;
       } else {
        break;
       }
      }
     }
     HEAP32[589] = $223;
     $246 = (__ZN8BufferIO5ftellEv($0)|0);
     $247 = ($246|0)<(0);
     $248 = $247 << 31 >> 31;
     $249 = (FUNCTION_TABLE_iiii[$7 & 63]($223,$246,$248)|0);
     HEAP32[5583] = $249;
     $250 = ($223|0)<($249|0);
     if (!($250)) {
      break;
     }
    }
   }
   __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($10);
   $$1207214 = $87;
  } else {
   $$1207214 = $$0206296;
  }
  $265 = (($$0208295) + 1)|0;
  $266 = ($265|0)<(5);
  if ($266) {
   $$0206296 = $$1207214;$$0208295 = $265;
  } else {
   $$5184 = 1;
   label = 39;
   break;
  }
 }
 if ((label|0) == 14) {
  $110 = (___divdi3(($95|0),($96|0),($99|0),($102|0))|0);
  $111 = tempRet0;
  HEAP32[$vararg_buffer>>2] = $91;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $99;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $5;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $110;
  __Z8v_printfiPKcz(5,7164,$vararg_buffer);
 }
 else if ((label|0) == 39) {
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($9);
  STACKTOP = sp;return ($$5184|0);
 }
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($10);
 $$5184 = 0;
 __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($9);
 STACKTOP = sp;return ($$5184|0);
}
function __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_RNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEER4Treeiii($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $7 = sp;
 __ZN24FinalCompoundSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_ii($0,$1,$5,$6);
 $8 = ((($0)) + 16392|0);
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = $12 >> 2;
 HEAP32[$8>>2] = $13;
 $14 = ((($0)) + 16396|0);
 __ZN26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EEC2Ev($7);
 __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEEC2EjRKS3_($14,1,$7);
 $15 = ((($0)) + 16408|0);
 HEAP32[$15>>2] = $3;
 $16 = HEAP32[$3>>2]|0;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE24__emplace_back_slow_pathIJRS5_RNS0_INS_4pairIssEENS7_ISD_EEEER4TreeiRiSJ_EEEvDpOT_($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $7 = sp;
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = (($12|0) / 16412)&-1;
 $14 = (($13) + 1)|0;
 $15 = (__ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE8max_sizeEv($0)|0);
 $16 = ($15>>>0)<($14>>>0);
 if ($16) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $17 = ((($0)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$0>>2]|0;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 16412)&-1;
  $22 = $15 >>> 1;
  $23 = ($21>>>0)<($22>>>0);
  $24 = $21 << 1;
  $25 = ($24>>>0)<($14>>>0);
  $$sroa$speculated$i = $25 ? $14 : $24;
  $$0$i = $23 ? $$sroa$speculated$i : $15;
  $26 = HEAP32[$9>>2]|0;
  $27 = (($26) - ($19))|0;
  $28 = (($27|0) / 16412)&-1;
  __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEEC2EjjS9_($7,$$0$i,$28,$8);
  $29 = ((($7)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$4>>2]|0;
  $32 = HEAP32[$5>>2]|0;
  $33 = HEAP32[$6>>2]|0;
  __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_RNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEER4Treeiii($30,$1,$2,$3,$31,$32,$33);
  $34 = HEAP32[$29>>2]|0;
  $35 = ((($34)) + 16412|0);
  HEAP32[$29>>2] = $35;
  __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($0,$7);
  __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEED2Ev($7);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__213__vector_baseI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -16412|0);
   HEAP32[$3>>2] = $6;
   __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($1|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 __ZdlPv($10);
 return;
}
function __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16396|0);
 __ZNSt3__213__vector_baseI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEED2Ev($1);
 return;
}
function __ZNSt3__213__vector_baseI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($1|0);
 if (!($5)) {
  $scevgep$i$i = ((($4)) + -60|0);
  $6 = $scevgep$i$i;
  $7 = $1;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 60)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i = (($4) + (($10*60)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 261696;
}
function __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEEC2EjjS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(261696);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = ($1*16412)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*16412)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*16412)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 if (!($6)) {
  $$06$i = $4;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + -16412|0);
   $9 = ((($$06$i)) + -16412|0);
   __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2EOS4_($8,$9);
   $10 = HEAP32[$5>>2]|0;
   $11 = ((($10)) + -16412|0);
   HEAP32[$5>>2] = $11;
   $12 = ($9|0)==($2|0);
   if ($12) {
    break;
   } else {
    $$06$i = $9;
   }
  }
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16412)&-1;
 __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EERNS_9allocatorIS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -16412|0);
   HEAP32[$3>>2] = $6;
   __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($2|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 16412)&-1;
 $6 = (($1) + (($5*16412)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 16412)&-1;
 $11 = (($1) + (($10*16412)|0)|0);
 __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$1,$6,$11,$6);
 return;
}
function __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2EOS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memcpy(($0|0),($1|0),16396)|0;
 $2 = ((($0)) + 16396|0);
 $3 = ((($1)) + 16396|0);
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 16400|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16404|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($1)) + 16400|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = ((($1)) + 16404|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 16404|0);
 HEAP32[$11>>2] = $10;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$3>>2] = 0;
 $12 = ((($0)) + 16408|0);
 $13 = ((($1)) + 16408|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 return;
}
function __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 16412)&-1;
 $7 = (($2) + (($6*16412)|0)|0);
 $8 = (($2) + (($1*16412)|0)|0);
 __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN24FinalCompoundSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERS3_ii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 4|0);
 __ZN20SimpleBitChanceTableC2Eii($4,$2,$3);
 return;
}
function __ZN26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EEC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12SymbolChanceI15SimpleBitChanceLi10EEC2Ev($0);
 return;
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEEC2EjRKS3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  dest=$8; src=$2; stop=dest+60|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($9)) + 60|0);
  HEAP32[$7>>2] = $10;
  $11 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(71582788);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*60)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*60)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 71582788;
}
function __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 60)&-1;
 $7 = (($2) + (($6*60)|0)|0);
 $8 = (($2) + (($1*60)|0)|0);
 __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EEC2Ev($0) {
 $0 = $0|0;
 var $$01315 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN15SimpleBitChanceC2Ev($0);
 $1 = ((($0)) + 2|0);
 __ZN15SimpleBitChanceC2Ev($1);
 $2 = ((($0)) + 4|0);
 __ZN15SimpleBitChanceC2Ev($2);
 $3 = ((($0)) + 6|0);
 __ZN15SimpleBitChanceC2Ev($3);
 $4 = ((($0)) + 8|0);
 __ZN15SimpleBitChanceC2Ev($4);
 $5 = ((($0)) + 10|0);
 __ZN15SimpleBitChanceC2Ev($5);
 $6 = ((($0)) + 12|0);
 __ZN15SimpleBitChanceC2Ev($6);
 $7 = ((($0)) + 14|0);
 __ZN15SimpleBitChanceC2Ev($7);
 $8 = ((($0)) + 16|0);
 __ZN15SimpleBitChanceC2Ev($8);
 $9 = ((($0)) + 18|0);
 __ZN15SimpleBitChanceC2Ev($9);
 $10 = ((($0)) + 20|0);
 __ZN15SimpleBitChanceC2Ev($10);
 $11 = ((($0)) + 22|0);
 __ZN15SimpleBitChanceC2Ev($11);
 $12 = ((($0)) + 24|0);
 __ZN15SimpleBitChanceC2Ev($12);
 $13 = ((($0)) + 26|0);
 __ZN15SimpleBitChanceC2Ev($13);
 $14 = ((($0)) + 28|0);
 __ZN15SimpleBitChanceC2Ev($14);
 $15 = ((($0)) + 30|0);
 __ZN15SimpleBitChanceC2Ev($15);
 $16 = ((($0)) + 32|0);
 __ZN15SimpleBitChanceC2Ev($16);
 $17 = ((($0)) + 34|0);
 __ZN15SimpleBitChanceC2Ev($17);
 $18 = ((($0)) + 36|0);
 __ZN15SimpleBitChanceC2Ev($18);
 $19 = ((($0)) + 38|0);
 __ZN15SimpleBitChanceC2Ev($19);
 $20 = ((($0)) + 40|0);
 __ZN15SimpleBitChanceC2Ev($20);
 $21 = ((($0)) + 42|0);
 __ZN15SimpleBitChanceC2Ev($21);
 $22 = ((($0)) + 44|0);
 __ZN15SimpleBitChanceC2Ev($22);
 $23 = ((($0)) + 46|0);
 __ZN15SimpleBitChanceC2Ev($23);
 $24 = ((($0)) + 48|0);
 __ZN15SimpleBitChanceC2Ev($24);
 $25 = ((($0)) + 50|0);
 __ZN15SimpleBitChanceC2Ev($25);
 $26 = ((($0)) + 52|0);
 __ZN15SimpleBitChanceC2Ev($26);
 $27 = ((($0)) + 54|0);
 __ZN15SimpleBitChanceC2Ev($27);
 $28 = ((($0)) + 56|0);
 __ZN15SimpleBitChanceC2Ev($28);
 $29 = ((($0)) + 58|0);
 __ZN15SimpleBitChanceC2Ev($29);
 $30 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitZeroEv($0)|0);
 __ZN15SimpleBitChance9set_12bitEt($30,1000);
 $31 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitSignEv($0)|0);
 __ZN15SimpleBitChance9set_12bitEt($31,2048);
 $$01315 = 0;
 while(1) {
  $32 = $$01315 << 1;
  $33 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE6bitExpEi($0,$32)|0);
  $34 = (3204 + ($$01315<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  __ZN15SimpleBitChance9set_12bitEt($33,$35);
  $36 = $32 | 1;
  $37 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE6bitExpEi($0,$36)|0);
  __ZN15SimpleBitChance9set_12bitEt($37,$35);
  $38 = (($$01315) + 1)|0;
  $exitcond = ($38|0)==(9);
  if ($exitcond) {
   break;
  } else {
   $$01315 = $38;
  }
 }
 $39 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,0)|0);
 __ZN15SimpleBitChance9set_12bitEt($39,1900);
 $40 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,1)|0);
 __ZN15SimpleBitChance9set_12bitEt($40,1850);
 $41 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,2)|0);
 __ZN15SimpleBitChance9set_12bitEt($41,1800);
 $42 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,3)|0);
 __ZN15SimpleBitChance9set_12bitEt($42,1750);
 $43 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,4)|0);
 __ZN15SimpleBitChance9set_12bitEt($43,1650);
 $44 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,5)|0);
 __ZN15SimpleBitChance9set_12bitEt($44,1600);
 $45 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,6)|0);
 __ZN15SimpleBitChance9set_12bitEt($45,1600);
 $46 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,7)|0);
 __ZN15SimpleBitChance9set_12bitEt($46,2048);
 $47 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,8)|0);
 __ZN15SimpleBitChance9set_12bitEt($47,2048);
 $48 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,9)|0);
 __ZN15SimpleBitChance9set_12bitEt($48,2048);
 return;
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitZeroEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitSignEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2|0);
 return ($1|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EE6bitExpEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 4|0) + ($1<<1)|0);
 return ($2|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (((($0)) + 40|0) + ($1<<1)|0);
 return ($2|0);
}
function __Z12computeGreysPK11ColorRanges($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 2|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 $$012 = 0;
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_ii[$9 & 63]($1)|0);
  $11 = ($$012|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = HEAP32[$1>>2]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_iii[$14 & 63]($1,$$012)|0);
  $16 = HEAP32[$1>>2]|0;
  $17 = ((($16)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iii[$18 & 63]($1,$$012)|0);
  $20 = $15 << 16 >> 16;
  $21 = $19 << 16 >> 16;
  $22 = (($21) + ($20))|0;
  $23 = (($22|0) / 2)&-1;
  $24 = $23&65535;
  HEAP16[$3>>1] = $24;
  $25 = HEAP32[$4>>2]|0;
  $26 = HEAP32[$6>>2]|0;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($2,$0,1);
   $28 = HEAP32[$4>>2]|0;
   $29 = HEAP16[$3>>1]|0;
   HEAP16[$28>>1] = $29;
   __ZNSt3__26vectorIsNS_9allocatorIsEEE24__RAII_IncreaseAnnotator6__doneEv($2);
   $30 = HEAP32[$4>>2]|0;
   $31 = ((($30)) + 2|0);
   HEAP32[$4>>2] = $31;
  } else {
   __ZNSt3__26vectorIsNS_9allocatorIsEEE21__push_back_slow_pathIsEEvOT_($0,$3);
  }
  $32 = (($$012) + 1)|0;
  $$012 = $32;
 }
 STACKTOP = sp;return;
}
function __ZN5Image8getPlaneEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneEC2ERS5_RNSt3__26vectorI5ImageNS9_9allocatorISB_EEEEPK11ColorRangesRNSA_IsNSC_IsEEEERK12GeneralPlaneiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorC2Ev($0);
 HEAP32[$0>>2] = (2536);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $1;
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = $2;
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $3;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = $4;
 $17 = ((($0)) + 20|0);
 HEAP32[$17>>2] = $5;
 $18 = ((($0)) + 24|0);
 HEAP32[$18>>2] = $6;
 $19 = ((($0)) + 28|0);
 HEAP32[$19>>2] = $7;
 $20 = ((($0)) + 32|0);
 HEAP32[$20>>2] = $8;
 $21 = ((($0)) + 36|0);
 HEAP16[$21>>1] = $9;
 $22 = ((($0)) + 38|0);
 HEAP16[$22>>1] = $10;
 $23 = ((($0)) + 40|0);
 $24 = $11&1;
 HEAP8[$23>>0] = $24;
 $25 = ((($0)) + 41|0);
 $26 = $12&1;
 HEAP8[$25>>0] = $26;
 return;
}
function __ZN12PlaneVisitorD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK5Image8getDepthEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEEC2ERS5_RNSt3__26vectorI5ImageNSA_9allocatorISC_EEEEPK11ColorRangesRNSB_IsNSD_IsEEEERK12GeneralPlaneiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorC2Ev($0);
 HEAP32[$0>>2] = (2488);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $1;
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = $2;
 $15 = ((($0)) + 12|0);
 HEAP32[$15>>2] = $3;
 $16 = ((($0)) + 16|0);
 HEAP32[$16>>2] = $4;
 $17 = ((($0)) + 20|0);
 HEAP32[$17>>2] = $5;
 $18 = ((($0)) + 24|0);
 HEAP32[$18>>2] = $6;
 $19 = ((($0)) + 28|0);
 HEAP32[$19>>2] = $7;
 $20 = ((($0)) + 32|0);
 HEAP32[$20>>2] = $8;
 $21 = ((($0)) + 36|0);
 HEAP16[$21>>1] = $9;
 $22 = ((($0)) + 38|0);
 HEAP16[$22>>1] = $10;
 $23 = ((($0)) + 40|0);
 $24 = $11&1;
 HEAP8[$23>>0] = $24;
 $25 = ((($0)) + 41|0);
 $26 = $12&1;
 HEAP8[$25>>0] = $26;
 return;
}
function __ZN12PlaneVisitorC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2512);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEE5visitERS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 36|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ((($0)) + 38|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ((($0)) + 40|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ((($0)) + 41|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEKS7_EvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPK11ColorRangesRT1_RNSE_IsNSG_IsEEEEiijssbb($1,$3,$5,$7,$9,$11,$13,$15,$17,$19,$21,$24,$27);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEE5visitERS6_IsE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 36|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ((($0)) + 38|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ((($0)) + 40|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ((($0)) + 41|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsEKS6_IhEEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($1,$3,$5,$7,$9,$11,$13,$15,$17,$19,$21,$24,$27);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsEKS6_IhEEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0156 = 0, $$0157 = 0, $$0158163 = 0, $$0159166 = 0, $$0162 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $exitcond = 0, $exitcond168 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $13 = sp + 2|0;
 $14 = sp;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + (($7*104)|0)|0);
 $17 = (__ZNK5Image4colsEv($16)|0);
 $18 = (((($15) + (($7*104)|0)|0)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(-1);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + (($19*104)|0)|0);
  $23 = (__ZN5Image8getPlaneEi($22,$6)|0);
  $24 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$23,$8,0,$24,1);
  STACKTOP = sp;return;
 }
 $25 = ($7|0)>(0);
 do {
  if ($25) {
   $26 = (((($15) + (($7*104)|0)|0)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($8<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($15) + (($7*104)|0)|0)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($8<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($6|0)<(3);
   $or$cond = $34 & $11;
   if (!($or$cond)) {
    $44 = ($6|0)==(4);
    if ($44) {
     $$0156 = $29;$$0157 = $33;
     break;
    }
    $45 = (($7) + -1)|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = (($46) + (($45*104)|0)|0);
    $48 = (__ZN5Image8getPlaneEi($47,$6)|0);
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$48,$8,0,$29,1);
    $$0156 = $29;$$0157 = $33;
    break;
   }
   $35 = ($29|0)==(0);
   if ($35) {
    $$0156 = 0;$$0157 = $33;
   } else {
    $36 = (($7) + -1)|0;
    $$0159166 = 0;
    while(1) {
     $37 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0159166)|0);
     $38 = ($37<<16>>16)==(0);
     if ($38) {
      $39 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0159166,$9)|0);
      __ZN5PlaneIsE3setEjjs($0,$8,$$0159166,$39);
     } else {
      $40 = HEAP32[$2>>2]|0;
      $41 = (($40) + (($36*104)|0)|0);
      $42 = (__ZNK5ImageclEijj($41,$6,$8,$$0159166)|0);
      __ZN5Image3setEijjs($16,$6,$8,$$0159166,$42);
     }
     $43 = (($$0159166) + 1)|0;
     $exitcond168 = ($43|0)==($29|0);
     if ($exitcond168) {
      $$0156 = $29;$$0157 = $33;
      break;
     } else {
      $$0159166 = $43;
     }
    }
   }
  } else {
   $$0156 = 0;$$0157 = $17;
  }
 } while(0);
 $49 = ($$0156>>>0)<($$0157>>>0);
 if ($49) {
  $50 = ($6|0)<(3);
  $or$cond3 = $50 & $11;
  $51 = ($6|0)<(4);
  $or$cond5 = $51 & $12;
  $52 = ($6|0)==(4);
  $or$cond7 = $52 & $12;
  $53 = $7&65535;
  $$0158163 = $$0156;
  while(1) {
   if ($or$cond3) {
    $54 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0158163)|0);
    $55 = ($54<<16>>16)==(0);
    if ($55) {
     $56 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0158163,$9)|0);
     __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$56);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     if ($or$cond5) {
      $57 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
      $58 = ($57<<16>>16)>(0);
      if ($58) {
       $59 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
       $60 = $59 << 16 >> 16;
       $61 = (($7) - ($60))|0;
       $62 = HEAP32[$2>>2]|0;
       $63 = (($62) + (($61*104)|0)|0);
       $64 = (__ZNK5ImageclEijj($63,$6,$8,$$0158163)|0);
       __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$64);
       break;
      }
     }
     $65 = (__Z37predict_and_calcProps_scanlines_planeI5PlaneIsELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($5,$3,$16,$0,$6,$8,$$0158163,$13,$14,$10)|0);
     if ($or$cond7) {
      $66 = HEAP16[$14>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = ($67|0)>($7|0);
      if ($68) {
       HEAP16[$14>>1] = $53;
      }
     }
     $69 = HEAP16[$13>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = $65 << 16 >> 16;
     $72 = (($70) - ($71))|0;
     $73 = HEAP16[$14>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = (($74) - ($71))|0;
     $76 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$5,$72,$75)|0);
     $77 = (($76) + ($71))|0;
     $78 = $77&65535;
     __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$78);
    }
   } while(0);
   $79 = (($$0158163) + 1)|0;
   $exitcond = ($79|0)==($$0157|0);
   if ($exitcond) {
    break;
   } else {
    $$0158163 = $79;
   }
  }
 }
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $80 = ($6|0)<(3);
 $or$cond9 = $80 & $11;
 if (!($or$cond9)) {
  $93 = ($6|0)==(4);
  if ($93) {
   STACKTOP = sp;return;
  }
  $94 = (($7) + -1)|0;
  $95 = HEAP32[$2>>2]|0;
  $96 = (($95) + (($94*104)|0)|0);
  $97 = (__ZN5Image8getPlaneEi($96,$6)|0);
  $98 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$97,$8,$$0157,$98,1);
  STACKTOP = sp;return;
 }
 $81 = (__ZNK5Image4colsEv($16)|0);
 $82 = ($$0157>>>0)<($81>>>0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = (($7) + -1)|0;
 $$0162 = $$0157;
 while(1) {
  $84 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0162)|0);
  $85 = ($84<<16>>16)==(0);
  if ($85) {
   $86 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0162,$9)|0);
   __ZN5PlaneIsE3setEjjs($0,$8,$$0162,$86);
  } else {
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + (($83*104)|0)|0);
   $89 = (__ZNK5ImageclEijj($88,$6,$8,$$0162)|0);
   __ZN5Image3setEijjs($16,$6,$8,$$0162,$89);
  }
  $90 = (($$0162) + 1)|0;
  $91 = (__ZNK5Image4colsEv($16)|0);
  $92 = ($90>>>0)<($91>>>0);
  if ($92) {
   $$0162 = $90;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03133 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($1)|0);
 if ($9) {
  $10 = ($3>>>0)<($4>>>0);
  if ($10) {
   $$03133 = $3;
  } else {
   return;
  }
  while(1) {
   $11 = (__ZNK13ConstantPlane3getEjj($1,$2,$$03133)|0);
   __ZN5PlaneIsE3setEjjs($0,$2,$$03133,$11);
   $12 = (($$03133) + ($5))|0;
   $13 = ($12>>>0)<($4>>>0);
   if ($13) {
    $$03133 = $12;
   } else {
    break;
   }
  }
  return;
 } else {
  $14 = ($3>>>0)<($4>>>0);
  if ($14) {
   $$034 = $3;
  } else {
   return;
  }
  while(1) {
   $15 = (__ZNK5PlaneIsE3getEjj($1,$2,$$034)|0);
   __ZN5PlaneIsE3setEjjs($0,$2,$$034,$15);
   $16 = (($$034) + ($5))|0;
   $17 = ($16>>>0)<($4>>>0);
   if ($17) {
    $$034 = $16;
   } else {
    break;
   }
  }
  return;
 }
}
function __Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0);
 if ($4) {
  $5 = ($1|0)==(0);
  if ($5) {
   $19 = $3;$21 = $3;$24 = $3;
  } else {
   $9 = (($1) + -1)|0;
   $10 = (__ZNK5PlaneIsE3getEjj($0,$9,$2)|0);
   $11 = (($1) + -1)|0;
   $12 = (__ZNK5PlaneIsE3getEjj($0,$11,$2)|0);
   $19 = $10;$21 = $12;$24 = $12;
  }
 } else {
  $6 = (($2) + -1)|0;
  $7 = (__ZNK5PlaneIsE3getEjj($0,$1,$6)|0);
  $8 = ($1|0)==(0);
  if ($8) {
   $19 = $7;$21 = $7;$24 = $7;
  } else {
   $13 = (($1) + -1)|0;
   $14 = (__ZNK5PlaneIsE3getEjj($0,$13,$2)|0);
   $15 = (($2) + -1)|0;
   $16 = (($1) + -1)|0;
   $17 = (__ZNK5PlaneIsE3getEjj($0,$16,$15)|0);
   $19 = $7;$21 = $14;$24 = $17;
  }
 }
 $18 = $19&65535;
 $20 = $21&65535;
 $22 = (($18) + ($20))|0;
 $23 = $24&65535;
 $25 = (($22) - ($23))|0;
 $26 = $25&65535;
 $27 = (__Z7median3IsET_S0_S0_S0_($26,$19,$21)|0);
 return ($27|0);
}
function __ZN5Image6getFRAEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK5PlaneIhE3getEjj($4,$1,$2)|0);
 return ($5|0);
}
function __Z37predict_and_calcProps_scanlines_planeI5PlaneIsELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$0 = 0, $$0117$lcssa = 0, $$0117129 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond124 = 0, $or$cond5 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $10 = sp;
 $11 = ($4|0)<(3);
 if ($11) {
  $12 = ($4|0)>(0);
  if ($12) {
   $$0117129 = 0;
   while(1) {
    $15 = (__ZNK5ImageclEijj($2,$$0117129,$5,$6)|0);
    $16 = (($$0117129) + 1)|0;
    $17 = HEAP32[$0>>2]|0;
    $18 = (($17) + ($$0117129<<1)|0);
    HEAP16[$18>>1] = $15;
    $exitcond = ($16|0)==($4|0);
    if ($exitcond) {
     $$0117$lcssa = $4;
     break;
    } else {
     $$0117129 = $16;
    }
   }
  } else {
   $$0117$lcssa = 0;
  }
  $13 = (__ZNK5Image9numPlanesEv($2)|0);
  $14 = ($13|0)>(3);
  if ($14) {
   $19 = (($$0117$lcssa) + 1)|0;
   $20 = (__ZNK5ImageclEijj($2,3,$5,$6)|0);
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + ($$0117$lcssa<<1)|0);
   HEAP16[$22>>1] = $20;
   $$1 = $19;
  } else {
   $$1 = $$0117$lcssa;
  }
 } else {
  $$1 = 0;
 }
 $23 = ($6|0)==(0);
 if ($23) {
  $24 = ($5|0)==(0);
  if ($24) {
   $37 = $9;$38 = $9;$39 = 0;
   label = 12;
  } else {
   $25 = (($5) + -1)|0;
   $26 = (__ZNK5PlaneIsE3getEjj($3,$25,$6)|0);
   $27 = (($5) + -1)|0;
   $28 = (__ZNK5PlaneIsE3getEjj($3,$27,$6)|0);
   $37 = $26;$38 = $28;$39 = 1;
   label = 12;
  }
 } else {
  $29 = (($6) + -1)|0;
  $30 = (__ZNK5PlaneIsE3getEjj($3,$5,$29)|0);
  $31 = ($5|0)==(0);
  if ($31) {
   $37 = $30;$38 = $30;$39 = 0;
   label = 12;
  } else {
   $32 = (($5) + -1)|0;
   $33 = (__ZNK5PlaneIsE3getEjj($3,$32,$6)|0);
   $34 = (($5) + -1)|0;
   $35 = (($6) + -1)|0;
   $36 = (__ZNK5PlaneIsE3getEjj($3,$34,$35)|0);
   $42 = $30;$44 = $33;$47 = $36;$84 = 1;$or$cond124 = 1;
  }
 }
 if ((label|0) == 12) {
  $40 = $39 ? $38 : $37;
  $42 = $37;$44 = $38;$47 = $40;$84 = $39;$or$cond124 = 0;
 }
 $41 = $42 << 16 >> 16;
 $43 = $44 << 16 >> 16;
 $45 = (($41) + ($43))|0;
 $46 = $47 << 16 >> 16;
 $48 = (($45) - ($46))|0;
 $49 = $48&65535;
 $50 = (__Z7median3IsET_S0_S0_S0_($49,$42,$44)|0);
 HEAP16[$10>>1] = $50;
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_viiiiii[$53 & 15]($1,$4,$0,$7,$8,$10);
 $54 = HEAP16[$10>>1]|0;
 $55 = $54 << 16 >> 16;
 $sext = $48 << 16;
 $56 = $sext >> 16;
 $57 = ($55|0)==($56|0);
 if ($57) {
  $$0 = 0;
 } else {
  $58 = ($54<<16>>16)==($42<<16>>16);
  if ($58) {
   $$0 = 1;
  } else {
   $59 = ($54<<16>>16)==($44<<16>>16);
   $$ = $59 ? 2 : 0;
   $$0 = $$;
  }
 }
 $60 = HEAP16[$10>>1]|0;
 $61 = (($$1) + 1)|0;
 $62 = HEAP32[$0>>2]|0;
 $63 = (($62) + ($$1<<1)|0);
 HEAP16[$63>>1] = $60;
 $64 = (($$1) + 2)|0;
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + ($61<<1)|0);
 HEAP16[$66>>1] = $$0;
 if ($or$cond124) {
  $67 = (($41) - ($46))|0;
  $68 = $67&65535;
  $69 = (($$1) + 3)|0;
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + ($64<<1)|0);
  HEAP16[$71>>1] = $68;
  $72 = (($46) - ($43))|0;
  $73 = $72&65535;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + ($69<<1)|0);
  HEAP16[$75>>1] = $73;
 } else {
  $76 = (($$1) + 3)|0;
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + ($64<<1)|0);
  HEAP16[$78>>1] = 0;
  $79 = HEAP32[$0>>2]|0;
  $80 = (($79) + ($76<<1)|0);
  HEAP16[$80>>1] = 0;
 }
 $$2 = (($$1) + 4)|0;
 $81 = (($6) + 1)|0;
 $82 = (__ZNK5Image4colsEv($2)|0);
 $83 = ($81>>>0)<($82>>>0);
 $or$cond5 = $84 & $83;
 if ($or$cond5) {
  $85 = (($5) + -1)|0;
  $86 = (__ZNK5PlaneIsE3getEjj($3,$85,$81)|0);
  $87 = $86&65535;
  $88 = (($43) - ($87))|0;
  $89 = $88&65535;
  $90 = HEAP32[$0>>2]|0;
  $91 = (($90) + ($$2<<1)|0);
  HEAP16[$91>>1] = $89;
 } else {
  $92 = HEAP32[$0>>2]|0;
  $93 = (($92) + ($$2<<1)|0);
  HEAP16[$93>>1] = 0;
 }
 $$3 = (($$1) + 5)|0;
 $94 = ($5>>>0)>(1);
 if ($94) {
  $95 = (($5) + -2)|0;
  $96 = (__ZNK5PlaneIsE3getEjj($3,$95,$6)|0);
  $97 = $96&65535;
  $98 = (($97) - ($43))|0;
  $99 = $98&65535;
  $100 = HEAP32[$0>>2]|0;
  $101 = (($100) + ($$3<<1)|0);
  HEAP16[$101>>1] = $99;
 } else {
  $102 = HEAP32[$0>>2]|0;
  $103 = (($102) + ($$3<<1)|0);
  HEAP16[$103>>1] = 0;
 }
 $$4 = (($$1) + 6)|0;
 $104 = ($6>>>0)>(1);
 if ($104) {
  $105 = (($6) + -2)|0;
  $106 = (__ZNK5PlaneIsE3getEjj($3,$5,$105)|0);
  $107 = $106&65535;
  $108 = (($107) - ($41))|0;
  $109 = $108&65535;
  $110 = HEAP32[$0>>2]|0;
  $111 = (($110) + ($$4<<1)|0);
  HEAP16[$111>>1] = $109;
  $114 = HEAP16[$10>>1]|0;
  STACKTOP = sp;return ($114|0);
 } else {
  $112 = HEAP32[$0>>2]|0;
  $113 = (($112) + ($$4<<1)|0);
  HEAP16[$113>>1] = 0;
  $114 = HEAP16[$10>>1]|0;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==($3|0);
 if ($4) {
  $$0 = $2;
  return ($$0|0);
 }
 $5 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE9find_leafERKNSt3__26vectorIsNS5_9allocatorIsEEEE($0,$1)|0);
 $6 = (__ZN24FinalCompoundSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intER26FinalCompoundSymbolChancesIS0_Li10EEii($0,$5,$2,$3)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE9find_leafERKNSt3__26vectorIsNS5_9allocatorIsEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$03035 = 0, $$03036 = 0, $$1 = 0, $$cast = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $8 = 0, $9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $2 = sp + 60|0;
 $3 = sp;
 $4 = ((($0)) + 16408|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(-1);
 L1: do {
  if ($8) {
   $$03035 = 0;
  } else {
   $9 = HEAP32[$1>>2]|0;
   $$03036 = 0;$11 = $6;$15 = $7;
   while(1) {
    $10 = (((($11) + ($$03036<<4)|0)) + 2|0);
    $12 = HEAP16[$10>>1]|0;
    $13 = ($12<<16>>16)<(0);
    if (!($13)) {
     break;
    }
    $14 = $15 << 24 >> 24;
    $16 = (($9) + ($14<<1)|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = (((($11) + ($$03036<<4)|0)) + 4|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = (((($11) + ($$03036<<4)|0)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $not$ = ($17<<16>>16)<=($19<<16>>16);
    $22 = $not$&1;
    $$ = (($22) + ($21))|0;
    $23 = HEAP32[$4>>2]|0;
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($$<<4)|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ($26<<24>>24)==(-1);
    if ($27) {
     $$03035 = $$;
     break L1;
    } else {
     $$03036 = $$;$11 = $24;$15 = $26;
    }
   }
   $28 = ($12<<16>>16)==(0);
   $29 = (($12) + -1)<<16>>16;
   HEAP16[$10>>1] = $29;
   if ($28) {
    $30 = ((($0)) + 16396|0);
    $31 = HEAP32[$4>>2]|0;
    $32 = HEAP32[$31>>2]|0;
    $33 = (((($32) + ($$03036<<4)|0)) + 12|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$30>>2]|0;
    $36 = (($35) + (($34*60)|0)|0);
    $37 = ((($0)) + 16400|0);
    $38 = HEAP32[$37>>2]|0;
    $$cast = $35;
    $39 = (($38) - ($$cast))|0;
    $40 = (($39|0) / 60)&-1;
    dest=$3; src=$36; stop=dest+60|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    $41 = HEAP32[$37>>2]|0;
    $42 = ((($0)) + 16404|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($30,$3);
    } else {
     __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($2,$30,1);
     $45 = HEAP32[$37>>2]|0;
     dest=$45; src=$3; stop=dest+60|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
     __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($2);
     $46 = HEAP32[$37>>2]|0;
     $47 = ((($46)) + 60|0);
     HEAP32[$37>>2] = $47;
    }
    $48 = HEAP32[$4>>2]|0;
    $49 = HEAP32[$48>>2]|0;
    $50 = (((($49) + ($$03036<<4)|0)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (((($49) + ($51<<4)|0)) + 12|0);
    HEAP32[$52>>2] = $34;
    $53 = HEAP32[$4>>2]|0;
    $54 = HEAP32[$53>>2]|0;
    $55 = (((($54) + ($$03036<<4)|0)) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 1)|0;
    $58 = (((($54) + ($57<<4)|0)) + 12|0);
    HEAP32[$58>>2] = $40;
    $59 = HEAP32[$4>>2]|0;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($$03036<<4)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62 << 24 >> 24;
    $64 = HEAP32[$1>>2]|0;
    $65 = (($64) + ($63<<1)|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = (((($60) + ($$03036<<4)|0)) + 4|0);
    $68 = HEAP16[$67>>1]|0;
    $69 = ($66<<16>>16)>($68<<16>>16);
    $70 = HEAP32[$30>>2]|0;
    $$sink = $69 ? $34 : $40;
    $71 = (($70) + (($$sink*60)|0)|0);
    $$1 = $71;
    STACKTOP = sp;return ($$1|0);
   } else {
    $$03035 = $$03036;
   }
  }
 } while(0);
 $72 = HEAP32[$4>>2]|0;
 $73 = HEAP32[$72>>2]|0;
 $74 = (((($73) + ($$03035<<4)|0)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($0)) + 16396|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + (($75*60)|0)|0);
 $$1 = $78;
 STACKTOP = sp;return ($$1|0);
}
function __ZN24FinalCompoundSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intER26FinalCompoundSymbolChancesIS0_Li10EEii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$0>>2]|0;
 __ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERK20SimpleBitChanceTableRS3_R26FinalCompoundSymbolChancesIS0_Li10EE($4,$5,$6,$1);
 $7 = (__Z6readerILi10E27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEEiRT0_ii($4,$2,$3)|0);
 STACKTOP = sp;return ($7|0);
}
function __ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEC2ERK20SimpleBitChanceTableRS3_R26FinalCompoundSymbolChancesIS0_Li10EE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = $3;
 return;
}
function __Z6readerILi10E27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EEEiRT0_ii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$057 = 0, $$054$off0 = 0, $$055 = 0, $$055$ph = 0, $$056 = 0, $$056$ph = 0, $$057$ph = 0, $$059$lcssa = 0, $$05962 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==($2|0);
 if ($3) {
  $$1 = $1;
  return ($$1|0);
 }
 $4 = (__ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE4readE19SymbolChanceBitTypei($0,0,0)|0);
 if ($4) {
  $$1 = 0;
  return ($$1|0);
 }
 $5 = ($1|0)<(0);
 if ($5) {
  $6 = ($2|0)>(0);
  if ($6) {
   $7 = (__ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE4readE19SymbolChanceBitTypei($0,1,0)|0);
   $$054$off0 = $7;
  } else {
   $$054$off0 = 0;
  }
 } else {
  $$054$off0 = 1;
 }
 $8 = (0 - ($1))|0;
 $9 = $$054$off0 ? $2 : $8;
 $10 = (__ZN6maniac4utilL5ilog2Ej_66($9)|0);
 $11 = (__ZN6maniac4utilL5ilog2Ej_66(1)|0);
 $12 = ($11|0)<($10|0);
 L11: do {
  if ($12) {
   $13 = $$054$off0&1;
   $$05962 = $11;
   while(1) {
    $14 = $$05962 << 1;
    $15 = $14 | $13;
    $16 = (__ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE4readE19SymbolChanceBitTypei($0,2,$15)|0);
    if ($16) {
     $$059$lcssa = $$05962;
     break L11;
    }
    $17 = (($$05962) + 1)|0;
    $18 = ($17|0)<($10|0);
    if ($18) {
     $$05962 = $17;
    } else {
     $$059$lcssa = $17;
     break;
    }
   }
  } else {
   $$059$lcssa = $11;
  }
 } while(0);
 $19 = 1 << $$059$lcssa;
 $20 = (($19) + -1)|0;
 $$055$ph = $$059$lcssa;$$056$ph = $20;$$057$ph = $19;
 L17: while(1) {
  $$055 = $$055$ph;$$056 = $$056$ph;
  while(1) {
   $21 = ($$055|0)>(0);
   if (!($21)) {
    break L17;
   }
   $24 = $$056 >> 1;
   $25 = (($$055) + -1)|0;
   $26 = 1 << $25;
   $27 = $26 | $$057$ph;
   $28 = ($27|0)>($9|0);
   if ($28) {
    $$055 = $25;$$056 = $24;
   } else {
    break;
   }
  }
  $29 = $24 | $$057$ph;
  $30 = ($29|0)>(0);
  if (!($30)) {
   $$055$ph = $25;$$056$ph = $24;$$057$ph = $27;
   continue;
  }
  $31 = (__ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE4readE19SymbolChanceBitTypei($0,3,$25)|0);
  $$$057 = $31 ? $27 : $$057$ph;
  $$055$ph = $25;$$056$ph = $24;$$057$ph = $$$057;
 }
 $22 = (0 - ($$057$ph))|0;
 $23 = $$054$off0 ? $$057$ph : $22;
 $$1 = $23;
 return ($$1|0);
}
function __ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE4readE19SymbolChanceBitTypei($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE3bitE19SymbolChanceBitTypei($4,$1,$2)|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK15SimpleBitChance9get_12bitEv($5)|0);
 $9 = (__ZN8RacInputI11RacConfig248BufferIOE17read_12bit_chanceEt($7,$8)|0);
 __ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13updateChancesE19SymbolChanceBitTypeib($0,$1,$2,$9);
 return ($9|0);
}
function __ZN12SymbolChanceI15SimpleBitChanceLi10EE3bitE19SymbolChanceBitTypei($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 3:  {
  $6 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitMantEi($0,$2)|0);
  $$0 = $6;
  return ($$0|0);
  break;
 }
 case 1:  {
  $4 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitSignEv($0)|0);
  $$0 = $4;
  return ($$0|0);
  break;
 }
 case 2:  {
  $5 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE6bitExpEi($0,$2)|0);
  $$0 = $5;
  return ($$0|0);
  break;
 }
 default: {
  $3 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE7bitZeroEv($0)|0);
  $$0 = $3;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function __ZN27FinalCompoundSymbolBitCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13updateChancesE19SymbolChanceBitTypeib($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN12SymbolChanceI15SimpleBitChanceLi10EE3bitE19SymbolChanceBitTypei($5,$1,$2)|0);
 $7 = HEAP32[$0>>2]|0;
 __ZN15SimpleBitChance3putEbRK20SimpleBitChanceTable($6,$3,$7);
 return;
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 60)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = (($15|0) / 60)&-1;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $16 << 1;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = (($22|0) / 60)&-1;
  __ZNSt3__214__split_bufferI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EERNS_9allocatorIS3_EEEC2EjjS6_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  dest=$25; src=$1; stop=dest+60|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
  $26 = ((($25)) + 60|0);
  HEAP32[$24>>2] = $26;
  __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$2);
  __ZNSt3__214__split_bufferI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EERNS_9allocatorIS3_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EERNS_9allocatorIS3_EEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(71582788);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = ($1*60)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*60)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*60)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (($7|0) / -60)&-1;
 $10 = (($8) + (($9*60)|0)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 60)&-1;
 __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE14__annotate_newEj($0,$25);
 return;
}
function __ZNSt3__214__split_bufferI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EERNS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -60|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = (($8>>>0) / 60)&-1;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + (($10*60)|0)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 60)&-1;
 $6 = (($1) + (($5*60)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 60)&-1;
 $11 = (($1) + (($10*60)|0)|0);
 __ZNKSt3__26vectorI26FinalCompoundSymbolChancesI15SimpleBitChanceLi10EENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($0,$1,$6,$11,$6);
 return;
}
function __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEKS7_EvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPK11ColorRangesRT1_RNSE_IsNSG_IsEEEEiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0156 = 0, $$0157 = 0, $$0158163 = 0, $$0159166 = 0, $$0162 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $exitcond = 0, $exitcond168 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $13 = sp + 2|0;
 $14 = sp;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + (($7*104)|0)|0);
 $17 = (__ZNK5Image4colsEv($16)|0);
 $18 = (((($15) + (($7*104)|0)|0)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(-1);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + (($19*104)|0)|0);
  $23 = (__ZN5Image8getPlaneEi($22,$6)|0);
  $24 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$23,$8,0,$24,1);
  STACKTOP = sp;return;
 }
 $25 = ($7|0)>(0);
 do {
  if ($25) {
   $26 = (((($15) + (($7*104)|0)|0)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($8<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($15) + (($7*104)|0)|0)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($8<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($6|0)<(3);
   $or$cond = $34 & $11;
   if (!($or$cond)) {
    $44 = ($6|0)==(4);
    if ($44) {
     $$0156 = $29;$$0157 = $33;
     break;
    }
    $45 = (($7) + -1)|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = (($46) + (($45*104)|0)|0);
    $48 = (__ZN5Image8getPlaneEi($47,$6)|0);
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$48,$8,0,$29,1);
    $$0156 = $29;$$0157 = $33;
    break;
   }
   $35 = ($29|0)==(0);
   if ($35) {
    $$0156 = 0;$$0157 = $33;
   } else {
    $36 = (($7) + -1)|0;
    $$0159166 = 0;
    while(1) {
     $37 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0159166)|0);
     $38 = ($37<<16>>16)==(0);
     if ($38) {
      $39 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0159166,$9)|0);
      __ZN5PlaneIhE3setEjjs($0,$8,$$0159166,$39);
     } else {
      $40 = HEAP32[$2>>2]|0;
      $41 = (($40) + (($36*104)|0)|0);
      $42 = (__ZNK5ImageclEijj($41,$6,$8,$$0159166)|0);
      __ZN5Image3setEijjs($16,$6,$8,$$0159166,$42);
     }
     $43 = (($$0159166) + 1)|0;
     $exitcond168 = ($43|0)==($29|0);
     if ($exitcond168) {
      $$0156 = $29;$$0157 = $33;
      break;
     } else {
      $$0159166 = $43;
     }
    }
   }
  } else {
   $$0156 = 0;$$0157 = $17;
  }
 } while(0);
 $49 = ($$0156>>>0)<($$0157>>>0);
 if ($49) {
  $50 = ($6|0)<(3);
  $or$cond3 = $50 & $11;
  $51 = ($6|0)<(4);
  $or$cond5 = $51 & $12;
  $52 = ($6|0)==(4);
  $or$cond7 = $52 & $12;
  $53 = $7&65535;
  $$0158163 = $$0156;
  while(1) {
   if ($or$cond3) {
    $54 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0158163)|0);
    $55 = ($54<<16>>16)==(0);
    if ($55) {
     $56 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0158163,$9)|0);
     __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$56);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     if ($or$cond5) {
      $57 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
      $58 = ($57<<16>>16)>(0);
      if ($58) {
       $59 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
       $60 = $59 << 16 >> 16;
       $61 = (($7) - ($60))|0;
       $62 = HEAP32[$2>>2]|0;
       $63 = (($62) + (($61*104)|0)|0);
       $64 = (__ZNK5ImageclEijj($63,$6,$8,$$0158163)|0);
       __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$64);
       break;
      }
     }
     $65 = (__Z37predict_and_calcProps_scanlines_planeI5PlaneIhELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($5,$3,$16,$0,$6,$8,$$0158163,$13,$14,$10)|0);
     if ($or$cond7) {
      $66 = HEAP16[$14>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = ($67|0)>($7|0);
      if ($68) {
       HEAP16[$14>>1] = $53;
      }
     }
     $69 = HEAP16[$13>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = $65 << 16 >> 16;
     $72 = (($70) - ($71))|0;
     $73 = HEAP16[$14>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = (($74) - ($71))|0;
     $76 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$5,$72,$75)|0);
     $77 = (($76) + ($71))|0;
     $78 = $77&65535;
     __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$78);
    }
   } while(0);
   $79 = (($$0158163) + 1)|0;
   $exitcond = ($79|0)==($$0157|0);
   if ($exitcond) {
    break;
   } else {
    $$0158163 = $79;
   }
  }
 }
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $80 = ($6|0)<(3);
 $or$cond9 = $80 & $11;
 if (!($or$cond9)) {
  $93 = ($6|0)==(4);
  if ($93) {
   STACKTOP = sp;return;
  }
  $94 = (($7) + -1)|0;
  $95 = HEAP32[$2>>2]|0;
  $96 = (($95) + (($94*104)|0)|0);
  $97 = (__ZN5Image8getPlaneEi($96,$6)|0);
  $98 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$97,$8,$$0157,$98,1);
  STACKTOP = sp;return;
 }
 $81 = (__ZNK5Image4colsEv($16)|0);
 $82 = ($$0157>>>0)<($81>>>0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = (($7) + -1)|0;
 $$0162 = $$0157;
 while(1) {
  $84 = (__ZNK5PlaneIhE3getEjj($4,$8,$$0162)|0);
  $85 = ($84<<16>>16)==(0);
  if ($85) {
   $86 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0162,$9)|0);
   __ZN5PlaneIhE3setEjjs($0,$8,$$0162,$86);
  } else {
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + (($83*104)|0)|0);
   $89 = (__ZNK5ImageclEijj($88,$6,$8,$$0162)|0);
   __ZN5Image3setEijjs($16,$6,$8,$$0162,$89);
  }
  $90 = (($$0162) + 1)|0;
  $91 = (__ZNK5Image4colsEv($16)|0);
  $92 = ($90>>>0)<($91>>>0);
  if ($92) {
   $$0162 = $90;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03133 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($1)|0);
 if ($9) {
  $10 = ($3>>>0)<($4>>>0);
  if ($10) {
   $$03133 = $3;
  } else {
   return;
  }
  while(1) {
   $11 = (__ZNK13ConstantPlane3getEjj($1,$2,$$03133)|0);
   __ZN5PlaneIhE3setEjjs($0,$2,$$03133,$11);
   $12 = (($$03133) + ($5))|0;
   $13 = ($12>>>0)<($4>>>0);
   if ($13) {
    $$03133 = $12;
   } else {
    break;
   }
  }
  return;
 } else {
  $14 = ($3>>>0)<($4>>>0);
  if ($14) {
   $$034 = $3;
  } else {
   return;
  }
  while(1) {
   $15 = (__ZNK5PlaneIhE3getEjj($1,$2,$$034)|0);
   __ZN5PlaneIhE3setEjjs($0,$2,$$034,$15);
   $16 = (($$034) + ($5))|0;
   $17 = ($16>>>0)<($4>>>0);
   if ($17) {
    $$034 = $16;
   } else {
    break;
   }
  }
  return;
 }
}
function __Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0);
 if ($4) {
  $5 = ($1|0)==(0);
  if ($5) {
   $19 = $3;$21 = $3;$24 = $3;
  } else {
   $9 = (($1) + -1)|0;
   $10 = (__ZNK5PlaneIhE3getEjj($0,$9,$2)|0);
   $11 = (($1) + -1)|0;
   $12 = (__ZNK5PlaneIhE3getEjj($0,$11,$2)|0);
   $19 = $10;$21 = $12;$24 = $12;
  }
 } else {
  $6 = (($2) + -1)|0;
  $7 = (__ZNK5PlaneIhE3getEjj($0,$1,$6)|0);
  $8 = ($1|0)==(0);
  if ($8) {
   $19 = $7;$21 = $7;$24 = $7;
  } else {
   $13 = (($1) + -1)|0;
   $14 = (__ZNK5PlaneIhE3getEjj($0,$13,$2)|0);
   $15 = (($2) + -1)|0;
   $16 = (($1) + -1)|0;
   $17 = (__ZNK5PlaneIhE3getEjj($0,$16,$15)|0);
   $19 = $7;$21 = $14;$24 = $17;
  }
 }
 $18 = $19&65535;
 $20 = $21&65535;
 $22 = (($18) + ($20))|0;
 $23 = $24&65535;
 $25 = (($22) - ($23))|0;
 $26 = $25&65535;
 $27 = (__Z7median3IsET_S0_S0_S0_($26,$19,$21)|0);
 return ($27|0);
}
function __Z37predict_and_calcProps_scanlines_planeI5PlaneIhELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($0,$1,$2,$3,$4,$5,$6,$7,$8,$9) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 var $$ = 0, $$0 = 0, $$0117$lcssa = 0, $$0117129 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond124 = 0, $or$cond5 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $10 = sp;
 $11 = ($4|0)<(3);
 if ($11) {
  $12 = ($4|0)>(0);
  if ($12) {
   $$0117129 = 0;
   while(1) {
    $15 = (__ZNK5ImageclEijj($2,$$0117129,$5,$6)|0);
    $16 = (($$0117129) + 1)|0;
    $17 = HEAP32[$0>>2]|0;
    $18 = (($17) + ($$0117129<<1)|0);
    HEAP16[$18>>1] = $15;
    $exitcond = ($16|0)==($4|0);
    if ($exitcond) {
     $$0117$lcssa = $4;
     break;
    } else {
     $$0117129 = $16;
    }
   }
  } else {
   $$0117$lcssa = 0;
  }
  $13 = (__ZNK5Image9numPlanesEv($2)|0);
  $14 = ($13|0)>(3);
  if ($14) {
   $19 = (($$0117$lcssa) + 1)|0;
   $20 = (__ZNK5ImageclEijj($2,3,$5,$6)|0);
   $21 = HEAP32[$0>>2]|0;
   $22 = (($21) + ($$0117$lcssa<<1)|0);
   HEAP16[$22>>1] = $20;
   $$1 = $19;
  } else {
   $$1 = $$0117$lcssa;
  }
 } else {
  $$1 = 0;
 }
 $23 = ($6|0)==(0);
 if ($23) {
  $24 = ($5|0)==(0);
  if ($24) {
   $37 = $9;$38 = $9;$39 = 0;
   label = 12;
  } else {
   $25 = (($5) + -1)|0;
   $26 = (__ZNK5PlaneIhE3getEjj($3,$25,$6)|0);
   $27 = (($5) + -1)|0;
   $28 = (__ZNK5PlaneIhE3getEjj($3,$27,$6)|0);
   $37 = $26;$38 = $28;$39 = 1;
   label = 12;
  }
 } else {
  $29 = (($6) + -1)|0;
  $30 = (__ZNK5PlaneIhE3getEjj($3,$5,$29)|0);
  $31 = ($5|0)==(0);
  if ($31) {
   $37 = $30;$38 = $30;$39 = 0;
   label = 12;
  } else {
   $32 = (($5) + -1)|0;
   $33 = (__ZNK5PlaneIhE3getEjj($3,$32,$6)|0);
   $34 = (($5) + -1)|0;
   $35 = (($6) + -1)|0;
   $36 = (__ZNK5PlaneIhE3getEjj($3,$34,$35)|0);
   $42 = $30;$44 = $33;$47 = $36;$84 = 1;$or$cond124 = 1;
  }
 }
 if ((label|0) == 12) {
  $40 = $39 ? $38 : $37;
  $42 = $37;$44 = $38;$47 = $40;$84 = $39;$or$cond124 = 0;
 }
 $41 = $42 << 16 >> 16;
 $43 = $44 << 16 >> 16;
 $45 = (($41) + ($43))|0;
 $46 = $47 << 16 >> 16;
 $48 = (($45) - ($46))|0;
 $49 = $48&65535;
 $50 = (__Z7median3IsET_S0_S0_S0_($49,$42,$44)|0);
 HEAP16[$10>>1] = $50;
 $51 = HEAP32[$1>>2]|0;
 $52 = ((($51)) + 24|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_viiiiii[$53 & 15]($1,$4,$0,$7,$8,$10);
 $54 = HEAP16[$10>>1]|0;
 $55 = $54 << 16 >> 16;
 $sext = $48 << 16;
 $56 = $sext >> 16;
 $57 = ($55|0)==($56|0);
 if ($57) {
  $$0 = 0;
 } else {
  $58 = ($54<<16>>16)==($42<<16>>16);
  if ($58) {
   $$0 = 1;
  } else {
   $59 = ($54<<16>>16)==($44<<16>>16);
   $$ = $59 ? 2 : 0;
   $$0 = $$;
  }
 }
 $60 = HEAP16[$10>>1]|0;
 $61 = (($$1) + 1)|0;
 $62 = HEAP32[$0>>2]|0;
 $63 = (($62) + ($$1<<1)|0);
 HEAP16[$63>>1] = $60;
 $64 = (($$1) + 2)|0;
 $65 = HEAP32[$0>>2]|0;
 $66 = (($65) + ($61<<1)|0);
 HEAP16[$66>>1] = $$0;
 if ($or$cond124) {
  $67 = (($41) - ($46))|0;
  $68 = $67&65535;
  $69 = (($$1) + 3)|0;
  $70 = HEAP32[$0>>2]|0;
  $71 = (($70) + ($64<<1)|0);
  HEAP16[$71>>1] = $68;
  $72 = (($46) - ($43))|0;
  $73 = $72&65535;
  $74 = HEAP32[$0>>2]|0;
  $75 = (($74) + ($69<<1)|0);
  HEAP16[$75>>1] = $73;
 } else {
  $76 = (($$1) + 3)|0;
  $77 = HEAP32[$0>>2]|0;
  $78 = (($77) + ($64<<1)|0);
  HEAP16[$78>>1] = 0;
  $79 = HEAP32[$0>>2]|0;
  $80 = (($79) + ($76<<1)|0);
  HEAP16[$80>>1] = 0;
 }
 $$2 = (($$1) + 4)|0;
 $81 = (($6) + 1)|0;
 $82 = (__ZNK5Image4colsEv($2)|0);
 $83 = ($81>>>0)<($82>>>0);
 $or$cond5 = $84 & $83;
 if ($or$cond5) {
  $85 = (($5) + -1)|0;
  $86 = (__ZNK5PlaneIhE3getEjj($3,$85,$81)|0);
  $87 = $86&65535;
  $88 = (($43) - ($87))|0;
  $89 = $88&65535;
  $90 = HEAP32[$0>>2]|0;
  $91 = (($90) + ($$2<<1)|0);
  HEAP16[$91>>1] = $89;
 } else {
  $92 = HEAP32[$0>>2]|0;
  $93 = (($92) + ($$2<<1)|0);
  HEAP16[$93>>1] = 0;
 }
 $$3 = (($$1) + 5)|0;
 $94 = ($5>>>0)>(1);
 if ($94) {
  $95 = (($5) + -2)|0;
  $96 = (__ZNK5PlaneIhE3getEjj($3,$95,$6)|0);
  $97 = $96&65535;
  $98 = (($97) - ($43))|0;
  $99 = $98&65535;
  $100 = HEAP32[$0>>2]|0;
  $101 = (($100) + ($$3<<1)|0);
  HEAP16[$101>>1] = $99;
 } else {
  $102 = HEAP32[$0>>2]|0;
  $103 = (($102) + ($$3<<1)|0);
  HEAP16[$103>>1] = 0;
 }
 $$4 = (($$1) + 6)|0;
 $104 = ($6>>>0)>(1);
 if ($104) {
  $105 = (($6) + -2)|0;
  $106 = (__ZNK5PlaneIhE3getEjj($3,$5,$105)|0);
  $107 = $106&65535;
  $108 = (($107) - ($41))|0;
  $109 = $108&65535;
  $110 = HEAP32[$0>>2]|0;
  $111 = (($110) + ($$4<<1)|0);
  HEAP16[$111>>1] = $109;
  $114 = HEAP16[$10>>1]|0;
  STACKTOP = sp;return ($114|0);
 } else {
  $112 = HEAP32[$0>>2]|0;
  $113 = (($112) + ($$4<<1)|0);
  HEAP16[$113>>1] = 0;
  $114 = HEAP16[$10>>1]|0;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function __ZN12PlaneVisitorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneE5visitER5PlaneIhE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 36|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ((($0)) + 38|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ((($0)) + 40|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ((($0)) + 41|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEK13ConstantPlaneEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($1,$3,$5,$7,$9,$11,$13,$15,$17,$19,$21,$24,$27);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneE5visitER5PlaneIsE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($0)) + 36|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = ((($0)) + 38|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ((($0)) + 40|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ((($0)) + 41|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)!=(0);
 __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsEK13ConstantPlaneEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($1,$3,$5,$7,$9,$11,$13,$15,$17,$19,$21,$24,$27);
 return;
}
function __ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsEK13ConstantPlaneEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0156 = 0, $$0157 = 0, $$0158163 = 0, $$0159166 = 0, $$0162 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $exitcond = 0, $exitcond168 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $13 = sp + 2|0;
 $14 = sp;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + (($7*104)|0)|0);
 $17 = (__ZNK5Image4colsEv($16)|0);
 $18 = (((($15) + (($7*104)|0)|0)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(-1);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + (($19*104)|0)|0);
  $23 = (__ZN5Image8getPlaneEi($22,$6)|0);
  $24 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$23,$8,0,$24,1);
  STACKTOP = sp;return;
 }
 $25 = ($7|0)>(0);
 do {
  if ($25) {
   $26 = (((($15) + (($7*104)|0)|0)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($8<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($15) + (($7*104)|0)|0)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($8<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($6|0)<(3);
   $or$cond = $34 & $11;
   if (!($or$cond)) {
    $44 = ($6|0)==(4);
    if ($44) {
     $$0156 = $29;$$0157 = $33;
     break;
    }
    $45 = (($7) + -1)|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = (($46) + (($45*104)|0)|0);
    $48 = (__ZN5Image8getPlaneEi($47,$6)|0);
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$48,$8,0,$29,1);
    $$0156 = $29;$$0157 = $33;
    break;
   }
   $35 = ($29|0)==(0);
   if ($35) {
    $$0156 = 0;$$0157 = $33;
   } else {
    $36 = (($7) + -1)|0;
    $$0159166 = 0;
    while(1) {
     $37 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0159166)|0);
     $38 = ($37<<16>>16)==(0);
     if ($38) {
      $39 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0159166,$9)|0);
      __ZN5PlaneIsE3setEjjs($0,$8,$$0159166,$39);
     } else {
      $40 = HEAP32[$2>>2]|0;
      $41 = (($40) + (($36*104)|0)|0);
      $42 = (__ZNK5ImageclEijj($41,$6,$8,$$0159166)|0);
      __ZN5Image3setEijjs($16,$6,$8,$$0159166,$42);
     }
     $43 = (($$0159166) + 1)|0;
     $exitcond168 = ($43|0)==($29|0);
     if ($exitcond168) {
      $$0156 = $29;$$0157 = $33;
      break;
     } else {
      $$0159166 = $43;
     }
    }
   }
  } else {
   $$0156 = 0;$$0157 = $17;
  }
 } while(0);
 $49 = ($$0156>>>0)<($$0157>>>0);
 if ($49) {
  $50 = ($6|0)<(3);
  $or$cond3 = $50 & $11;
  $51 = ($6|0)<(4);
  $or$cond5 = $51 & $12;
  $52 = ($6|0)==(4);
  $or$cond7 = $52 & $12;
  $53 = $7&65535;
  $$0158163 = $$0156;
  while(1) {
   if ($or$cond3) {
    $54 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0158163)|0);
    $55 = ($54<<16>>16)==(0);
    if ($55) {
     $56 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0158163,$9)|0);
     __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$56);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     if ($or$cond5) {
      $57 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
      $58 = ($57<<16>>16)>(0);
      if ($58) {
       $59 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
       $60 = $59 << 16 >> 16;
       $61 = (($7) - ($60))|0;
       $62 = HEAP32[$2>>2]|0;
       $63 = (($62) + (($61*104)|0)|0);
       $64 = (__ZNK5ImageclEijj($63,$6,$8,$$0158163)|0);
       __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$64);
       break;
      }
     }
     $65 = (__Z37predict_and_calcProps_scanlines_planeI5PlaneIsELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($5,$3,$16,$0,$6,$8,$$0158163,$13,$14,$10)|0);
     if ($or$cond7) {
      $66 = HEAP16[$14>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = ($67|0)>($7|0);
      if ($68) {
       HEAP16[$14>>1] = $53;
      }
     }
     $69 = HEAP16[$13>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = $65 << 16 >> 16;
     $72 = (($70) - ($71))|0;
     $73 = HEAP16[$14>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = (($74) - ($71))|0;
     $76 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$5,$72,$75)|0);
     $77 = (($76) + ($71))|0;
     $78 = $77&65535;
     __ZN5PlaneIsE3setEjjs($0,$8,$$0158163,$78);
    }
   } while(0);
   $79 = (($$0158163) + 1)|0;
   $exitcond = ($79|0)==($$0157|0);
   if ($exitcond) {
    break;
   } else {
    $$0158163 = $79;
   }
  }
 }
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $80 = ($6|0)<(3);
 $or$cond9 = $80 & $11;
 if (!($or$cond9)) {
  $93 = ($6|0)==(4);
  if ($93) {
   STACKTOP = sp;return;
  }
  $94 = (($7) + -1)|0;
  $95 = HEAP32[$2>>2]|0;
  $96 = (($95) + (($94*104)|0)|0);
  $97 = (__ZN5Image8getPlaneEi($96,$6)|0);
  $98 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$97,$8,$$0157,$98,1);
  STACKTOP = sp;return;
 }
 $81 = (__ZNK5Image4colsEv($16)|0);
 $82 = ($$0157>>>0)<($81>>>0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = (($7) + -1)|0;
 $$0162 = $$0157;
 while(1) {
  $84 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0162)|0);
  $85 = ($84<<16>>16)==(0);
  if ($85) {
   $86 = (__Z22predictScanlines_planeI5PlaneIsEEsRKT_jjs($0,$8,$$0162,$9)|0);
   __ZN5PlaneIsE3setEjjs($0,$8,$$0162,$86);
  } else {
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + (($83*104)|0)|0);
   $89 = (__ZNK5ImageclEijj($88,$6,$8,$$0162)|0);
   __ZN5Image3setEijjs($16,$6,$8,$$0162,$89);
  }
  $90 = (($$0162) + 1)|0;
  $91 = (__ZNK5Image4colsEv($16)|0);
  $92 = ($90>>>0)<($91>>>0);
  if ($92) {
   $$0162 = $90;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z26flif_decode_scanline_planeI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEK13ConstantPlaneEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPK11ColorRangesRT1_RNSF_IsNSH_IsEEEEiijssbb($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $$0156 = 0, $$0157 = 0, $$0158163 = 0, $$0159166 = 0, $$0162 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $exitcond = 0, $exitcond168 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $13 = sp + 2|0;
 $14 = sp;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($15) + (($7*104)|0)|0);
 $17 = (__ZNK5Image4colsEv($16)|0);
 $18 = (((($15) + (($7*104)|0)|0)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(-1);
 if ($20) {
  $21 = HEAP32[$2>>2]|0;
  $22 = (($21) + (($19*104)|0)|0);
  $23 = (__ZN5Image8getPlaneEi($22,$6)|0);
  $24 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$23,$8,0,$24,1);
  STACKTOP = sp;return;
 }
 $25 = ($7|0)>(0);
 do {
  if ($25) {
   $26 = (((($15) + (($7*104)|0)|0)) + 60|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + ($8<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($15) + (($7*104)|0)|0)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + ($8<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($6|0)<(3);
   $or$cond = $34 & $11;
   if (!($or$cond)) {
    $44 = ($6|0)==(4);
    if ($44) {
     $$0156 = $29;$$0157 = $33;
     break;
    }
    $45 = (($7) + -1)|0;
    $46 = HEAP32[$2>>2]|0;
    $47 = (($46) + (($45*104)|0)|0);
    $48 = (__ZN5Image8getPlaneEi($47,$6)|0);
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$48,$8,0,$29,1);
    $$0156 = $29;$$0157 = $33;
    break;
   }
   $35 = ($29|0)==(0);
   if ($35) {
    $$0156 = 0;$$0157 = $33;
   } else {
    $36 = (($7) + -1)|0;
    $$0159166 = 0;
    while(1) {
     $37 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0159166)|0);
     $38 = ($37<<16>>16)==(0);
     if ($38) {
      $39 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0159166,$9)|0);
      __ZN5PlaneIhE3setEjjs($0,$8,$$0159166,$39);
     } else {
      $40 = HEAP32[$2>>2]|0;
      $41 = (($40) + (($36*104)|0)|0);
      $42 = (__ZNK5ImageclEijj($41,$6,$8,$$0159166)|0);
      __ZN5Image3setEijjs($16,$6,$8,$$0159166,$42);
     }
     $43 = (($$0159166) + 1)|0;
     $exitcond168 = ($43|0)==($29|0);
     if ($exitcond168) {
      $$0156 = $29;$$0157 = $33;
      break;
     } else {
      $$0159166 = $43;
     }
    }
   }
  } else {
   $$0156 = 0;$$0157 = $17;
  }
 } while(0);
 $49 = ($$0156>>>0)<($$0157>>>0);
 if ($49) {
  $50 = ($6|0)<(3);
  $or$cond3 = $50 & $11;
  $51 = ($6|0)<(4);
  $or$cond5 = $51 & $12;
  $52 = ($6|0)==(4);
  $or$cond7 = $52 & $12;
  $53 = $7&65535;
  $$0158163 = $$0156;
  while(1) {
   if ($or$cond3) {
    $54 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0158163)|0);
    $55 = ($54<<16>>16)==(0);
    if ($55) {
     $56 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0158163,$9)|0);
     __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$56);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   do {
    if ((label|0) == 19) {
     label = 0;
     if ($or$cond5) {
      $57 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
      $58 = ($57<<16>>16)>(0);
      if ($58) {
       $59 = (__ZN5Image6getFRAEjj($16,$8,$$0158163)|0);
       $60 = $59 << 16 >> 16;
       $61 = (($7) - ($60))|0;
       $62 = HEAP32[$2>>2]|0;
       $63 = (($62) + (($61*104)|0)|0);
       $64 = (__ZNK5ImageclEijj($63,$6,$8,$$0158163)|0);
       __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$64);
       break;
      }
     }
     $65 = (__Z37predict_and_calcProps_scanlines_planeI5PlaneIhELb0EEsRNSt3__26vectorIsNS2_9allocatorIsEEEEPK11ColorRangesRK5ImageRKT_ijjRsSH_s($5,$3,$16,$0,$6,$8,$$0158163,$13,$14,$10)|0);
     if ($or$cond7) {
      $66 = HEAP16[$14>>1]|0;
      $67 = $66 << 16 >> 16;
      $68 = ($67|0)>($7|0);
      if ($68) {
       HEAP16[$14>>1] = $53;
      }
     }
     $69 = HEAP16[$13>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = $65 << 16 >> 16;
     $72 = (($70) - ($71))|0;
     $73 = HEAP16[$14>>1]|0;
     $74 = $73 << 16 >> 16;
     $75 = (($74) - ($71))|0;
     $76 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$5,$72,$75)|0);
     $77 = (($76) + ($71))|0;
     $78 = $77&65535;
     __ZN5PlaneIhE3setEjjs($0,$8,$$0158163,$78);
    }
   } while(0);
   $79 = (($$0158163) + 1)|0;
   $exitcond = ($79|0)==($$0157|0);
   if ($exitcond) {
    break;
   } else {
    $$0158163 = $79;
   }
  }
 }
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $80 = ($6|0)<(3);
 $or$cond9 = $80 & $11;
 if (!($or$cond9)) {
  $93 = ($6|0)==(4);
  if ($93) {
   STACKTOP = sp;return;
  }
  $94 = (($7) + -1)|0;
  $95 = HEAP32[$2>>2]|0;
  $96 = (($95) + (($94*104)|0)|0);
  $97 = (__ZN5Image8getPlaneEi($96,$6)|0);
  $98 = (__ZNK5Image4colsEv($16)|0);
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$97,$8,$$0157,$98,1);
  STACKTOP = sp;return;
 }
 $81 = (__ZNK5Image4colsEv($16)|0);
 $82 = ($$0157>>>0)<($81>>>0);
 if (!($82)) {
  STACKTOP = sp;return;
 }
 $83 = (($7) + -1)|0;
 $$0162 = $$0157;
 while(1) {
  $84 = (__ZNK13ConstantPlane3getEjj($4,$8,$$0162)|0);
  $85 = ($84<<16>>16)==(0);
  if ($85) {
   $86 = (__Z22predictScanlines_planeI5PlaneIhEEsRKT_jjs($0,$8,$$0162,$9)|0);
   __ZN5PlaneIhE3setEjjs($0,$8,$$0162,$86);
  } else {
   $87 = HEAP32[$2>>2]|0;
   $88 = (($87) + (($83*104)|0)|0);
   $89 = (__ZNK5ImageclEijj($88,$6,$8,$$0162)|0);
   __ZN5Image3setEijjs($16,$6,$8,$$0162,$89);
  }
  $90 = (($$0162) + 1)|0;
  $91 = (__ZNK5Image4colsEv($16)|0);
  $92 = ($90>>>0)<($91>>>0);
  if ($92) {
   $$0162 = $90;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEEC2ERS3_RKNSt3__26vectorINS6_4pairIssEENS6_9allocatorIS9_EEEEii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16512|0;
 $5 = sp;
 __ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EEC2ERS3_ii($5,$1,$3,$4);
 __ZNSt3__26vectorI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEEC2EjRKS6_($0,3,$5);
 $6 = ((($0)) + 12|0);
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEC2ERKS5_($6,$2);
 $7 = ((($0)) + 24|0);
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = (($9) - ($10))|0;
 $12 = $11 >> 2;
 HEAP32[$7>>2] = $12;
 STACKTOP = sp;return;
}
function __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE9read_treeER4Tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08 = 0, $$cast = 0, $$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $2 = sp + 36|0;
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $5 = ((($0)) + 12|0);
 __ZNSt3__26vectorINS_4pairIssEENS_9allocatorIS2_EEEC2ERKS5_($3,$5);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $$cast$i = $8;
 $$cast = $7;
 $11 = ($$cast|0)==($$cast$i|0);
 if (!($11)) {
  $scevgep$i$i$i = ((($$cast)) + -16|0);
  $12 = $scevgep$i$i$i;
  $13 = (($12) - ($8))|0;
  $14 = $13 >>> 4;
  $15 = $14 ^ -1;
  $scevgep4$i$i$i = (($$cast) + ($15<<4)|0);
  HEAP32[$6>>2] = $scevgep4$i$i$i;
 }
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE17__annotate_shrinkEj($1,$10);
 __ZN20PropertyDecisionNodeC2Eiii($4,-1,0,0);
 $16 = HEAP32[$6>>2]|0;
 $17 = ((($1)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)<($18>>>0);
 if ($19) {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($2,$1,1);
  $20 = HEAP32[$6>>2]|0;
  ;HEAP32[$20>>2]=HEAP32[$4>>2]|0;HEAP32[$20+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$20+12>>2]=HEAP32[$4+12>>2]|0;
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $21 = HEAP32[$6>>2]|0;
  $22 = ((($21)) + 16|0);
  HEAP32[$6>>2] = $22;
 } else {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($1,$4);
 }
 $23 = (__ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE12read_subtreeEiRNSt3__26vectorINS5_4pairIssEENS5_9allocatorIS8_EEEER4Tree($0,0,$3,$1)|0);
 if (!($23)) {
  $$08 = 0;
  __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($3);
  STACKTOP = sp;return ($$08|0);
 }
 $24 = HEAP32[$6>>2]|0;
 $25 = HEAP32[$1>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 4;
 HEAP32[$vararg_buffer>>2] = $27;
 __Z8v_printfiPKcz(6,7513,$vararg_buffer);
 $$08 = 1;
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP = sp;return ($$08|0);
}
function __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZNSt3__213__vector_baseINS_4pairIssEENS_9allocatorIS2_EEED2Ev($1);
 __ZNSt3__213__vector_baseI17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EENS_9allocatorIS6_EEED2Ev($0);
 return;
}
function __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 4;
 $7 = (($2) + ($6<<4)|0);
 $8 = (($2) + ($1<<4)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = $11 >> 4;
 $13 = (($2) + ($12<<4)|0);
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$8,$13);
 return;
}
function __ZN20PropertyDecisionNodeC2Eiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $1&255;
 HEAP8[$0>>0] = $4;
 $5 = ((($0)) + 2|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 4|0);
 $7 = $2&65535;
 HEAP16[$6>>1] = $7;
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $3;
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = 0;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $11 = ($10>>>0)<($9>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (($13) - ($14))|0;
  $16 = $15 >> 4;
  $17 = $10 >>> 1;
  $18 = ($16>>>0)<($17>>>0);
  $19 = $15 >> 3;
  $20 = ($19>>>0)<($9>>>0);
  $$sroa$speculated$i = $20 ? $9 : $19;
  $$0$i = $18 ? $$sroa$speculated$i : $10;
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) - ($14))|0;
  $23 = $22 >> 4;
  __ZNSt3__214__split_bufferI20PropertyDecisionNodeRNS_9allocatorIS1_EEEC2EjjS4_($2,$$0$i,$23,$3);
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  ;HEAP32[$25>>2]=HEAP32[$1>>2]|0;HEAP32[$25+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$25+12>>2]=HEAP32[$1+12>>2]|0;
  $26 = HEAP32[$24>>2]|0;
  $27 = ((($26)) + 16|0);
  HEAP32[$24>>2] = $27;
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$2);
  __ZNSt3__214__split_bufferI20PropertyDecisionNodeRNS_9allocatorIS1_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE12read_subtreeEiRNSt3__26vectorINS5_4pairIssEENS5_9allocatorIS8_EEEER4Tree($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $sext51 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $4 = sp + 24|0;
 $5 = sp + 8|0;
 $6 = HEAP32[$3>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($7,0,$9)|0);
 $11 = (($10) + 255)|0;
 $12 = $11&255;
 $13 = (($6) + ($1<<4)|0);
 HEAP8[$13>>0] = $12;
 $sext = $11 << 24;
 $14 = $sext >> 24;
 $15 = ($14|0)==(-1);
 if ($15) {
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + ($14<<2)|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (((($16) + ($14<<2)|0)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = ($18<<16>>16)<($20<<16>>16);
 if (!($21)) {
  __Z8e_printfPKcz(7552,$vararg_buffer);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $22 = $20 << 16 >> 16;
 $23 = $18 << 16 >> 16;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 16500|0);
 $26 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($25,1,512)|0);
 $27 = $26&65535;
 $28 = (((($6) + ($1<<4)|0)) + 2|0);
 HEAP16[$28>>1] = $27;
 $29 = HEAP32[$0>>2]|0;
 $30 = ((($29)) + 33000|0);
 $31 = (($22) + -1)|0;
 $32 = (__ZN17SimpleSymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi18EE9read_int2Eii($30,$23,$31)|0);
 $33 = $32&65535;
 $34 = (((($6) + ($1<<4)|0)) + 4|0);
 HEAP16[$34>>1] = $33;
 $sext51 = $32 << 16;
 $35 = $sext51 >> 16;
 $36 = ((($3)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$3>>2]|0;
 $39 = (($37) - ($38))|0;
 $40 = $39 >> 4;
 $41 = (((($6) + ($1<<4)|0)) + 8|0);
 HEAP32[$41>>2] = $40;
 __ZN20PropertyDecisionNodeC2Eiii($5,-1,0,0);
 $42 = HEAP32[$36>>2]|0;
 $43 = ((($3)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($42>>>0)<($44>>>0);
 if ($45) {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$3,1);
  $46 = HEAP32[$36>>2]|0;
  ;HEAP32[$46>>2]=HEAP32[$5>>2]|0;HEAP32[$46+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$5+12>>2]|0;
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
  $47 = HEAP32[$36>>2]|0;
  $48 = ((($47)) + 16|0);
  HEAP32[$36>>2] = $48;
 } else {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($3,$5);
 }
 __ZN20PropertyDecisionNodeC2Eiii($5,-1,0,0);
 $49 = HEAP32[$36>>2]|0;
 $50 = HEAP32[$43>>2]|0;
 $51 = ($49>>>0)<($50>>>0);
 if ($51) {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$3,1);
  $52 = HEAP32[$36>>2]|0;
  ;HEAP32[$52>>2]=HEAP32[$5>>2]|0;HEAP32[$52+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$52+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$52+12>>2]=HEAP32[$5+12>>2]|0;
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
  $53 = HEAP32[$36>>2]|0;
  $54 = ((($53)) + 16|0);
  HEAP32[$36>>2] = $54;
 } else {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_($3,$5);
 }
 $55 = (($35) + 1)|0;
 $56 = $55&65535;
 $57 = HEAP32[$2>>2]|0;
 $58 = (($57) + ($14<<2)|0);
 HEAP16[$58>>1] = $56;
 $59 = (__ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE12read_subtreeEiRNSt3__26vectorINS5_4pairIssEENS5_9allocatorIS8_EEEER4Tree($0,$40,$2,$3)|0);
 if (!($59)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $60 = HEAP32[$2>>2]|0;
 $61 = (($60) + ($14<<2)|0);
 HEAP16[$61>>1] = $18;
 $62 = $35&65535;
 $63 = HEAP32[$2>>2]|0;
 $64 = (((($63) + ($14<<2)|0)) + 2|0);
 HEAP16[$64>>1] = $62;
 $65 = (($40) + 1)|0;
 $66 = (__ZN23MetaPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOEE12read_subtreeEiRNSt3__26vectorINS5_4pairIssEENS5_9allocatorIS8_EEEER4Tree($0,$65,$2,$3)|0);
 if (!($66)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $67 = HEAP32[$2>>2]|0;
 $68 = (((($67) + ($14<<2)|0)) + 2|0);
 HEAP16[$68>>1] = $20;
 $$2 = 1;
 STACKTOP = sp;return ($$2|0);
}
function __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 268435455;
}
function __ZNSt3__214__split_bufferI20PropertyDecisionNodeRNS_9allocatorIS1_EEEC2EjjS4_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(268435455);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 4;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<4)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<4)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 4;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<4)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 4;
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferI20PropertyDecisionNodeRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -16|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 4;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<4)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 4;
 $6 = (($1) + ($5<<4)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 4;
 $11 = (($1) + ($10<<4)|0);
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 4;
 $7 = (($2) + ($6<<4)|0);
 $8 = (($2) + ($1<<4)|0);
 __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Z7predictRK5Imageiijji($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($2|0)==(4);
 if ($6) {
  $$014 = 0;
  return ($$014|0);
 }
 $7 = $1 & 1;
 $8 = ($7|0)==(0);
 $9 = (__ZNK5Image8getPlaneEi($0,$2)|0);
 if ($8) {
  $10 = (__ZNK5Image4rowsEi($0,$1)|0);
  $11 = (__Z24predict_plane_horizontalI12GeneralPlaneEsRKT_iijjji($9,$1,$2,$3,$4,$10,$5)|0);
  $$014 = $11;
  return ($$014|0);
 } else {
  $12 = (__ZNK5Image4colsEi($0,$1)|0);
  $13 = (__Z22predict_plane_verticalI12GeneralPlaneEsRKT_iijjji($9,$1,$2,$3,$4,$12,$5)|0);
  $$014 = $13;
  return ($$014|0);
 }
 return (0)|0;
}
function __ZN5Image3setEiijjs($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (($0) + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_viiiii[$10 & 31]($7,$2,$3,$4,$5);
 return;
}
function __Z24predict_plane_horizontalI12GeneralPlaneEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + -1)|0;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 7]($0,$1,$11,$4)|0);
 $13 = (($3) + 1)|0;
 $14 = ($13>>>0)<($5>>>0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iiiii[$17 & 7]($0,$1,$13,$4)|0);
  $21 = $18;
 } else {
  $21 = $12;
 }
 switch ($6|0) {
 case 0:  {
  $19 = $12 << 16 >> 16;
  $20 = $21 << 16 >> 16;
  $22 = (($20) + ($19))|0;
  $23 = $22 >>> 1;
  $24 = $23&65535;
  $$1 = $24;
  return ($$1|0);
  break;
 }
 case 1:  {
  $25 = $12 << 16 >> 16;
  $26 = $21 << 16 >> 16;
  $27 = (($26) + ($25))|0;
  $28 = $27 >>> 1;
  $29 = $28&65535;
  $30 = ($4|0)!=(0);
  if ($30) {
   $31 = (($4) + -1)|0;
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiiii[$34 & 7]($0,$1,$3,$31)|0);
   $36 = (($4) + -1)|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 40|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iiiii[$39 & 7]($0,$1,$11,$36)|0);
   $brmerge$demorgan = $30 & $14;
   if ($brmerge$demorgan) {
    $41 = HEAP32[$0>>2]|0;
    $42 = ((($41)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiiii[$43 & 7]($0,$1,$13,$31)|0);
    $46 = $35;$48 = $40;$54 = $44;
   } else {
    $46 = $35;$48 = $40;$54 = $35;
   }
  } else {
   $46 = $12;$48 = $12;$54 = $12;
  }
  $45 = $46 << 16 >> 16;
  $47 = $48&65535;
  $49 = (($25) - ($47))|0;
  $50 = (($49) + ($45))|0;
  $51 = $50&65535;
  $52 = (($45) + ($26))|0;
  $53 = $54&65535;
  $55 = (($52) - ($53))|0;
  $56 = $55&65535;
  $57 = (__Z7median3IsET_S0_S0_S0_($29,$51,$56)|0);
  $$1 = $57;
  return ($$1|0);
  break;
 }
 default: {
  $58 = ($4|0)==(0);
  if ($58) {
   $64 = $12;
  } else {
   $59 = (($4) + -1)|0;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 40|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iiiii[$62 & 7]($0,$1,$3,$59)|0);
   $64 = $63;
  }
  $65 = (__Z7median3IsET_S0_S0_S0_($12,$21,$64)|0);
  $$1 = $65;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __Z22predict_plane_verticalI12GeneralPlaneEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ((($8)) + 40|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($4) + -1)|0;
 $12 = (FUNCTION_TABLE_iiiii[$10 & 7]($0,$1,$3,$11)|0);
 $13 = (($4) + 1)|0;
 $14 = ($13>>>0)<($5>>>0);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = ((($15)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iiiii[$17 & 7]($0,$1,$3,$13)|0);
  $21 = $18;
 } else {
  $21 = $12;
 }
 switch ($6|0) {
 case 0:  {
  $19 = $12 << 16 >> 16;
  $20 = $21 << 16 >> 16;
  $22 = (($20) + ($19))|0;
  $23 = $22 >>> 1;
  $24 = $23&65535;
  $$1 = $24;
  return ($$1|0);
  break;
 }
 case 1:  {
  $25 = $12 << 16 >> 16;
  $26 = $21 << 16 >> 16;
  $27 = (($26) + ($25))|0;
  $28 = $27 >>> 1;
  $29 = $28&65535;
  $30 = ($3|0)!=(0);
  if ($30) {
   $31 = (($3) + -1)|0;
   $32 = HEAP32[$0>>2]|0;
   $33 = ((($32)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_iiiii[$34 & 7]($0,$1,$31,$4)|0);
   $36 = (($3) + -1)|0;
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($37)) + 40|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iiiii[$39 & 7]($0,$1,$36,$11)|0);
   $brmerge$demorgan = $30 & $14;
   if ($brmerge$demorgan) {
    $41 = HEAP32[$0>>2]|0;
    $42 = ((($41)) + 40|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiiii[$43 & 7]($0,$1,$31,$13)|0);
    $46 = $35;$48 = $40;$54 = $44;
   } else {
    $46 = $35;$48 = $40;$54 = $35;
   }
  } else {
   $46 = $12;$48 = $12;$54 = $12;
  }
  $45 = $46 << 16 >> 16;
  $47 = $48&65535;
  $49 = (($25) - ($47))|0;
  $50 = (($49) + ($45))|0;
  $51 = $50&65535;
  $52 = (($45) + ($26))|0;
  $53 = $54&65535;
  $55 = (($52) - ($53))|0;
  $56 = $55&65535;
  $57 = (__Z7median3IsET_S0_S0_S0_($29,$51,$56)|0);
  $$1 = $57;
  return ($$1|0);
  break;
 }
 default: {
  $58 = ($3|0)==(0);
  if ($58) {
   $64 = $12;
  } else {
   $59 = (($3) + -1)|0;
   $60 = HEAP32[$0>>2]|0;
   $61 = ((($60)) + 40|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (FUNCTION_TABLE_iiiii[$62 & 7]($0,$1,$59,$4)|0);
   $64 = $63;
  }
  $65 = (__Z7median3IsET_S0_S0_S0_($64,$12,$21)|0);
  $$1 = $65;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __Z23flif_decode_FLIF2_innerI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE11ColorRangesEbRT_RT0_RNSt3__26vectorIT1_NSB_9allocatorISD_EEEERNSC_I5ImageNSE_ISI_EEEEPKT2_iiR12flif_optionsRNSC_IP9TransformIS7_ENSE_IST_EEEEPFjixESL_($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$0267431 = 0, $$0268 = 0, $$0274443 = 0, $$0275 = 0, $$0282 = 0, $$0283 = 0, $$0438 = 0, $$0439 = 0, $$1269 = 0, $$3271 = 0, $$5281 = 0, $$old = 0, $$old284 = 0, $$sroa$0289$0434 = 0, $$sroa$0297$0428 = 0, $$sroa$0305$0425 = 0, $$sroa$0313$0424 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond285 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer19 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer5 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0;
 var $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 296|0;
 $12 = sp + 300|0;
 $13 = sp + 284|0;
 $14 = sp + 264|0;
 $15 = sp + 160|0;
 $16 = sp + 148|0;
 $17 = sp + 124|0;
 $18 = sp + 136|0;
 $19 = sp + 112|0;
 $20 = sp + 100|0;
 HEAP32[$11>>2] = $5;
 $21 = HEAP32[$3>>2]|0;
 $22 = (__ZNK5Image9numPlanesEv($21)|0);
 $23 = ((($7)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($7)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 __ZN18UniformSymbolCoderI10RacInput24I8BufferIOEEC2ERS2_($12,$1);
 __ZNSt3__26vectorIiNS_9allocatorIiEEEC2EjRKi($13,$22,$11);
 $27 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($12,0,1)|0);
 $28 = ($27|0)==(0);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;
 $29 = ((($7)) + 56|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($22|0)>(0);
 if ($31) {
  $$0274443 = 0;
  while(1) {
   $48 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($12,-1,3)|0);
   $49 = (($14) + ($$0274443<<2)|0);
   HEAP32[$49>>2] = $48;
   $50 = (($$0274443) + 1)|0;
   $51 = ($50|0)<($22|0);
   if ($51) {
    $$0274443 = $50;
   } else {
    break;
   }
  }
 }
 $32 = (($22) + -1)|0;
 $33 = ($22|0)>(3);
 $34 = ($22|0)>(4);
 $35 = ($24|0)<(0);
 $36 = $35 << 31 >> 31;
 $37 = ($6|0)==(0);
 $38 = ((($7)) + 60|0);
 $39 = ((($3)) + 4|0);
 $40 = ($22|0)>(3);
 $41 = ((($7)) + 4|0);
 $42 = ($9|0)!=(0|0);
 $43 = ($6|0)>(0);
 $44 = (($6) + -1)|0;
 $45 = ((($10)) + 4|0);
 $46 = ((($15)) + 4|0);
 $47 = ((($7)) + 4|0);
 $$0268 = $30;$$0275 = 0;
 L5: while(1) {
  $52 = HEAP32[$3>>2]|0;
  $53 = HEAP32[$11>>2]|0;
  $54 = (__Z16plane_zoomlevelsRK5Imageii($52,$53,$6)|0);
  $55 = ($$0275|0)<($54|0);
  if (!($55)) {
   $$5281 = 1;
   label = 60;
   break;
  }
  if ($28) {
   $59 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($12,0,$32)|0);
   if ($33) {
    $60 = HEAP32[$3>>2]|0;
    $61 = ((($60)) + 56|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = ($62<<24>>24)!=(0);
    $64 = ($59|0)<(3);
    $or$cond = $64 & $63;
    if ($or$cond) {
     $65 = HEAP32[$13>>2]|0;
     $66 = (($65) + ($59<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($65)) + 12|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67|0)>($69|0);
     if (!($70)) {
      label = 10;
      break;
     }
    }
    $71 = ($59|0)<(4);
    $or$cond6 = $34 & $71;
    if ($or$cond6) {
     $72 = HEAP32[$13>>2]|0;
     $73 = (($72) + ($59<<2)|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ((($72)) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)>($76|0);
     if ($77) {
      $$0282 = $59;
     } else {
      label = 13;
      break;
     }
    } else {
     $$0282 = $59;
    }
   } else {
    $$0282 = $59;
   }
  } else {
   $56 = HEAP32[$3>>2]|0;
   $57 = HEAP32[$11>>2]|0;
   __Z15plane_zoomlevelRK5ImageiiiPK11ColorRanges($15,$56,$57,$6,$$0275,$4);
   $58 = HEAP32[$15>>2]|0;
   $$0282 = $58;
  }
  $78 = HEAP32[$13>>2]|0;
  $79 = (($78) + ($$0282<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)<(0);
  if ($81) {
   label = 15;
   break;
  }
  $82 = 14080;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($82) + 4)|0;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (___muldi3(($84|0),($87|0),100,0)|0);
  $89 = tempRet0;
  $90 = 14072;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($90) + 4)|0;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (___muldi3(($92|0),($95|0),($24|0),($36|0))|0);
  $97 = tempRet0;
  $98 = ($89|0)>($97|0);
  $99 = ($88>>>0)>($96>>>0);
  $100 = ($89|0)==($97|0);
  $101 = $100 & $99;
  $102 = $98 | $101;
  $or$cond8 = $37 & $102;
  if ($or$cond8) {
   label = 17;
   break;
  }
  $106 = HEAP32[$4>>2]|0;
  $107 = ((($106)) + 12|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (FUNCTION_TABLE_iii[$108 & 63]($4,$$0282)|0);
  $110 = HEAP32[$4>>2]|0;
  $111 = ((($110)) + 16|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (FUNCTION_TABLE_iii[$112 & 63]($4,$$0282)|0);
  $114 = ($109<<16>>16)<($113<<16>>16);
  do {
   if ($114) {
    $115 = (($14) + ($$0282<<2)|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)<(0);
    if ($117) {
     $118 = (__ZN18UniformSymbolCoderI10RacInput24I8BufferIOEE8read_intEii($12,0,2)|0);
     $$0283 = $118;
    } else {
     $$0283 = $116;
    }
    $119 = (($80|0) / 2)&-1;
    $120 = 1 << $119;
    $121 = ($120|0)<($$0268|0);
    if ($121) {
     $122 = (__ZN8BufferIO5ftellEv($0)|0);
     HEAP32[$vararg_buffer10>>2] = $$0268;
     $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
     HEAP32[$vararg_ptr13>>2] = $122;
     __Z8v_printfiPKcz(1,7896,$vararg_buffer10);
     $123 = (($$0268|0) / 2)&-1;
     HEAP32[$29>>2] = $123;
     $124 = HEAP32[$38>>2]|0;
     $125 = ($124|0)!=(0);
     $126 = ($$0268|0)<(4);
     $or$cond10 = $126 & $125;
     if ($or$cond10) {
      $$5281 = 0;
      label = 60;
      break L5;
     } else {
      $$1269 = $123;
     }
    } else {
     $$1269 = $$0268;
    }
    $127 = ($120|0)<($26|0);
    if ($127) {
     label = 24;
     break L5;
    }
    if ($37) {
     $141 = 14080;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = (($141) + 4)|0;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $147 = 14072;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $150 = (($147) + 4)|0;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = HEAP32[$3>>2]|0;
     $154 = HEAP32[$11>>2]|0;
     $155 = (__Z16plane_zoomlevelsRK5Imageii($153,$154,$6)|0);
     $156 = (___muldi3(($143|0),($146|0),100,0)|0);
     $157 = tempRet0;
     $158 = (___divdi3(($156|0),($157|0),($149|0),($152|0))|0);
     $159 = tempRet0;
     $160 = (($155) + -1)|0;
     $161 = HEAP32[$3>>2]|0;
     $162 = (__ZNK5Image4colsEi($161,$80)|0);
     $163 = HEAP32[$3>>2]|0;
     $164 = (__ZNK5Image4rowsEi($163,$80)|0);
     HEAP32[$vararg_buffer19>>2] = $158;
     $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
     HEAP32[$vararg_ptr22>>2] = $$0275;
     $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
     HEAP32[$vararg_ptr23>>2] = $160;
     $vararg_ptr24 = ((($vararg_buffer19)) + 12|0);
     HEAP32[$vararg_ptr24>>2] = $$0282;
     $vararg_ptr25 = ((($vararg_buffer19)) + 16|0);
     HEAP32[$vararg_ptr25>>2] = $162;
     $vararg_ptr26 = ((($vararg_buffer19)) + 20|0);
     HEAP32[$vararg_ptr26>>2] = $164;
     __Z12v_printf_ttyiPKcz(2,8003,$vararg_buffer19);
    }
    $165 = HEAP32[$3>>2]|0;
    $166 = HEAP32[$39>>2]|0;
    $167 = ($165|0)==($166|0);
    if (!($167)) {
     $$sroa$0313$0424 = $165;
     while(1) {
      $169 = (__ZN5Image8getPlaneEi($$sroa$0313$0424,$$0282)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ((($170)) + 8|0);
      $172 = HEAP32[$171>>2]|0;
      FUNCTION_TABLE_vii[$172 & 31]($169,$80);
      $173 = ((($$sroa$0313$0424)) + 104|0);
      $174 = ($173|0)==($166|0);
      if ($174) {
       break;
      } else {
       $$sroa$0313$0424 = $173;
      }
     }
    }
    $168 = ($$0282|0)>(0);
    if ($168) {
     $175 = HEAP32[$3>>2]|0;
     $176 = HEAP32[$39>>2]|0;
     $177 = ($175|0)==($176|0);
     if (!($177)) {
      $$sroa$0305$0425 = $175;
      while(1) {
       $178 = (__ZN5Image8getPlaneEi($$sroa$0305$0425,0)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ((($179)) + 8|0);
       $181 = HEAP32[$180>>2]|0;
       FUNCTION_TABLE_vii[$181 & 31]($178,$80);
       $182 = ((($$sroa$0305$0425)) + 104|0);
       $183 = ($182|0)==($176|0);
       if ($183) {
        break;
       } else {
        $$sroa$0305$0425 = $182;
       }
      }
     }
    }
    $184 = ($$0282|0)<(3);
    $or$cond12 = $40 & $184;
    if ($or$cond12) {
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$39>>2]|0;
     $187 = ($185|0)==($186|0);
     if (!($187)) {
      $$sroa$0297$0428 = $185;
      while(1) {
       $188 = (__ZN5Image8getPlaneEi($$sroa$0297$0428,3)|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = ((($189)) + 8|0);
       $191 = HEAP32[$190>>2]|0;
       FUNCTION_TABLE_vii[$191 & 31]($188,$80);
       $192 = ((($$sroa$0297$0428)) + 104|0);
       $193 = ($192|0)==($186|0);
       if ($193) {
        break;
       } else {
        $$sroa$0297$0428 = $192;
       }
      }
     }
    }
    $194 = $80 & 1;
    $195 = ($194|0)==(0);
    $196 = HEAP32[$3>>2]|0;
    $197 = (__ZNK5Image8getDepthEv($196)|0);
    $198 = ($197|0)<(9);
    if ($195) {
     if ($198) {
      $199 = HEAP32[$11>>2]|0;
      $200 = HEAP32[$41>>2]|0;
      $201 = (__Z34flif_decode_FLIF2_inner_horizontalI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE5PlaneIhE11ColorRangesEbiRT_RT0_RNSt3__26vectorIT1_NSD_9allocatorISF_EEEERNSE_I5ImageNSG_ISK_EEEEPKT3_iiiiiiiRNSE_IiNSG_IiEEEERNSE_IP9TransformIS9_ENSG_ISW_EEEEi($$0282,$0,$1,$2,$3,$4,$199,$6,$24,$26,$$0275,$80,$$0283,$13,$8,$200)|0);
      if (!($201)) {
       $$5281 = 0;
       label = 60;
       break L5;
      }
     }
    } else {
     if ($198) {
      $202 = HEAP32[$11>>2]|0;
      $203 = HEAP32[$47>>2]|0;
      $204 = (__Z32flif_decode_FLIF2_inner_verticalI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE5PlaneIhE11ColorRangesEbiRT_RT0_RNSt3__26vectorIT1_NSD_9allocatorISF_EEEERNSE_I5ImageNSG_ISK_EEEEPKT3_iiiiiiiRNSE_IiNSG_IiEEEERNSE_IP9TransformIS9_ENSG_ISW_EEEEi($$0282,$0,$1,$2,$3,$4,$202,$6,$24,$26,$$0275,$80,$$0283,$13,$8,$203)|0);
      if (!($204)) {
       $$5281 = 0;
       label = 60;
       break L5;
      }
     }
    }
    if ($37) {
     $205 = (__ZN8BufferIO5ftellEv($0)|0);
     HEAP32[$vararg_buffer27>>2] = $205;
     __Z8v_printfiPKcz(3,8038,$vararg_buffer27);
     __Z8v_printfiPKcz(5,4962,$vararg_buffer30);
    }
    $206 = HEAP32[$13>>2]|0;
    $207 = (($206) + ($$0282<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = (($208) + -1)|0;
    HEAP32[$207>>2] = $209;
    $210 = 14080;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (___muldi3(($212|0),($215|0),10000,0)|0);
    $217 = tempRet0;
    $218 = 14072;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = (___divdi3(($216|0),($217|0),($220|0),($223|0))|0);
    $225 = tempRet0;
    $226 = ($$0282|0)<(4);
    $or$cond14 = $42 & $226;
    if ($or$cond14) {
     if ($37) {
      $$old = HEAP32[5583]|0;
      $$old284 = ($224|0)<($$old|0);
      if ($$old284) {
       $$3271 = $$1269;
       break;
      }
     } else {
      $227 = HEAP32[$3>>2]|0;
      $228 = HEAP32[$11>>2]|0;
      $229 = (__Z16plane_zoomlevelsRK5Imageii($227,$228,$6)|0);
      $230 = (($$0275) + 1)|0;
      $231 = ($230|0)!=($229|0);
      $232 = HEAP32[5583]|0;
      $233 = ($224|0)<($232|0);
      $or$cond285 = $231 | $233;
      if ($or$cond285) {
       $$3271 = $$1269;
       break;
      }
     }
     $234 = HEAP32[$39>>2]|0;
     $235 = HEAP32[$3>>2]|0;
     $236 = ($234|0)==($235|0);
     if (!($236)) {
      $$0267431 = 0;
      while(1) {
       $244 = HEAP32[$10>>2]|0;
       $245 = HEAP32[$3>>2]|0;
       $246 = (($245) + (($$0267431*104)|0)|0);
       __ZNK5Image5cloneEv($15,$246);
       $247 = (($244) + (($$0267431*104)|0)|0);
       (__ZN5ImageaSEOS_($247,$15)|0);
       __ZN5ImageD2Ev($15);
       $248 = (($$0267431) + 1)|0;
       $249 = HEAP32[$39>>2]|0;
       $250 = HEAP32[$3>>2]|0;
       $251 = (($249) - ($250))|0;
       $252 = (($251|0) / 104)&-1;
       $253 = ($248>>>0)<($252>>>0);
       if ($253) {
        $$0267431 = $248;
       } else {
        break;
       }
      }
     }
     $237 = 14080;
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($237) + 4)|0;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEEC2ERKS7_($15,$8);
     __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($18,$13);
     $243 = HEAP32[$11>>2]|0;
     __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($19,$18);
     __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($10,$4,0,$243,$6,-1,$26,$19,$15);
     __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($19);
     if ($43) {
      __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($20,$18);
      __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($10,$4,0,$44,0,-1,$26,$20,$15);
      __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($20);
     }
     $254 = 14080;
     $255 = $254;
     HEAP32[$255>>2] = $239;
     $256 = (($254) + 4)|0;
     $257 = $256;
     HEAP32[$257>>2] = $242;
     $258 = HEAP32[$10>>2]|0;
     $259 = HEAP32[$45>>2]|0;
     $260 = ($258|0)==($259|0);
     if (!($260)) {
      $$sroa$0289$0434 = $258;
      while(1) {
       __ZN5Image15normalize_scaleEv($$sroa$0289$0434);
       $266 = ((($$sroa$0289$0434)) + 104|0);
       $267 = ($266|0)==($259|0);
       if ($267) {
        break;
       } else {
        $$sroa$0289$0434 = $266;
       }
      }
     }
     $261 = HEAP32[$46>>2]|0;
     $262 = HEAP32[$15>>2]|0;
     $263 = (($261) - ($262))|0;
     $264 = ($263|0)>(0);
     if ($264) {
      $265 = $263 >> 2;
      $$0438 = (($265) + -1)|0;
      $$0439 = $$0438;
      while(1) {
       $273 = HEAP32[$15>>2]|0;
       $274 = (($273) + ($$0439<<2)|0);
       $275 = HEAP32[$274>>2]|0;
       $276 = HEAP32[$275>>2]|0;
       $277 = ((($276)) + 12|0);
       $278 = HEAP32[$277>>2]|0;
       $279 = (FUNCTION_TABLE_ii[$278 & 63]($275)|0);
       if ($279) {
        $281 = HEAP32[$15>>2]|0;
        $282 = (($281) + ($$0439<<2)|0);
        $283 = HEAP32[$282>>2]|0;
        $284 = HEAP32[$283>>2]|0;
        $285 = ((($284)) + 28|0);
        $286 = HEAP32[$285>>2]|0;
        FUNCTION_TABLE_vii[$286 & 31]($283,$10);
       }
       $$0 = (($$0439) + -1)|0;
       $280 = ($$0|0)>(-1);
       if ($280) {
        $$0439 = $$0;
       } else {
        break;
       }
      }
     }
     HEAP32[589] = $224;
     $268 = (__ZN8BufferIO5ftellEv($0)|0);
     $269 = ($268|0)<(0);
     $270 = $269 << 31 >> 31;
     $271 = (FUNCTION_TABLE_iiii[$9 & 63]($224,$268,$270)|0);
     HEAP32[5583] = $271;
     $272 = ($224|0)<($271|0);
     __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($18);
     __ZNSt3__213__vector_baseIP9TransformI8BufferIOENS_9allocatorIS4_EEED2Ev($15);
     if ($272) {
      $$3271 = $$1269;
     } else {
      $$5281 = 0;
      label = 60;
      break L5;
     }
    } else {
     $$3271 = $$1269;
    }
   } else {
    $287 = HEAP32[$13>>2]|0;
    $288 = (($287) + ($$0282<<2)|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = (($289) + -1)|0;
    HEAP32[$288>>2] = $290;
    $$3271 = $$0268;
   }
  } while(0);
  $291 = (($$0275) + 1)|0;
  $$0268 = $$3271;$$0275 = $291;
 }
 if ((label|0) == 10) {
  __Z8e_printfPKcz(7681,$vararg_buffer);
  $$5281 = 0;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 else if ((label|0) == 13) {
  __Z8e_printfPKcz(7791,$vararg_buffer1);
  $$5281 = 0;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 else if ((label|0) == 15) {
  __Z8e_printfPKcz(7857,$vararg_buffer3);
  $$5281 = 0;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 else if ((label|0) == 17) {
  $103 = (___divdi3(($88|0),($89|0),($92|0),($95|0))|0);
  $104 = tempRet0;
  HEAP32[$vararg_buffer5>>2] = $84;
  $vararg_ptr7 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $92;
  $vararg_ptr8 = ((($vararg_buffer5)) + 8|0);
  HEAP32[$vararg_ptr8>>2] = $24;
  $vararg_ptr9 = ((($vararg_buffer5)) + 12|0);
  HEAP32[$vararg_ptr9>>2] = $103;
  __Z8v_printfiPKcz(5,7164,$vararg_buffer5);
  $105 = HEAP32[$11>>2]|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($16,$13);
  __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($3,$4,$$0282,$105,$6,-1,$26,$16,$8);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($16);
  $$5281 = 0;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 else if ((label|0) == 24) {
  $128 = 14080;
  $129 = $128;
  $130 = HEAP32[$129>>2]|0;
  $131 = (($128) + 4)|0;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = 14072;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (($134) + 4)|0;
  $138 = $137;
  $139 = HEAP32[$138>>2]|0;
  HEAP32[$vararg_buffer14>>2] = $130;
  $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
  HEAP32[$vararg_ptr17>>2] = $136;
  $vararg_ptr18 = ((($vararg_buffer14)) + 8|0);
  HEAP32[$vararg_ptr18>>2] = $26;
  __Z8v_printfiPKcz(5,7919,$vararg_buffer14);
  $140 = HEAP32[$11>>2]|0;
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($17,$13);
  __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($3,$4,$$0282,$140,$6,-1,$26,$17,$8);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($17);
  $$5281 = 0;
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 else if ((label|0) == 60) {
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($13);
  STACKTOP = sp;return ($$5281|0);
 }
 return (0)|0;
}
function __Z34flif_decode_FLIF2_inner_horizontalI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE5PlaneIhE11ColorRangesEbiRT_RT0_RNSt3__26vectorIT1_NSD_9allocatorISF_EEEERNSE_I5ImageNSG_ISK_EEEEPKT3_iiiiiiiRNSE_IiNSG_IiEEEERNSE_IP9TransformIS9_ENSG_ISW_EEEEi($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $$092101 = 0, $$093100 = 0, $$in = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $NB_PROPERTIESA$NB_PROPERTIES = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $16 = sp + 96|0;
 $17 = sp + 40|0;
 $18 = sp + 28|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = (__ZNK5Image9numPlanesEv($19)|0);
 $21 = HEAP32[$4>>2]|0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ($20|0)==(5);
 $26 = ($20|0)>(3);
 $NB_PROPERTIESA$NB_PROPERTIES = $26 ? 2440 : 2420;
 $$in = (($NB_PROPERTIESA$NB_PROPERTIES) + ($0<<2)|0);
 $27 = HEAP32[$$in>>2]|0;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($16,$27);
 $28 = HEAP32[$3>>2]|0;
 $29 = (($28) + (($0*16412)|0)|0);
 __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesEC2ERS5_RNSt3__26vectorI5ImageNSB_9allocatorISD_EEEEPKS8_RNSC_IsNSE_IsEEEEibbiii($17,$29,$4,$5,$16,$11,$24,$25,$12,$15,$0);
 $30 = HEAP32[$4>>2]|0;
 $31 = (__ZNK5Image4rowsEi($30,$11)|0);
 $32 = ($31>>>0)>(1);
 if (!($32)) {
  $103 = 1;
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($103|0);
 }
 $33 = ($7|0)==(0);
 $34 = ((($4)) + 4|0);
 $$092101 = 1;
 while(1) {
  $35 = HEAP32[$4>>2]|0;
  $36 = (__ZNK5Image4colsEv($35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $103 = 0;
   label = 14;
   break;
  }
  $38 = HEAP32[$4>>2]|0;
  $39 = (__ZNK5Image4colsEi($38,$11)|0);
  $40 = 14080;
  $41 = $40;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($40) + 4)|0;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (_i64Add(($42|0),($45|0),($39|0),0)|0);
  $47 = tempRet0;
  $48 = 14080;
  $49 = $48;
  HEAP32[$49>>2] = $46;
  $50 = (($48) + 4)|0;
  $51 = $50;
  HEAP32[$51>>2] = $47;
  $52 = $$092101 & 257;
  $53 = ($52|0)==(257);
  $or$cond = $33 & $53;
  if ($or$cond) {
   $54 = 14072;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($54) + 4)|0;
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$4>>2]|0;
   $61 = (__Z16plane_zoomlevelsRK5Imageii($60,$6,$7)|0);
   $62 = (___muldi3(($46|0),($47|0),100,0)|0);
   $63 = tempRet0;
   $64 = (___divdi3(($62|0),($63|0),($56|0),($59|0))|0);
   $65 = tempRet0;
   $66 = (($61) + -1)|0;
   $67 = HEAP32[$4>>2]|0;
   $68 = (__ZNK5Image4colsEi($67,$11)|0);
   $69 = HEAP32[$4>>2]|0;
   $70 = (__ZNK5Image4rowsEi($69,$11)|0);
   HEAP32[$vararg_buffer>>2] = $64;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $66;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $0;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $68;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $70;
   __Z12v_printf_ttyiPKcz(3,8003,$vararg_buffer);
  }
  $71 = (__ZN8BufferIO5isEOFEv($1)|0);
  if ($71) {
   label = 8;
   break;
  }
  $72 = HEAP32[$34>>2]|0;
  $73 = HEAP32[$4>>2]|0;
  $74 = (($72) - ($73))|0;
  $75 = ($74|0)>(0);
  if ($75) {
   $$093100 = 0;
   while(1) {
    $83 = HEAP32[$4>>2]|0;
    $84 = (($83) + (($$093100*104)|0)|0);
    $85 = (__ZN5Image8getPlaneEi($84,$0)|0);
    $86 = (__ZN5Image8getPlaneEi($84,0)|0);
    if ($26) {
     $87 = (__ZN5Image8getPlaneEi($84,3)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($88)) + 20|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (FUNCTION_TABLE_ii[$90 & 63]($87)|0);
     if ($91) {
      $93 = $86;
     } else {
      $92 = (__ZN5Image8getPlaneEi($84,3)|0);
      $93 = $92;
     }
    } else {
     $93 = $86;
    }
    __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE11prepare_rowEjiPKS7_SB_($17,$$092101,$$093100,$93,$86);
    $94 = HEAP32[$85>>2]|0;
    $95 = ((($94)) + 48|0);
    $96 = HEAP32[$95>>2]|0;
    FUNCTION_TABLE_vii[$96 & 31]($85,$17);
    $97 = (($$093100) + 1)|0;
    $98 = HEAP32[$34>>2]|0;
    $99 = HEAP32[$4>>2]|0;
    $100 = (($98) - ($99))|0;
    $101 = (($100|0) / 104)&-1;
    $102 = ($97|0)<($101|0);
    if ($102) {
     $$093100 = $97;
    } else {
     break;
    }
   }
  }
  $79 = (($$092101) + 2)|0;
  $80 = HEAP32[$4>>2]|0;
  $81 = (__ZNK5Image4rowsEi($80,$11)|0);
  $82 = ($79>>>0)<($81>>>0);
  if ($82) {
   $$092101 = $79;
  } else {
   $103 = 1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$vararg_buffer6>>2] = $$092101;
  __Z8v_printfiPKcz(1,8060,$vararg_buffer6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($18,$13);
  $76 = ($$092101>>>0)>(1);
  $77 = (($$092101) + -2)|0;
  $78 = $76 ? $77 : $$092101;
  __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($4,$5,$0,$6,$7,$78,$9,$18,$14);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($18);
  $103 = 0;
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 14) {
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function __Z32flif_decode_FLIF2_inner_verticalI8BufferIO10RacInput24IS0_E24FinalPropertySymbolCoderI15SimpleBitChanceS2_Li10EE5PlaneIhE11ColorRangesEbiRT_RT0_RNSt3__26vectorIT1_NSD_9allocatorISF_EEEERNSE_I5ImageNSG_ISK_EEEEPKT3_iiiiiiiRNSE_IiNSG_IiEEEERNSE_IP9TransformIS9_ENSG_ISW_EEEEi($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 $14 = $14|0;
 $15 = $15|0;
 var $$092101 = 0, $$093100 = 0, $$in = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $NB_PROPERTIESA$NB_PROPERTIES = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $16 = sp + 96|0;
 $17 = sp + 40|0;
 $18 = sp + 28|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = (__ZNK5Image9numPlanesEv($19)|0);
 $21 = HEAP32[$4>>2]|0;
 $22 = ((($21)) + 56|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)!=(0);
 $25 = ($20|0)==(5);
 $26 = ($20|0)>(3);
 $NB_PROPERTIESA$NB_PROPERTIES = $26 ? 2440 : 2420;
 $$in = (($NB_PROPERTIESA$NB_PROPERTIES) + ($0<<2)|0);
 $27 = HEAP32[$$in>>2]|0;
 __ZNSt3__26vectorIsNS_9allocatorIsEEEC2Ej($16,$27);
 $28 = HEAP32[$3>>2]|0;
 $29 = (($28) + (($0*16412)|0)|0);
 __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesEC2ERS5_RNSt3__26vectorI5ImageNSB_9allocatorISD_EEEEPKS8_RNSC_IsNSE_IsEEEEibbiii($17,$29,$4,$5,$16,$11,$24,$25,$12,$15,$0);
 $30 = HEAP32[$4>>2]|0;
 $31 = (__ZNK5Image4rowsEi($30,$11)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $104 = 1;
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($104|0);
 }
 $33 = ($7|0)==(0);
 $34 = ((($4)) + 4|0);
 $$092101 = 0;
 while(1) {
  $35 = HEAP32[$4>>2]|0;
  $36 = (__ZNK5Image4colsEv($35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   $104 = 0;
   label = 14;
   break;
  }
  $38 = HEAP32[$4>>2]|0;
  $39 = (__ZNK5Image4colsEi($38,$11)|0);
  $40 = $39 >>> 1;
  $41 = 14080;
  $42 = $41;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 4)|0;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (_i64Add(($40|0),0,($43|0),($46|0))|0);
  $48 = tempRet0;
  $49 = 14080;
  $50 = $49;
  HEAP32[$50>>2] = $47;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = $$092101 & 513;
  $54 = ($53|0)==(513);
  $or$cond = $33 & $54;
  if ($or$cond) {
   $55 = 14072;
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 4)|0;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = HEAP32[$4>>2]|0;
   $62 = (__Z16plane_zoomlevelsRK5Imageii($61,$6,$7)|0);
   $63 = (___muldi3(($47|0),($48|0),100,0)|0);
   $64 = tempRet0;
   $65 = (___divdi3(($63|0),($64|0),($57|0),($60|0))|0);
   $66 = tempRet0;
   $67 = (($62) + -1)|0;
   $68 = HEAP32[$4>>2]|0;
   $69 = (__ZNK5Image4colsEi($68,$11)|0);
   $70 = HEAP32[$4>>2]|0;
   $71 = (__ZNK5Image4rowsEi($70,$11)|0);
   HEAP32[$vararg_buffer>>2] = $65;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $10;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $67;
   $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $0;
   $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
   HEAP32[$vararg_ptr4>>2] = $69;
   $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
   HEAP32[$vararg_ptr5>>2] = $71;
   __Z12v_printf_ttyiPKcz(3,8003,$vararg_buffer);
  }
  $72 = (__ZN8BufferIO5isEOFEv($1)|0);
  if ($72) {
   label = 8;
   break;
  }
  $73 = HEAP32[$34>>2]|0;
  $74 = HEAP32[$4>>2]|0;
  $75 = (($73) - ($74))|0;
  $76 = ($75|0)>(0);
  if ($76) {
   $$093100 = 0;
   while(1) {
    $84 = HEAP32[$4>>2]|0;
    $85 = (($84) + (($$093100*104)|0)|0);
    $86 = (__ZN5Image8getPlaneEi($85,$0)|0);
    $87 = (__ZN5Image8getPlaneEi($85,0)|0);
    if ($26) {
     $88 = (__ZN5Image8getPlaneEi($85,3)|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ((($89)) + 20|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (FUNCTION_TABLE_ii[$91 & 63]($88)|0);
     if ($92) {
      $94 = $87;
     } else {
      $93 = (__ZN5Image8getPlaneEi($85,3)|0);
      $94 = $93;
     }
    } else {
     $94 = $87;
    }
    __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE11prepare_rowEjiPKS7_SB_($17,$$092101,$$093100,$94,$87);
    $95 = HEAP32[$86>>2]|0;
    $96 = ((($95)) + 48|0);
    $97 = HEAP32[$96>>2]|0;
    FUNCTION_TABLE_vii[$97 & 31]($86,$17);
    $98 = (($$093100) + 1)|0;
    $99 = HEAP32[$34>>2]|0;
    $100 = HEAP32[$4>>2]|0;
    $101 = (($99) - ($100))|0;
    $102 = (($101|0) / 104)&-1;
    $103 = ($98|0)<($102|0);
    if ($103) {
     $$093100 = $98;
    } else {
     break;
    }
   }
  }
  $80 = (($$092101) + 1)|0;
  $81 = HEAP32[$4>>2]|0;
  $82 = (__ZNK5Image4rowsEi($81,$11)|0);
  $83 = ($80>>>0)<($82>>>0);
  if ($83) {
   $$092101 = $80;
  } else {
   $104 = 1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$vararg_buffer6>>2] = $$092101;
  __Z8v_printfiPKcz(1,8060,$vararg_buffer6);
  __ZNSt3__26vectorIiNS_9allocatorIiEEEC2ERKS3_($18,$13);
  $77 = ($$092101|0)!=(0);
  $78 = (($$092101) + -1)|0;
  $79 = $77 ? $78 : 0;
  __Z32flif_decode_FLIF2_inner_interpolI8BufferIOEvRNSt3__26vectorI5ImageNS1_9allocatorIS3_EEEEPK11ColorRangesiiiiiNS2_IiNS4_IiEEEERNS2_IP9TransformIT_ENS4_ISG_EEEE($4,$5,$0,$6,$7,$79,$9,$18,$14);
  __ZNSt3__213__vector_baseIiNS_9allocatorIiEEED2Ev($18);
  $104 = 0;
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 14) {
  __ZN12PlaneVisitorD2Ev($17);
  __ZNSt3__213__vector_baseIsNS_9allocatorIsEEED2Ev($16);
  STACKTOP = sp;return ($104|0);
 }
 return (0)|0;
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEEC2ERKS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j($0,$10,$11,$8);
 return;
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(1073741823);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 2;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<2)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE18__construct_at_endIPS4_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 2;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($0,$2,$7,$7,$8);
 return;
}
function __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesEC2ERS5_RNSt3__26vectorI5ImageNSB_9allocatorISD_EEEEPKS8_RNSC_IsNSE_IsEEEEibbiii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorC2Ev($0);
 HEAP32[$0>>2] = (2560);
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = $4;
 $15 = ((($0)) + 20|0);
 HEAP32[$15>>2] = $5;
 $16 = ((($0)) + 24|0);
 $17 = $6&1;
 HEAP8[$16>>0] = $17;
 $18 = ((($0)) + 25|0);
 $19 = $7&1;
 HEAP8[$18>>0] = $19;
 $20 = ((($0)) + 28|0);
 $21 = ((($0)) + 44|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP32[$21>>2] = $8;
 $22 = ((($0)) + 48|0);
 HEAP32[$22>>2] = $9;
 $23 = ((($0)) + 52|0);
 HEAP32[$23>>2] = $10;
 return;
}
function __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE11prepare_rowEjiPKS7_SB_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $4;
 return;
}
function __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $$pr5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 24|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  $26 = ((($0)) + 25|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)!=(0);
  $29 = ((($0)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li0E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$6,$8,$10,$12,$14,$16,$18,$20,$22,$25,$28,$30,$32);
  $$pr = HEAP32[$2>>2]|0;
  $33 = $$pr;
 } else {
  $33 = $3;
 }
 $34 = ($33|0)==(1);
 if ($34) {
  $35 = ((($0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($0)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($0)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($0)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($0)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($0)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($0)) + 24|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)!=(0);
  $52 = ((($0)) + 25|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)!=(0);
  $55 = ((($0)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($0)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE13ConstantPlaneLi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$36,$38,$40,2576,2584,$42,$44,$46,$48,$51,$54,$56,$58);
 }
 $59 = HEAP32[$2>>2]|0;
 $60 = ($59|0)==(3);
 if ($60) {
  $61 = ((($0)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($0)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($0)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($0)) + 40|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($0)) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($0)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($0)) + 32|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($0)) + 28|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($0)) + 24|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)!=(0);
  $82 = ((($0)) + 25|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)!=(0);
  $85 = ((($0)) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($0)) + 48|0);
  $88 = HEAP32[$87>>2]|0;
  __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li3E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$62,$64,$66,$68,$70,$72,$74,$76,$78,$81,$84,$86,$88);
  $$pr5 = HEAP32[$2>>2]|0;
  $89 = $$pr5;
 } else {
  $89 = $59;
 }
 $90 = ($89|0)==(4);
 if (!($90)) {
  return;
 }
 $91 = ((($0)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($0)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($0)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($0)) + 36|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($0)) + 40|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($0)) + 16|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($0)) + 20|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($0)) + 32|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($0)) + 28|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($0)) + 24|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = ($110<<24>>24)!=(0);
 $112 = ((($0)) + 25|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)!=(0);
 $115 = ((($0)) + 44|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($0)) + 48|0);
 $118 = HEAP32[$117>>2]|0;
 __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li4E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$92,$94,$96,$98,$100,$102,$104,$106,$108,$111,$114,$116,$118);
 return;
}
function __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS6_IsE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 24|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  $26 = ((($0)) + 25|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)!=(0);
  $29 = ((($0)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$6,$8,$10,$12,$14,$16,$18,$20,$22,$25,$28,$30,$32);
  $$pr = HEAP32[$2>>2]|0;
  $33 = $$pr;
 } else {
  $33 = $3;
 }
 $34 = ($33|0)==(2);
 if (!($34)) {
  return;
 }
 $35 = ((($0)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($0)) + 24|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)!=(0);
 $56 = ((($0)) + 25|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)!=(0);
 $59 = ((($0)) + 44|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($0)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi2E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$36,$38,$40,$42,$44,$46,$48,$50,$52,$55,$58,$60,$62);
 return;
}
function __ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0202 = 0, $$0202 = 0, $$0203 = 0, $$0204215 = 0, $$0205 = 0, $$0206218 = 0, $$0214 = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $or$cond209 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,1)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 do {
  if ($36) {
   $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $38 = Math_imul($37, $9)|0;
   $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $44 = (($42>>>0) / ($43>>>0))&-1;
   $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $46 = Math_imul($45, $9)|0;
   $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $53 = (($51>>>0) / ($52>>>0))&-1;
   $54 = (($53) + 1)|0;
   $55 = $54 | 1;
   $56 = ($44>>>0)>(1);
   $57 = $44 & 1;
   $58 = ($57|0)==(0);
   $or$cond = $56 & $58;
   $59 = $or$cond << 31 >> 31;
   $$0202 = (($59) + ($44))|0;
   $60 = ($$0202|0)==(0);
   $$$0202 = $60 ? 1 : $$0202;
   if (!($10)) {
    $72 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $73 = (__ZNK5Image8getscaleEv($17)|0);
    $74 = $72 >>> $73;
    $75 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $76 = (__ZNK5Image8getscaleEv($17)|0);
    $77 = $75 >>> $76;
    $78 = (($8) + -1)|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = (($79) + (($78*104)|0)|0);
    $81 = (__ZN5Image8getPlaneEi($80,1)|0);
    $82 = Math_imul($77, $9)|0;
    $83 = Math_imul($74, $$$0202)|0;
    $84 = $74 << 1;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$81,$82,$74,$83,$84);
    $85 = HEAP32[$2>>2]|0;
    $86 = (($85) + (($78*104)|0)|0);
    $87 = (__ZN5Image8getPlaneEi($86,1)|0);
    $88 = Math_imul($74, $55)|0;
    $89 = (__ZNK5Image4colsEi($17,$7)|0);
    $90 = Math_imul($89, $74)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$87,$82,$88,$90,$84);
    $$0205 = $55;$$2 = $$$0202;
    break;
   }
   $61 = ($$$0202>>>0)>(1);
   if ($61) {
    $62 = (($8) + -1)|0;
    $$0206218 = 1;
    while(1) {
     $63 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0206218)|0);
     $64 = ($63<<16>>16)==(0);
     if ($64) {
      $65 = (__ZNK5Image4colsEi($17,$7)|0);
      $66 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0206218,$65,$13)|0);
      __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0206218,$66);
     } else {
      $67 = HEAP32[$2>>2]|0;
      $68 = (($67) + (($62*104)|0)|0);
      $69 = (__ZNK5ImageclEiijj($68,1,$7,$9,$$0206218)|0);
      __ZN5Image3setEiijjs($17,1,$7,$9,$$0206218,$69);
     }
     $70 = (($$0206218) + 2)|0;
     $71 = ($70>>>0)<($$$0202>>>0);
     if ($71) {
      $$0206218 = $70;
     } else {
      $$0205 = $55;$$2 = $$$0202;
      break;
     }
    }
   } else {
    $$0205 = $55;$$2 = $$$0202;
   }
  } else {
   $$0205 = $18;$$2 = 1;
  }
 } while(0);
 $91 = ($$2>>>0)<($$0205>>>0);
 if ($91) {
  $$0204215 = $$2;
  while(1) {
   if ($10) {
    $95 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0204215)|0);
    $96 = ($95<<16>>16)==(0);
    if ($96) {
     $97 = (__ZNK5Image4colsEi($17,$7)|0);
     $98 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0204215,$97,$13)|0);
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$98);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $100 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
       $101 = ($100<<16>>16)>(0);
       if ($101) {
        $102 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
        $103 = $102 << 16 >> 16;
        $104 = (($8) - ($103))|0;
        $105 = HEAP32[$2>>2]|0;
        $106 = (($105) + (($104*104)|0)|0);
        $107 = (__ZNK5ImageclEiijj($106,1,$7,$9,$$0204215)|0);
        __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$107);
        break L24;
       } else {
        $108 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
        $109 = HEAP16[$15>>1]|0;
        $110 = ($108<<16>>16)>($109<<16>>16);
        $111 = HEAP16[$14>>1]|0;
        $112 = ($108<<16>>16)<($111<<16>>16);
        $or$cond209 = $110 | $112;
        $$ = $or$cond209 ? $111 : $108;
        $$0203 = $$;
        break;
       }
      } else {
       $99 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
       $$0203 = $99;
      }
     } while(0);
     $113 = HEAP16[$14>>1]|0;
     $114 = $113 << 16 >> 16;
     $115 = $$0203 << 16 >> 16;
     $116 = (($114) - ($115))|0;
     $117 = HEAP16[$15>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = (($118) - ($115))|0;
     $120 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$116,$119)|0);
     $121 = (($120) + ($115))|0;
     $122 = $121&65535;
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$122);
    }
   } while(0);
   $123 = (($$0204215) + 2)|0;
   $124 = ($123>>>0)<($$0205>>>0);
   if ($124) {
    $$0204215 = $123;
   } else {
    break;
   }
  }
 }
 $brmerge$demorgan = $36 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $92 = (__ZNK5Image4colsEi($17,$7)|0);
 $93 = ($$0205>>>0)<($92>>>0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = (($8) + -1)|0;
 $$0214 = $$0205;
 while(1) {
  $125 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0214)|0);
  $126 = ($125<<16>>16)==(0);
  if ($126) {
   $127 = (__ZNK5Image4colsEi($17,$7)|0);
   $128 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0214,$127,$13)|0);
   __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0214,$128);
  } else {
   $129 = HEAP32[$2>>2]|0;
   $130 = (($129) + (($94*104)|0)|0);
   $131 = (__ZNK5ImageclEiijj($130,1,$7,$9,$$0214)|0);
   __ZN5Image3setEiijjs($17,1,$7,$9,$$0214,$131);
  }
  $132 = (($$0214) + 2)|0;
  $133 = (__ZNK5Image4colsEi($17,$7)|0);
  $134 = ($132>>>0)<($133>>>0);
  if ($134) {
   $$0214 = $132;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi2E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0202 = 0, $$0202 = 0, $$0203 = 0, $$0204215 = 0, $$0205 = 0, $$0206218 = 0, $$0214 = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $or$cond209 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,2)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 do {
  if ($36) {
   $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $38 = Math_imul($37, $9)|0;
   $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $44 = (($42>>>0) / ($43>>>0))&-1;
   $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $46 = Math_imul($45, $9)|0;
   $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $53 = (($51>>>0) / ($52>>>0))&-1;
   $54 = (($53) + 1)|0;
   $55 = $54 | 1;
   $56 = ($44>>>0)>(1);
   $57 = $44 & 1;
   $58 = ($57|0)==(0);
   $or$cond = $56 & $58;
   $59 = $or$cond << 31 >> 31;
   $$0202 = (($59) + ($44))|0;
   $60 = ($$0202|0)==(0);
   $$$0202 = $60 ? 1 : $$0202;
   if (!($10)) {
    $72 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $73 = (__ZNK5Image8getscaleEv($17)|0);
    $74 = $72 >>> $73;
    $75 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $76 = (__ZNK5Image8getscaleEv($17)|0);
    $77 = $75 >>> $76;
    $78 = (($8) + -1)|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = (($79) + (($78*104)|0)|0);
    $81 = (__ZN5Image8getPlaneEi($80,2)|0);
    $82 = Math_imul($77, $9)|0;
    $83 = Math_imul($74, $$$0202)|0;
    $84 = $74 << 1;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$81,$82,$74,$83,$84);
    $85 = HEAP32[$2>>2]|0;
    $86 = (($85) + (($78*104)|0)|0);
    $87 = (__ZN5Image8getPlaneEi($86,2)|0);
    $88 = Math_imul($74, $55)|0;
    $89 = (__ZNK5Image4colsEi($17,$7)|0);
    $90 = Math_imul($89, $74)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$87,$82,$88,$90,$84);
    $$0205 = $55;$$2 = $$$0202;
    break;
   }
   $61 = ($$$0202>>>0)>(1);
   if ($61) {
    $62 = (($8) + -1)|0;
    $$0206218 = 1;
    while(1) {
     $63 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0206218)|0);
     $64 = ($63<<16>>16)==(0);
     if ($64) {
      $65 = (__ZNK5Image4colsEi($17,$7)|0);
      $66 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0206218,$65,$13)|0);
      __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0206218,$66);
     } else {
      $67 = HEAP32[$2>>2]|0;
      $68 = (($67) + (($62*104)|0)|0);
      $69 = (__ZNK5ImageclEiijj($68,2,$7,$9,$$0206218)|0);
      __ZN5Image3setEiijjs($17,2,$7,$9,$$0206218,$69);
     }
     $70 = (($$0206218) + 2)|0;
     $71 = ($70>>>0)<($$$0202>>>0);
     if ($71) {
      $$0206218 = $70;
     } else {
      $$0205 = $55;$$2 = $$$0202;
      break;
     }
    }
   } else {
    $$0205 = $55;$$2 = $$$0202;
   }
  } else {
   $$0205 = $18;$$2 = 1;
  }
 } while(0);
 $91 = ($$2>>>0)<($$0205>>>0);
 if ($91) {
  $$0204215 = $$2;
  while(1) {
   if ($10) {
    $95 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0204215)|0);
    $96 = ($95<<16>>16)==(0);
    if ($96) {
     $97 = (__ZNK5Image4colsEi($17,$7)|0);
     $98 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0204215,$97,$13)|0);
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$98);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $100 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
       $101 = ($100<<16>>16)>(0);
       if ($101) {
        $102 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
        $103 = $102 << 16 >> 16;
        $104 = (($8) - ($103))|0;
        $105 = HEAP32[$2>>2]|0;
        $106 = (($105) + (($104*104)|0)|0);
        $107 = (__ZNK5ImageclEiijj($106,2,$7,$9,$$0204215)|0);
        __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$107);
        break L24;
       } else {
        $108 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
        $109 = HEAP16[$15>>1]|0;
        $110 = ($108<<16>>16)>($109<<16>>16);
        $111 = HEAP16[$14>>1]|0;
        $112 = ($108<<16>>16)<($111<<16>>16);
        $or$cond209 = $110 | $112;
        $$ = $or$cond209 ? $111 : $108;
        $$0203 = $$;
        break;
       }
      } else {
       $99 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb0ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
       $$0203 = $99;
      }
     } while(0);
     $113 = HEAP16[$14>>1]|0;
     $114 = $113 << 16 >> 16;
     $115 = $$0203 << 16 >> 16;
     $116 = (($114) - ($115))|0;
     $117 = HEAP16[$15>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = (($118) - ($115))|0;
     $120 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$116,$119)|0);
     $121 = (($120) + ($115))|0;
     $122 = $121&65535;
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0204215,$122);
    }
   } while(0);
   $123 = (($$0204215) + 2)|0;
   $124 = ($123>>>0)<($$0205>>>0);
   if ($124) {
    $$0204215 = $123;
   } else {
    break;
   }
  }
 }
 $brmerge$demorgan = $36 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $92 = (__ZNK5Image4colsEi($17,$7)|0);
 $93 = ($$0205>>>0)<($92>>>0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = (($8) + -1)|0;
 $$0214 = $$0205;
 while(1) {
  $125 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0214)|0);
  $126 = ($125<<16>>16)==(0);
  if ($126) {
   $127 = (__ZNK5Image4colsEi($17,$7)|0);
   $128 = (__Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0214,$127,$13)|0);
   __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0214,$128);
  } else {
   $129 = HEAP32[$2>>2]|0;
   $130 = (($129) + (($94*104)|0)|0);
   $131 = (__ZNK5ImageclEiijj($130,2,$7,$9,$$0214)|0);
   __ZN5Image3setEiijjs($17,2,$7,$9,$$0214,$131);
  }
  $132 = (($$0214) + 2)|0;
  $133 = (__ZNK5Image4colsEi($17,$7)|0);
  $134 = ($132>>>0)<($133>>>0);
  if ($134) {
   $$0214 = $132;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK5Image8getscaleEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __Z22predict_plane_verticalI5PlaneIsEEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = (($4) + -1)|0;
 $9 = (__ZNK5PlaneIsE3getEijj($0,$1,$3,$8)|0);
 $10 = (($4) + 1)|0;
 $11 = ($10>>>0)<($5>>>0);
 if ($11) {
  $12 = (__ZNK5PlaneIsE3getEijj($0,$1,$3,$10)|0);
  $15 = $12;
 } else {
  $15 = $9;
 }
 switch ($6|0) {
 case 0:  {
  $13 = $9 << 16 >> 16;
  $14 = $15 << 16 >> 16;
  $16 = (($14) + ($13))|0;
  $17 = $16 >>> 1;
  $18 = $17&65535;
  $$1 = $18;
  return ($$1|0);
  break;
 }
 case 1:  {
  $19 = $9 << 16 >> 16;
  $20 = $15 << 16 >> 16;
  $21 = (($20) + ($19))|0;
  $22 = $21 >>> 1;
  $23 = $22&65535;
  $24 = ($3|0)!=(0);
  if ($24) {
   $25 = (($3) + -1)|0;
   $26 = (__ZNK5PlaneIsE3getEijj($0,$1,$25,$4)|0);
   $27 = (($3) + -1)|0;
   $28 = (__ZNK5PlaneIsE3getEijj($0,$1,$27,$8)|0);
   $brmerge$demorgan = $24 & $11;
   if ($brmerge$demorgan) {
    $29 = (__ZNK5PlaneIsE3getEijj($0,$1,$25,$10)|0);
    $31 = $26;$33 = $28;$39 = $29;
   } else {
    $31 = $26;$33 = $28;$39 = $26;
   }
  } else {
   $31 = $9;$33 = $9;$39 = $9;
  }
  $30 = $31 << 16 >> 16;
  $32 = $33&65535;
  $34 = (($19) - ($32))|0;
  $35 = (($34) + ($30))|0;
  $36 = $35&65535;
  $37 = (($30) + ($20))|0;
  $38 = $39&65535;
  $40 = (($37) - ($38))|0;
  $41 = $40&65535;
  $42 = (__Z7median3IsET_S0_S0_S0_($23,$36,$41)|0);
  $$1 = $42;
  return ($$1|0);
  break;
 }
 default: {
  $43 = ($3|0)==(0);
  if ($43) {
   $46 = $9;
  } else {
   $44 = (($3) + -1)|0;
   $45 = (__ZNK5PlaneIsE3getEijj($0,$1,$44,$4)|0);
   $46 = $45;
  }
  $47 = (__Z7median3IsET_S0_S0_S0_($46,$9,$15)|0);
  $$1 = $47;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __ZN5Image6getFRAEjjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK5PlaneIhE3getEijj($5,$1,$2,$3)|0);
 return ($6|0);
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li0E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0202 = 0, $$0202 = 0, $$0203 = 0, $$0204215 = 0, $$0205 = 0, $$0206218 = 0, $$0214 = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $or$cond209 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,0)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 do {
  if ($36) {
   $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $38 = Math_imul($37, $9)|0;
   $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $44 = (($42>>>0) / ($43>>>0))&-1;
   $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $46 = Math_imul($45, $9)|0;
   $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $53 = (($51>>>0) / ($52>>>0))&-1;
   $54 = (($53) + 1)|0;
   $55 = $54 | 1;
   $56 = ($44>>>0)>(1);
   $57 = $44 & 1;
   $58 = ($57|0)==(0);
   $or$cond = $56 & $58;
   $59 = $or$cond << 31 >> 31;
   $$0202 = (($59) + ($44))|0;
   $60 = ($$0202|0)==(0);
   $$$0202 = $60 ? 1 : $$0202;
   if (!($10)) {
    $72 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $73 = (__ZNK5Image8getscaleEv($17)|0);
    $74 = $72 >>> $73;
    $75 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $76 = (__ZNK5Image8getscaleEv($17)|0);
    $77 = $75 >>> $76;
    $78 = (($8) + -1)|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = (($79) + (($78*104)|0)|0);
    $81 = (__ZN5Image8getPlaneEi($80,0)|0);
    $82 = Math_imul($77, $9)|0;
    $83 = Math_imul($74, $$$0202)|0;
    $84 = $74 << 1;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$81,$82,$74,$83,$84);
    $85 = HEAP32[$2>>2]|0;
    $86 = (($85) + (($78*104)|0)|0);
    $87 = (__ZN5Image8getPlaneEi($86,0)|0);
    $88 = Math_imul($74, $55)|0;
    $89 = (__ZNK5Image4colsEi($17,$7)|0);
    $90 = Math_imul($89, $74)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$87,$82,$88,$90,$84);
    $$0205 = $55;$$2 = $$$0202;
    break;
   }
   $61 = ($$$0202>>>0)>(1);
   if ($61) {
    $62 = (($8) + -1)|0;
    $$0206218 = 1;
    while(1) {
     $63 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0206218)|0);
     $64 = ($63<<16>>16)==(0);
     if ($64) {
      $65 = (__ZNK5Image4colsEi($17,$7)|0);
      $66 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0206218,$65,$13)|0);
      __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0206218,$66);
     } else {
      $67 = HEAP32[$2>>2]|0;
      $68 = (($67) + (($62*104)|0)|0);
      $69 = (__ZNK5ImageclEiijj($68,0,$7,$9,$$0206218)|0);
      __ZN5Image3setEiijjs($17,0,$7,$9,$$0206218,$69);
     }
     $70 = (($$0206218) + 2)|0;
     $71 = ($70>>>0)<($$$0202>>>0);
     if ($71) {
      $$0206218 = $70;
     } else {
      $$0205 = $55;$$2 = $$$0202;
      break;
     }
    }
   } else {
    $$0205 = $55;$$2 = $$$0202;
   }
  } else {
   $$0205 = $18;$$2 = 1;
  }
 } while(0);
 $91 = ($$2>>>0)<($$0205>>>0);
 if ($91) {
  $$0204215 = $$2;
  while(1) {
   if ($10) {
    $95 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0204215)|0);
    $96 = ($95<<16>>16)==(0);
    if ($96) {
     $97 = (__ZNK5Image4colsEi($17,$7)|0);
     $98 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0204215,$97,$13)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$98);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $100 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
       $101 = ($100<<16>>16)>(0);
       if ($101) {
        $102 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
        $103 = $102 << 16 >> 16;
        $104 = (($8) - ($103))|0;
        $105 = HEAP32[$2>>2]|0;
        $106 = (($105) + (($104*104)|0)|0);
        $107 = (__ZNK5ImageclEiijj($106,0,$7,$9,$$0204215)|0);
        __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$107);
        break L24;
       } else {
        $108 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
        $109 = HEAP16[$15>>1]|0;
        $110 = ($108<<16>>16)>($109<<16>>16);
        $111 = HEAP16[$14>>1]|0;
        $112 = ($108<<16>>16)<($111<<16>>16);
        $or$cond209 = $110 | $112;
        $$ = $or$cond209 ? $111 : $108;
        $$0203 = $$;
        break;
       }
      } else {
       $99 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
       $$0203 = $99;
      }
     } while(0);
     $113 = HEAP16[$14>>1]|0;
     $114 = $113 << 16 >> 16;
     $115 = $$0203 << 16 >> 16;
     $116 = (($114) - ($115))|0;
     $117 = HEAP16[$15>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = (($118) - ($115))|0;
     $120 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$116,$119)|0);
     $121 = (($120) + ($115))|0;
     $122 = $121&65535;
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$122);
    }
   } while(0);
   $123 = (($$0204215) + 2)|0;
   $124 = ($123>>>0)<($$0205>>>0);
   if ($124) {
    $$0204215 = $123;
   } else {
    break;
   }
  }
 }
 $brmerge$demorgan = $36 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $92 = (__ZNK5Image4colsEi($17,$7)|0);
 $93 = ($$0205>>>0)<($92>>>0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = (($8) + -1)|0;
 $$0214 = $$0205;
 while(1) {
  $125 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0214)|0);
  $126 = ($125<<16>>16)==(0);
  if ($126) {
   $127 = (__ZNK5Image4colsEi($17,$7)|0);
   $128 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0214,$127,$13)|0);
   __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0214,$128);
  } else {
   $129 = HEAP32[$2>>2]|0;
   $130 = (($129) + (($94*104)|0)|0);
   $131 = (__ZNK5ImageclEiijj($130,0,$7,$9,$$0214)|0);
   __ZN5Image3setEiijjs($17,0,$7,$9,$$0214,$131);
  }
  $132 = (($$0214) + 2)|0;
  $133 = (__ZNK5Image4colsEi($17,$7)|0);
  $134 = ($132>>>0)<($133>>>0);
  if ($134) {
   $$0214 = $132;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE13ConstantPlaneLi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0202 = 0, $$0202 = 0, $$0203 = 0, $$0204215 = 0, $$0205 = 0, $$0206218 = 0, $$0214 = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $or$cond = 0, $or$cond209 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,1)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 do {
  if ($36) {
   $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $38 = Math_imul($37, $9)|0;
   $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $44 = (($42>>>0) / ($43>>>0))&-1;
   $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $46 = Math_imul($45, $9)|0;
   $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + -1)|0;
   $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $53 = (($51>>>0) / ($52>>>0))&-1;
   $54 = (($53) + 1)|0;
   $55 = $54 | 1;
   $56 = ($44>>>0)>(1);
   $57 = $44 & 1;
   $58 = ($57|0)==(0);
   $or$cond = $56 & $58;
   $59 = $or$cond << 31 >> 31;
   $$0202 = (($59) + ($44))|0;
   $60 = ($$0202|0)==(0);
   $$$0202 = $60 ? 1 : $$0202;
   if (!($10)) {
    $72 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $73 = (__ZNK5Image8getscaleEv($17)|0);
    $74 = $72 >>> $73;
    $75 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $76 = (__ZNK5Image8getscaleEv($17)|0);
    $77 = $75 >>> $76;
    $78 = (($8) + -1)|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = (($79) + (($78*104)|0)|0);
    $81 = (__ZN5Image8getPlaneEi($80,1)|0);
    $82 = Math_imul($77, $9)|0;
    $83 = Math_imul($74, $$$0202)|0;
    $84 = $74 << 1;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$81,$82,$74,$83,$84);
    $85 = HEAP32[$2>>2]|0;
    $86 = (($85) + (($78*104)|0)|0);
    $87 = (__ZN5Image8getPlaneEi($86,1)|0);
    $88 = Math_imul($74, $55)|0;
    $89 = (__ZNK5Image4colsEi($17,$7)|0);
    $90 = Math_imul($89, $74)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$87,$82,$88,$90,$84);
    $$0205 = $55;$$2 = $$$0202;
    break;
   }
   $61 = ($$$0202>>>0)>(1);
   if ($61) {
    $62 = (($8) + -1)|0;
    $$0206218 = 1;
    while(1) {
     $63 = (__ZNK13ConstantPlane3getEijj($4,$7,$9,$$0206218)|0);
     $64 = ($63<<16>>16)==(0);
     if ($64) {
      $65 = (__ZNK5Image4colsEi($17,$7)|0);
      $66 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0206218,$65,$13)|0);
      __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0206218,$66);
     } else {
      $67 = HEAP32[$2>>2]|0;
      $68 = (($67) + (($62*104)|0)|0);
      $69 = (__ZNK5ImageclEiijj($68,1,$7,$9,$$0206218)|0);
      __ZN5Image3setEiijjs($17,1,$7,$9,$$0206218,$69);
     }
     $70 = (($$0206218) + 2)|0;
     $71 = ($70>>>0)<($$$0202>>>0);
     if ($71) {
      $$0206218 = $70;
     } else {
      $$0205 = $55;$$2 = $$$0202;
      break;
     }
    }
   } else {
    $$0205 = $55;$$2 = $$$0202;
   }
  } else {
   $$0205 = $18;$$2 = 1;
  }
 } while(0);
 $91 = ($$2>>>0)<($$0205>>>0);
 if ($91) {
  $$0204215 = $$2;
  while(1) {
   if ($10) {
    $95 = (__ZNK13ConstantPlane8get_fastEjj($4,$9,$$0204215)|0);
    $96 = ($95<<16>>16)==(0);
    if ($96) {
     $97 = (__ZNK5Image4colsEi($17,$7)|0);
     $98 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0204215,$97,$13)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$98);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $100 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
       $101 = ($100<<16>>16)>(0);
       if ($101) {
        $102 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0204215)|0);
        $103 = $102 << 16 >> 16;
        $104 = (($8) - ($103))|0;
        $105 = HEAP32[$2>>2]|0;
        $106 = (($105) + (($104*104)|0)|0);
        $107 = (__ZNK5ImageclEiijj($106,1,$7,$9,$$0204215)|0);
        __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$107);
        break L24;
       } else {
        $108 = (__Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
        $109 = HEAP16[$15>>1]|0;
        $110 = ($108<<16>>16)>($109<<16>>16);
        $111 = HEAP16[$14>>1]|0;
        $112 = ($108<<16>>16)<($111<<16>>16);
        $or$cond209 = $110 | $112;
        $$ = $or$cond209 ? $111 : $108;
        $$0203 = $$;
        break;
       }
      } else {
       $99 = (__Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb0ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0204215,$14,$15,$12)|0);
       $$0203 = $99;
      }
     } while(0);
     $113 = HEAP16[$14>>1]|0;
     $114 = $113 << 16 >> 16;
     $115 = $$0203 << 16 >> 16;
     $116 = (($114) - ($115))|0;
     $117 = HEAP16[$15>>1]|0;
     $118 = $117 << 16 >> 16;
     $119 = (($118) - ($115))|0;
     $120 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$116,$119)|0);
     $121 = (($120) + ($115))|0;
     $122 = $121&65535;
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0204215,$122);
    }
   } while(0);
   $123 = (($$0204215) + 2)|0;
   $124 = ($123>>>0)<($$0205>>>0);
   if ($124) {
    $$0204215 = $123;
   } else {
    break;
   }
  }
 }
 $brmerge$demorgan = $36 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $92 = (__ZNK5Image4colsEi($17,$7)|0);
 $93 = ($$0205>>>0)<($92>>>0);
 if (!($93)) {
  STACKTOP = sp;return;
 }
 $94 = (($8) + -1)|0;
 $$0214 = $$0205;
 while(1) {
  $125 = (__ZNK13ConstantPlane3getEijj($4,$7,$9,$$0214)|0);
  $126 = ($125<<16>>16)==(0);
  if ($126) {
   $127 = (__ZNK5Image4colsEi($17,$7)|0);
   $128 = (__Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0214,$127,$13)|0);
   __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0214,$128);
  } else {
   $129 = HEAP32[$2>>2]|0;
   $130 = (($129) + (($94*104)|0)|0);
   $131 = (__ZNK5ImageclEiijj($130,1,$7,$9,$$0214)|0);
   __ZN5Image3setEiijjs($17,1,$7,$9,$$0214,$131);
  }
  $132 = (($$0214) + 2)|0;
  $133 = (__ZNK5Image4colsEi($17,$7)|0);
  $134 = ($132>>>0)<($133>>>0);
  if ($134) {
   $$0214 = $132;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li3E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$0128 = 0, $$0129135 = 0, $$0130 = 0, $$2 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $or$cond133 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,3)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 if ($36) {
  $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $38 = Math_imul($37, $9)|0;
  $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $44 = (($42>>>0) / ($43>>>0))&-1;
  $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $46 = Math_imul($45, $9)|0;
  $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($46<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -1)|0;
  $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $53 = (($51>>>0) / ($52>>>0))&-1;
  $54 = (($53) + 1)|0;
  $55 = $54 | 1;
  $56 = ($44>>>0)>(1);
  $57 = $44 & 1;
  $58 = ($57|0)==(0);
  $or$cond = $56 & $58;
  $59 = $or$cond << 31 >> 31;
  $$0 = (($59) + ($44))|0;
  $60 = ($$0|0)==(0);
  $$$0 = $60 ? 1 : $$0;
  $61 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $62 = (__ZNK5Image8getscaleEv($17)|0);
  $63 = $61 >>> $62;
  $64 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $65 = (__ZNK5Image8getscaleEv($17)|0);
  $66 = $64 >>> $65;
  $67 = (($8) + -1)|0;
  $68 = HEAP32[$2>>2]|0;
  $69 = (($68) + (($67*104)|0)|0);
  $70 = (__ZN5Image8getPlaneEi($69,3)|0);
  $71 = Math_imul($66, $9)|0;
  $72 = Math_imul($63, $$$0)|0;
  $73 = $63 << 1;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$70,$71,$63,$72,$73);
  $74 = HEAP32[$2>>2]|0;
  $75 = (($74) + (($67*104)|0)|0);
  $76 = (__ZN5Image8getPlaneEi($75,3)|0);
  $77 = Math_imul($63, $55)|0;
  $78 = (__ZNK5Image4colsEi($17,$7)|0);
  $79 = Math_imul($78, $63)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$76,$71,$77,$79,$73);
  $$0130 = $55;$$2 = $$$0;
 } else {
  $$0130 = $18;$$2 = 1;
 }
 $80 = ($$2>>>0)<($$0130>>>0);
 if ($80) {
  $$0129135 = $$2;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  do {
   if ($11) {
    $82 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0129135)|0);
    $83 = ($82<<16>>16)>(0);
    if ($83) {
     $84 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0129135)|0);
     $85 = $84 << 16 >> 16;
     $86 = (($8) - ($85))|0;
     $87 = HEAP32[$2>>2]|0;
     $88 = (($87) + (($86*104)|0)|0);
     $89 = (__ZNK5ImageclEiijj($88,3,$7,$9,$$0129135)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0129135,$89);
     break;
    } else {
     $90 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0129135,$14,$15,$12)|0);
     $91 = HEAP16[$15>>1]|0;
     $92 = ($90<<16>>16)>($91<<16>>16);
     $93 = HEAP16[$14>>1]|0;
     $94 = ($90<<16>>16)<($93<<16>>16);
     $or$cond133 = $92 | $94;
     $$ = $or$cond133 ? $93 : $90;
     $$0128 = $$;
     label = 11;
     break;
    }
   } else {
    $81 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0129135,$14,$15,$12)|0);
    $$0128 = $81;
    label = 11;
   }
  } while(0);
  if ((label|0) == 11) {
   label = 0;
   $95 = HEAP16[$14>>1]|0;
   $96 = $95 << 16 >> 16;
   $97 = $$0128 << 16 >> 16;
   $98 = (($96) - ($97))|0;
   $99 = HEAP16[$15>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = (($100) - ($97))|0;
   $102 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$98,$101)|0);
   $103 = (($102) + ($97))|0;
   $104 = $103&65535;
   __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0129135,$104);
  }
  $105 = (($$0129135) + 2)|0;
  $106 = ($105>>>0)<($$0130>>>0);
  if ($106) {
   $$0129135 = $105;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z36flif_decode_plane_zoomlevel_verticalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li4E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$$0 = 0, $$0 = 0, $$084 = 0, $$08590 = 0, $$086 = 0, $$2 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $or$cond = 0, $or$cond89 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,4)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  $35 = $24 << 1;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,$24,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = ($8|0)>(0);
 if ($36) {
  $37 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $38 = Math_imul($37, $9)|0;
  $39 = (((($16) + (($8*104)|0)|0)) + 60|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($38<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $44 = (($42>>>0) / ($43>>>0))&-1;
  $45 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $46 = Math_imul($45, $9)|0;
  $47 = (((($16) + (($8*104)|0)|0)) + 72|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($46<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -1)|0;
  $52 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $53 = (($51>>>0) / ($52>>>0))&-1;
  $54 = (($53) + 1)|0;
  $55 = $54 | 1;
  $56 = ($44>>>0)>(1);
  $57 = $44 & 1;
  $58 = ($57|0)==(0);
  $or$cond = $56 & $58;
  $59 = $or$cond << 31 >> 31;
  $$0 = (($59) + ($44))|0;
  $60 = ($$0|0)==(0);
  $$$0 = $60 ? 1 : $$0;
  $$086 = $55;$$2 = $$$0;
 } else {
  $$086 = $18;$$2 = 1;
 }
 $61 = ($$2>>>0)<($$086>>>0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $62 = $8&65535;
 $$08590 = $$2;
 while(1) {
  $63 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb0ELb0ELi4E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$08590,$14,$15,$12)|0);
  if ($11) {
   $64 = HEAP16[$15>>1]|0;
   $65 = $64 << 16 >> 16;
   $66 = ($65|0)>($8|0);
   if ($66) {
    HEAP16[$15>>1] = $62;
   }
   $67 = HEAP16[$15>>1]|0;
   $68 = ($63<<16>>16)>($67<<16>>16);
   $69 = HEAP16[$14>>1]|0;
   $70 = ($63<<16>>16)<($69<<16>>16);
   $or$cond89 = $68 | $70;
   $$ = $or$cond89 ? $69 : $63;
   $$084 = $$;
  } else {
   $$084 = $63;
  }
  $71 = HEAP16[$14>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $$084 << 16 >> 16;
  $74 = (($72) - ($73))|0;
  $75 = HEAP16[$15>>1]|0;
  $76 = $75 << 16 >> 16;
  $77 = (($76) - ($73))|0;
  $78 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$74,$77)|0);
  $79 = (($78) + ($73))|0;
  $80 = $79&65535;
  __ZN5PlaneIhE8set_fastEjjs($0,$9,$$08590,$80);
  $81 = (($$08590) + 2)|0;
  $82 = ($81>>>0)<($$086>>>0);
  if ($82) {
   $$08590 = $81;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z22predict_plane_verticalI5PlaneIhEEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = (($4) + -1)|0;
 $9 = (__ZNK5PlaneIhE3getEijj($0,$1,$3,$8)|0);
 $10 = (($4) + 1)|0;
 $11 = ($10>>>0)<($5>>>0);
 if ($11) {
  $12 = (__ZNK5PlaneIhE3getEijj($0,$1,$3,$10)|0);
  $15 = $12;
 } else {
  $15 = $9;
 }
 switch ($6|0) {
 case 0:  {
  $13 = $9 << 16 >> 16;
  $14 = $15 << 16 >> 16;
  $16 = (($14) + ($13))|0;
  $17 = $16 >>> 1;
  $18 = $17&65535;
  $$1 = $18;
  return ($$1|0);
  break;
 }
 case 1:  {
  $19 = $9 << 16 >> 16;
  $20 = $15 << 16 >> 16;
  $21 = (($20) + ($19))|0;
  $22 = $21 >>> 1;
  $23 = $22&65535;
  $24 = ($3|0)!=(0);
  if ($24) {
   $25 = (($3) + -1)|0;
   $26 = (__ZNK5PlaneIhE3getEijj($0,$1,$25,$4)|0);
   $27 = (($3) + -1)|0;
   $28 = (__ZNK5PlaneIhE3getEijj($0,$1,$27,$8)|0);
   $brmerge$demorgan = $24 & $11;
   if ($brmerge$demorgan) {
    $29 = (__ZNK5PlaneIhE3getEijj($0,$1,$25,$10)|0);
    $31 = $26;$33 = $28;$39 = $29;
   } else {
    $31 = $26;$33 = $28;$39 = $26;
   }
  } else {
   $31 = $9;$33 = $9;$39 = $9;
  }
  $30 = $31 << 16 >> 16;
  $32 = $33&65535;
  $34 = (($19) - ($32))|0;
  $35 = (($34) + ($30))|0;
  $36 = $35&65535;
  $37 = (($30) + ($20))|0;
  $38 = $39&65535;
  $40 = (($37) - ($38))|0;
  $41 = $40&65535;
  $42 = (__Z7median3IsET_S0_S0_S0_($23,$36,$41)|0);
  $$1 = $42;
  return ($$1|0);
  break;
 }
 default: {
  $43 = ($3|0)==(0);
  if ($43) {
   $46 = $9;
  } else {
   $44 = (($3) + -1)|0;
   $45 = (__ZNK5PlaneIhE3getEijj($0,$1,$44,$4)|0);
   $46 = $45;
  }
  $47 = (__Z7median3IsET_S0_S0_S0_($46,$9,$15)|0);
  $$1 = $47;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesEC2ERS5_RNSt3__26vectorI5ImageNSB_9allocatorISD_EEEEPKS8_RNSC_IsNSE_IsEEEEibbiii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorC2Ev($0);
 HEAP32[$0>>2] = (2600);
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = $4;
 $15 = ((($0)) + 20|0);
 HEAP32[$15>>2] = $5;
 $16 = ((($0)) + 24|0);
 $17 = $6&1;
 HEAP8[$16>>0] = $17;
 $18 = ((($0)) + 25|0);
 $19 = $7&1;
 HEAP8[$18>>0] = $19;
 $20 = ((($0)) + 28|0);
 $21 = ((($0)) + 44|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;
 HEAP32[$21>>2] = $8;
 $22 = ((($0)) + 48|0);
 HEAP32[$22>>2] = $9;
 $23 = ((($0)) + 52|0);
 HEAP32[$23>>2] = $10;
 return;
}
function __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE11prepare_rowEjiPKS7_SB_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 32|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($0)) + 40|0);
 HEAP32[$8>>2] = $4;
 return;
}
function __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $$pr5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 24|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  $26 = ((($0)) + 25|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)!=(0);
  $29 = ((($0)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li0E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$6,$8,$10,$12,$14,$16,$18,$20,$22,$25,$28,$30,$32);
  $$pr = HEAP32[$2>>2]|0;
  $33 = $$pr;
 } else {
  $33 = $3;
 }
 $34 = ($33|0)==(1);
 if ($34) {
  $35 = ((($0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ((($0)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($0)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($0)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($0)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($0)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($0)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($0)) + 24|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)!=(0);
  $52 = ((($0)) + 25|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = ($53<<24>>24)!=(0);
  $55 = ((($0)) + 44|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($0)) + 48|0);
  $58 = HEAP32[$57>>2]|0;
  __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE13ConstantPlaneLi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$36,$38,$40,2576,2584,$42,$44,$46,$48,$51,$54,$56,$58);
 }
 $59 = HEAP32[$2>>2]|0;
 $60 = ($59|0)==(3);
 if ($60) {
  $61 = ((($0)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($0)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($0)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($0)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($0)) + 40|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ((($0)) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($0)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($0)) + 32|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($0)) + 28|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($0)) + 24|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = ($80<<24>>24)!=(0);
  $82 = ((($0)) + 25|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = ($83<<24>>24)!=(0);
  $85 = ((($0)) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($0)) + 48|0);
  $88 = HEAP32[$87>>2]|0;
  __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li3E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$62,$64,$66,$68,$70,$72,$74,$76,$78,$81,$84,$86,$88);
  $$pr5 = HEAP32[$2>>2]|0;
  $89 = $$pr5;
 } else {
  $89 = $59;
 }
 $90 = ($89|0)==(4);
 if (!($90)) {
  return;
 }
 $91 = ((($0)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($0)) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($0)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($0)) + 36|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($0)) + 40|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($0)) + 16|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($0)) + 20|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($0)) + 32|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ((($0)) + 28|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ((($0)) + 24|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = ($110<<24>>24)!=(0);
 $112 = ((($0)) + 25|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)!=(0);
 $115 = ((($0)) + 44|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ((($0)) + 48|0);
 $118 = HEAP32[$117>>2]|0;
 __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li4E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($1,$92,$94,$96,$98,$100,$102,$104,$106,$108,$111,$114,$116,$118);
 return;
}
function __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS6_IsE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($0)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 24|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = ($24<<24>>24)!=(0);
  $26 = ((($0)) + 25|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = ($27<<24>>24)!=(0);
  $29 = ((($0)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 48|0);
  $32 = HEAP32[$31>>2]|0;
  __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$6,$8,$10,$12,$14,$16,$18,$20,$22,$25,$28,$30,$32);
  $$pr = HEAP32[$2>>2]|0;
  $33 = $$pr;
 } else {
  $33 = $3;
 }
 $34 = ($33|0)==(2);
 if (!($34)) {
  return;
 }
 $35 = ((($0)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 12|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($0)) + 20|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($0)) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($0)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($0)) + 24|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ($54<<24>>24)!=(0);
 $56 = ((($0)) + 25|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = ($57<<24>>24)!=(0);
 $59 = ((($0)) + 44|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($0)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi2E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($1,$36,$38,$40,$42,$44,$46,$48,$50,$52,$55,$58,$60,$62);
 return;
}
function __ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesED0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12PlaneVisitorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0197 = 0, $$0198 = 0, $$0199208 = 0, $$0200 = 0, $$0201211 = 0, $$0207 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,1)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 do {
  if ($35) {
   $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $37 = Math_imul($36, $9)|0;
   $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $43 = (($41>>>0) / ($42>>>0))&-1;
   $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $45 = Math_imul($44, $9)|0;
   $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + -1)|0;
   $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $52 = (($50>>>0) / ($51>>>0))&-1;
   $53 = (($52) + 1)|0;
   if (!($10)) {
    $65 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $66 = (__ZNK5Image8getscaleEv($17)|0);
    $67 = $65 >>> $66;
    $68 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $69 = (__ZNK5Image8getscaleEv($17)|0);
    $70 = $68 >>> $69;
    $71 = (($8) + -1)|0;
    $72 = HEAP32[$2>>2]|0;
    $73 = (($72) + (($71*104)|0)|0);
    $74 = (__ZN5Image8getPlaneEi($73,1)|0);
    $75 = Math_imul($70, $9)|0;
    $76 = Math_imul($67, $43)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$74,$75,0,$76,$67);
    $77 = HEAP32[$2>>2]|0;
    $78 = (($77) + (($71*104)|0)|0);
    $79 = (__ZN5Image8getPlaneEi($78,1)|0);
    $80 = Math_imul($67, $53)|0;
    $81 = (__ZNK5Image4colsEi($17,$7)|0);
    $82 = Math_imul($81, $67)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$79,$75,$80,$82,$67);
    $$0197 = $43;$$0200 = $53;
    break;
   }
   $54 = ($42>>>0)>($41>>>0);
   if ($54) {
    $$0197 = $43;$$0200 = $53;
   } else {
    $55 = (($8) + -1)|0;
    $$0201211 = 0;
    while(1) {
     $56 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0201211)|0);
     $57 = ($56<<16>>16)==(0);
     if ($57) {
      $58 = (__ZNK5Image4rowsEi($17,$7)|0);
      $59 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0201211,$58,$13)|0);
      __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0201211,$59);
     } else {
      $60 = HEAP32[$2>>2]|0;
      $61 = (($60) + (($55*104)|0)|0);
      $62 = (__ZNK5ImageclEiijj($61,1,$7,$9,$$0201211)|0);
      __ZN5Image3setEiijjs($17,1,$7,$9,$$0201211,$62);
     }
     $63 = (($$0201211) + 1)|0;
     $64 = ($63>>>0)<($43>>>0);
     if ($64) {
      $$0201211 = $63;
     } else {
      $$0197 = $43;$$0200 = $53;
      break;
     }
    }
   }
  } else {
   $$0197 = 0;$$0200 = $18;
  }
 } while(0);
 $83 = ($$0197>>>0)<($$0200>>>0);
 if ($83) {
  $$0199208 = $$0197;
  while(1) {
   if ($10) {
    $87 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0199208)|0);
    $88 = ($87<<16>>16)==(0);
    if ($88) {
     $89 = (__ZNK5Image4rowsEi($17,$7)|0);
     $90 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0199208,$89,$13)|0);
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$90);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $92 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
       $93 = ($92<<16>>16)>(0);
       if ($93) {
        $94 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
        $95 = $94 << 16 >> 16;
        $96 = (($8) - ($95))|0;
        $97 = HEAP32[$2>>2]|0;
        $98 = (($97) + (($96*104)|0)|0);
        $99 = (__ZNK5ImageclEiijj($98,1,$7,$9,$$0199208)|0);
        __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$99);
        break L24;
       } else {
        $100 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
        $101 = HEAP16[$15>>1]|0;
        $102 = ($100<<16>>16)>($101<<16>>16);
        $103 = HEAP16[$14>>1]|0;
        $104 = ($100<<16>>16)<($103<<16>>16);
        $or$cond = $102 | $104;
        $$ = $or$cond ? $103 : $100;
        $$0198 = $$;
        break;
       }
      } else {
       $91 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
       $$0198 = $91;
      }
     } while(0);
     $105 = HEAP16[$14>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = $$0198 << 16 >> 16;
     $108 = (($106) - ($107))|0;
     $109 = HEAP16[$15>>1]|0;
     $110 = $109 << 16 >> 16;
     $111 = (($110) - ($107))|0;
     $112 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$108,$111)|0);
     $113 = (($112) + ($107))|0;
     $114 = $113&65535;
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$114);
    }
   } while(0);
   $115 = (($$0199208) + 1)|0;
   $exitcond = ($115|0)==($$0200|0);
   if ($exitcond) {
    break;
   } else {
    $$0199208 = $115;
   }
  }
 }
 $brmerge$demorgan = $35 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $84 = (__ZNK5Image4colsEi($17,$7)|0);
 $85 = ($$0200>>>0)<($84>>>0);
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = (($8) + -1)|0;
 $$0207 = $$0200;
 while(1) {
  $116 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0207)|0);
  $117 = ($116<<16>>16)==(0);
  if ($117) {
   $118 = (__ZNK5Image4rowsEi($17,$7)|0);
   $119 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,1,$9,$$0207,$118,$13)|0);
   __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0207,$119);
  } else {
   $120 = HEAP32[$2>>2]|0;
   $121 = (($120) + (($86*104)|0)|0);
   $122 = (__ZNK5ImageclEiijj($121,1,$7,$9,$$0207)|0);
   __ZN5Image3setEiijjs($17,1,$7,$9,$$0207,$122);
  }
  $123 = (($$0207) + 1)|0;
  $124 = (__ZNK5Image4colsEi($17,$7)|0);
  $125 = ($123>>>0)<($124>>>0);
  if ($125) {
   $$0207 = $123;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIsES6_IhELi2E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0197 = 0, $$0198 = 0, $$0199208 = 0, $$0200 = 0, $$0201211 = 0, $$0207 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,2)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 do {
  if ($35) {
   $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $37 = Math_imul($36, $9)|0;
   $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $43 = (($41>>>0) / ($42>>>0))&-1;
   $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $45 = Math_imul($44, $9)|0;
   $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + -1)|0;
   $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $52 = (($50>>>0) / ($51>>>0))&-1;
   $53 = (($52) + 1)|0;
   if (!($10)) {
    $65 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $66 = (__ZNK5Image8getscaleEv($17)|0);
    $67 = $65 >>> $66;
    $68 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $69 = (__ZNK5Image8getscaleEv($17)|0);
    $70 = $68 >>> $69;
    $71 = (($8) + -1)|0;
    $72 = HEAP32[$2>>2]|0;
    $73 = (($72) + (($71*104)|0)|0);
    $74 = (__ZN5Image8getPlaneEi($73,2)|0);
    $75 = Math_imul($70, $9)|0;
    $76 = Math_imul($67, $43)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$74,$75,0,$76,$67);
    $77 = HEAP32[$2>>2]|0;
    $78 = (($77) + (($71*104)|0)|0);
    $79 = (__ZN5Image8getPlaneEi($78,2)|0);
    $80 = Math_imul($67, $53)|0;
    $81 = (__ZNK5Image4colsEi($17,$7)|0);
    $82 = Math_imul($81, $67)|0;
    __Z14copy_row_rangeI5PlaneIsEEvRT_RK12GeneralPlanejjjj($0,$79,$75,$80,$82,$67);
    $$0197 = $43;$$0200 = $53;
    break;
   }
   $54 = ($42>>>0)>($41>>>0);
   if ($54) {
    $$0197 = $43;$$0200 = $53;
   } else {
    $55 = (($8) + -1)|0;
    $$0201211 = 0;
    while(1) {
     $56 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0201211)|0);
     $57 = ($56<<16>>16)==(0);
     if ($57) {
      $58 = (__ZNK5Image4rowsEi($17,$7)|0);
      $59 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0201211,$58,$13)|0);
      __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0201211,$59);
     } else {
      $60 = HEAP32[$2>>2]|0;
      $61 = (($60) + (($55*104)|0)|0);
      $62 = (__ZNK5ImageclEiijj($61,2,$7,$9,$$0201211)|0);
      __ZN5Image3setEiijjs($17,2,$7,$9,$$0201211,$62);
     }
     $63 = (($$0201211) + 1)|0;
     $64 = ($63>>>0)<($43>>>0);
     if ($64) {
      $$0201211 = $63;
     } else {
      $$0197 = $43;$$0200 = $53;
      break;
     }
    }
   }
  } else {
   $$0197 = 0;$$0200 = $18;
  }
 } while(0);
 $83 = ($$0197>>>0)<($$0200>>>0);
 if ($83) {
  $$0199208 = $$0197;
  while(1) {
   if ($10) {
    $87 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0199208)|0);
    $88 = ($87<<16>>16)==(0);
    if ($88) {
     $89 = (__ZNK5Image4rowsEi($17,$7)|0);
     $90 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0199208,$89,$13)|0);
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$90);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $92 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
       $93 = ($92<<16>>16)>(0);
       if ($93) {
        $94 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
        $95 = $94 << 16 >> 16;
        $96 = (($8) - ($95))|0;
        $97 = HEAP32[$2>>2]|0;
        $98 = (($97) + (($96*104)|0)|0);
        $99 = (__ZNK5ImageclEiijj($98,2,$7,$9,$$0199208)|0);
        __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$99);
        break L24;
       } else {
        $100 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
        $101 = HEAP16[$15>>1]|0;
        $102 = ($100<<16>>16)>($101<<16>>16);
        $103 = HEAP16[$14>>1]|0;
        $104 = ($100<<16>>16)<($103<<16>>16);
        $or$cond = $102 | $104;
        $$ = $or$cond ? $103 : $100;
        $$0198 = $$;
        break;
       }
      } else {
       $91 = (__Z27predict_and_calcProps_planeI5PlaneIsES0_IhELb1ELb0ELi2E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
       $$0198 = $91;
      }
     } while(0);
     $105 = HEAP16[$14>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = $$0198 << 16 >> 16;
     $108 = (($106) - ($107))|0;
     $109 = HEAP16[$15>>1]|0;
     $110 = $109 << 16 >> 16;
     $111 = (($110) - ($107))|0;
     $112 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$108,$111)|0);
     $113 = (($112) + ($107))|0;
     $114 = $113&65535;
     __ZN5PlaneIsE8set_fastEjjs($0,$9,$$0199208,$114);
    }
   } while(0);
   $115 = (($$0199208) + 1)|0;
   $exitcond = ($115|0)==($$0200|0);
   if ($exitcond) {
    break;
   } else {
    $$0199208 = $115;
   }
  }
 }
 $brmerge$demorgan = $35 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $84 = (__ZNK5Image4colsEi($17,$7)|0);
 $85 = ($$0200>>>0)<($84>>>0);
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = (($8) + -1)|0;
 $$0207 = $$0200;
 while(1) {
  $116 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0207)|0);
  $117 = ($116<<16>>16)==(0);
  if ($117) {
   $118 = (__ZNK5Image4rowsEi($17,$7)|0);
   $119 = (__Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$7,2,$9,$$0207,$118,$13)|0);
   __ZN5PlaneIsE3setEijjs($0,$7,$9,$$0207,$119);
  } else {
   $120 = HEAP32[$2>>2]|0;
   $121 = (($120) + (($86*104)|0)|0);
   $122 = (__ZNK5ImageclEiijj($121,2,$7,$9,$$0207)|0);
   __ZN5Image3setEiijjs($17,2,$7,$9,$$0207,$122);
  }
  $123 = (($$0207) + 1)|0;
  $124 = (__ZNK5Image4colsEi($17,$7)|0);
  $125 = ($123>>>0)<($124>>>0);
  if ($125) {
   $$0207 = $123;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z24predict_plane_horizontalI5PlaneIsEEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = (($3) + -1)|0;
 $9 = (__ZNK5PlaneIsE3getEijj($0,$1,$8,$4)|0);
 $10 = (($3) + 1)|0;
 $11 = ($10>>>0)<($5>>>0);
 if ($11) {
  $12 = (__ZNK5PlaneIsE3getEijj($0,$1,$10,$4)|0);
  $15 = $12;
 } else {
  $15 = $9;
 }
 switch ($6|0) {
 case 0:  {
  $13 = $9 << 16 >> 16;
  $14 = $15 << 16 >> 16;
  $16 = (($14) + ($13))|0;
  $17 = $16 >>> 1;
  $18 = $17&65535;
  $$1 = $18;
  return ($$1|0);
  break;
 }
 case 1:  {
  $19 = $9 << 16 >> 16;
  $20 = $15 << 16 >> 16;
  $21 = (($20) + ($19))|0;
  $22 = $21 >>> 1;
  $23 = $22&65535;
  $24 = ($4|0)!=(0);
  if ($24) {
   $25 = (($4) + -1)|0;
   $26 = (__ZNK5PlaneIsE3getEijj($0,$1,$3,$25)|0);
   $27 = (($4) + -1)|0;
   $28 = (__ZNK5PlaneIsE3getEijj($0,$1,$8,$27)|0);
   $brmerge$demorgan = $24 & $11;
   if ($brmerge$demorgan) {
    $29 = (__ZNK5PlaneIsE3getEijj($0,$1,$10,$25)|0);
    $31 = $26;$33 = $28;$39 = $29;
   } else {
    $31 = $26;$33 = $28;$39 = $26;
   }
  } else {
   $31 = $9;$33 = $9;$39 = $9;
  }
  $30 = $31 << 16 >> 16;
  $32 = $33&65535;
  $34 = (($19) - ($32))|0;
  $35 = (($34) + ($30))|0;
  $36 = $35&65535;
  $37 = (($30) + ($20))|0;
  $38 = $39&65535;
  $40 = (($37) - ($38))|0;
  $41 = $40&65535;
  $42 = (__Z7median3IsET_S0_S0_S0_($23,$36,$41)|0);
  $$1 = $42;
  return ($$1|0);
  break;
 }
 default: {
  $43 = ($4|0)==(0);
  if ($43) {
   $46 = $9;
  } else {
   $44 = (($4) + -1)|0;
   $45 = (__ZNK5PlaneIsE3getEijj($0,$1,$3,$44)|0);
   $46 = $45;
  }
  $47 = (__Z7median3IsET_S0_S0_S0_($9,$15,$46)|0);
  $$1 = $47;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li0E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0197 = 0, $$0198 = 0, $$0199208 = 0, $$0200 = 0, $$0201211 = 0, $$0207 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,0)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 do {
  if ($35) {
   $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $37 = Math_imul($36, $9)|0;
   $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $43 = (($41>>>0) / ($42>>>0))&-1;
   $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $45 = Math_imul($44, $9)|0;
   $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + -1)|0;
   $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $52 = (($50>>>0) / ($51>>>0))&-1;
   $53 = (($52) + 1)|0;
   if (!($10)) {
    $65 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $66 = (__ZNK5Image8getscaleEv($17)|0);
    $67 = $65 >>> $66;
    $68 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $69 = (__ZNK5Image8getscaleEv($17)|0);
    $70 = $68 >>> $69;
    $71 = (($8) + -1)|0;
    $72 = HEAP32[$2>>2]|0;
    $73 = (($72) + (($71*104)|0)|0);
    $74 = (__ZN5Image8getPlaneEi($73,0)|0);
    $75 = Math_imul($70, $9)|0;
    $76 = Math_imul($67, $43)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$74,$75,0,$76,$67);
    $77 = HEAP32[$2>>2]|0;
    $78 = (($77) + (($71*104)|0)|0);
    $79 = (__ZN5Image8getPlaneEi($78,0)|0);
    $80 = Math_imul($67, $53)|0;
    $81 = (__ZNK5Image4colsEi($17,$7)|0);
    $82 = Math_imul($81, $67)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$79,$75,$80,$82,$67);
    $$0197 = $43;$$0200 = $53;
    break;
   }
   $54 = ($42>>>0)>($41>>>0);
   if ($54) {
    $$0197 = $43;$$0200 = $53;
   } else {
    $55 = (($8) + -1)|0;
    $$0201211 = 0;
    while(1) {
     $56 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0201211)|0);
     $57 = ($56<<16>>16)==(0);
     if ($57) {
      $58 = (__ZNK5Image4rowsEi($17,$7)|0);
      $59 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0201211,$58,$13)|0);
      __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0201211,$59);
     } else {
      $60 = HEAP32[$2>>2]|0;
      $61 = (($60) + (($55*104)|0)|0);
      $62 = (__ZNK5ImageclEiijj($61,0,$7,$9,$$0201211)|0);
      __ZN5Image3setEiijjs($17,0,$7,$9,$$0201211,$62);
     }
     $63 = (($$0201211) + 1)|0;
     $64 = ($63>>>0)<($43>>>0);
     if ($64) {
      $$0201211 = $63;
     } else {
      $$0197 = $43;$$0200 = $53;
      break;
     }
    }
   }
  } else {
   $$0197 = 0;$$0200 = $18;
  }
 } while(0);
 $83 = ($$0197>>>0)<($$0200>>>0);
 if ($83) {
  $$0199208 = $$0197;
  while(1) {
   if ($10) {
    $87 = (__ZNK5PlaneIhE8get_fastEjj($4,$9,$$0199208)|0);
    $88 = ($87<<16>>16)==(0);
    if ($88) {
     $89 = (__ZNK5Image4rowsEi($17,$7)|0);
     $90 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0199208,$89,$13)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$90);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $92 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
       $93 = ($92<<16>>16)>(0);
       if ($93) {
        $94 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
        $95 = $94 << 16 >> 16;
        $96 = (($8) - ($95))|0;
        $97 = HEAP32[$2>>2]|0;
        $98 = (($97) + (($96*104)|0)|0);
        $99 = (__ZNK5ImageclEiijj($98,0,$7,$9,$$0199208)|0);
        __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$99);
        break L24;
       } else {
        $100 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
        $101 = HEAP16[$15>>1]|0;
        $102 = ($100<<16>>16)>($101<<16>>16);
        $103 = HEAP16[$14>>1]|0;
        $104 = ($100<<16>>16)<($103<<16>>16);
        $or$cond = $102 | $104;
        $$ = $or$cond ? $103 : $100;
        $$0198 = $$;
        break;
       }
      } else {
       $91 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi0E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
       $$0198 = $91;
      }
     } while(0);
     $105 = HEAP16[$14>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = $$0198 << 16 >> 16;
     $108 = (($106) - ($107))|0;
     $109 = HEAP16[$15>>1]|0;
     $110 = $109 << 16 >> 16;
     $111 = (($110) - ($107))|0;
     $112 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$108,$111)|0);
     $113 = (($112) + ($107))|0;
     $114 = $113&65535;
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$114);
    }
   } while(0);
   $115 = (($$0199208) + 1)|0;
   $exitcond = ($115|0)==($$0200|0);
   if ($exitcond) {
    break;
   } else {
    $$0199208 = $115;
   }
  }
 }
 $brmerge$demorgan = $35 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $84 = (__ZNK5Image4colsEi($17,$7)|0);
 $85 = ($$0200>>>0)<($84>>>0);
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = (($8) + -1)|0;
 $$0207 = $$0200;
 while(1) {
  $116 = (__ZNK5PlaneIhE3getEijj($4,$7,$9,$$0207)|0);
  $117 = ($116<<16>>16)==(0);
  if ($117) {
   $118 = (__ZNK5Image4rowsEi($17,$7)|0);
   $119 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,0,$9,$$0207,$118,$13)|0);
   __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0207,$119);
  } else {
   $120 = HEAP32[$2>>2]|0;
   $121 = (($120) + (($86*104)|0)|0);
   $122 = (__ZNK5ImageclEiijj($121,0,$7,$9,$$0207)|0);
   __ZN5Image3setEiijjs($17,0,$7,$9,$$0207,$122);
  }
  $123 = (($$0207) + 1)|0;
  $124 = (__ZNK5Image4colsEi($17,$7)|0);
  $125 = ($123>>>0)<($124>>>0);
  if ($125) {
   $$0207 = $123;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE13ConstantPlaneLi1E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSE_9allocatorISG_EEEEPKT3_RKT1_SQ_RNSF_IsNSH_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0197 = 0, $$0198 = 0, $$0199208 = 0, $$0200 = 0, $$0201211 = 0, $$0207 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0;
 var $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,1)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 do {
  if ($35) {
   $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $37 = Math_imul($36, $9)|0;
   $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $43 = (($41>>>0) / ($42>>>0))&-1;
   $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
   $45 = Math_imul($44, $9)|0;
   $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + -1)|0;
   $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
   $52 = (($50>>>0) / ($51>>>0))&-1;
   $53 = (($52) + 1)|0;
   if (!($10)) {
    $65 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
    $66 = (__ZNK5Image8getscaleEv($17)|0);
    $67 = $65 >>> $66;
    $68 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
    $69 = (__ZNK5Image8getscaleEv($17)|0);
    $70 = $68 >>> $69;
    $71 = (($8) + -1)|0;
    $72 = HEAP32[$2>>2]|0;
    $73 = (($72) + (($71*104)|0)|0);
    $74 = (__ZN5Image8getPlaneEi($73,1)|0);
    $75 = Math_imul($70, $9)|0;
    $76 = Math_imul($67, $43)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$74,$75,0,$76,$67);
    $77 = HEAP32[$2>>2]|0;
    $78 = (($77) + (($71*104)|0)|0);
    $79 = (__ZN5Image8getPlaneEi($78,1)|0);
    $80 = Math_imul($67, $53)|0;
    $81 = (__ZNK5Image4colsEi($17,$7)|0);
    $82 = Math_imul($81, $67)|0;
    __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$79,$75,$80,$82,$67);
    $$0197 = $43;$$0200 = $53;
    break;
   }
   $54 = ($42>>>0)>($41>>>0);
   if ($54) {
    $$0197 = $43;$$0200 = $53;
   } else {
    $55 = (($8) + -1)|0;
    $$0201211 = 0;
    while(1) {
     $56 = (__ZNK13ConstantPlane3getEijj($4,$7,$9,$$0201211)|0);
     $57 = ($56<<16>>16)==(0);
     if ($57) {
      $58 = (__ZNK5Image4rowsEi($17,$7)|0);
      $59 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0201211,$58,$13)|0);
      __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0201211,$59);
     } else {
      $60 = HEAP32[$2>>2]|0;
      $61 = (($60) + (($55*104)|0)|0);
      $62 = (__ZNK5ImageclEiijj($61,1,$7,$9,$$0201211)|0);
      __ZN5Image3setEiijjs($17,1,$7,$9,$$0201211,$62);
     }
     $63 = (($$0201211) + 1)|0;
     $64 = ($63>>>0)<($43>>>0);
     if ($64) {
      $$0201211 = $63;
     } else {
      $$0197 = $43;$$0200 = $53;
      break;
     }
    }
   }
  } else {
   $$0197 = 0;$$0200 = $18;
  }
 } while(0);
 $83 = ($$0197>>>0)<($$0200>>>0);
 if ($83) {
  $$0199208 = $$0197;
  while(1) {
   if ($10) {
    $87 = (__ZNK13ConstantPlane8get_fastEjj($4,$9,$$0199208)|0);
    $88 = ($87<<16>>16)==(0);
    if ($88) {
     $89 = (__ZNK5Image4rowsEi($17,$7)|0);
     $90 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0199208,$89,$13)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$90);
    } else {
     label = 19;
    }
   } else {
    label = 19;
   }
   L24: do {
    if ((label|0) == 19) {
     label = 0;
     do {
      if ($11) {
       $92 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
       $93 = ($92<<16>>16)>(0);
       if ($93) {
        $94 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0199208)|0);
        $95 = $94 << 16 >> 16;
        $96 = (($8) - ($95))|0;
        $97 = HEAP32[$2>>2]|0;
        $98 = (($97) + (($96*104)|0)|0);
        $99 = (__ZNK5ImageclEiijj($98,1,$7,$9,$$0199208)|0);
        __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$99);
        break L24;
       } else {
        $100 = (__Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
        $101 = HEAP16[$15>>1]|0;
        $102 = ($100<<16>>16)>($101<<16>>16);
        $103 = HEAP16[$14>>1]|0;
        $104 = ($100<<16>>16)<($103<<16>>16);
        $or$cond = $102 | $104;
        $$ = $or$cond ? $103 : $100;
        $$0198 = $$;
        break;
       }
      } else {
       $91 = (__Z27predict_and_calcProps_planeI5PlaneIhE13ConstantPlaneLb1ELb0ELi1E11ColorRangesEsRNSt3__26vectorIsNS4_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSM_i($6,$3,$17,$0,$5,$7,$9,$$0199208,$14,$15,$12)|0);
       $$0198 = $91;
      }
     } while(0);
     $105 = HEAP16[$14>>1]|0;
     $106 = $105 << 16 >> 16;
     $107 = $$0198 << 16 >> 16;
     $108 = (($106) - ($107))|0;
     $109 = HEAP16[$15>>1]|0;
     $110 = $109 << 16 >> 16;
     $111 = (($110) - ($107))|0;
     $112 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$108,$111)|0);
     $113 = (($112) + ($107))|0;
     $114 = $113&65535;
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0199208,$114);
    }
   } while(0);
   $115 = (($$0199208) + 1)|0;
   $exitcond = ($115|0)==($$0200|0);
   if ($exitcond) {
    break;
   } else {
    $$0199208 = $115;
   }
  }
 }
 $brmerge$demorgan = $35 & $10;
 if (!($brmerge$demorgan)) {
  STACKTOP = sp;return;
 }
 $84 = (__ZNK5Image4colsEi($17,$7)|0);
 $85 = ($$0200>>>0)<($84>>>0);
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = (($8) + -1)|0;
 $$0207 = $$0200;
 while(1) {
  $116 = (__ZNK13ConstantPlane3getEijj($4,$7,$9,$$0207)|0);
  $117 = ($116<<16>>16)==(0);
  if ($117) {
   $118 = (__ZNK5Image4rowsEi($17,$7)|0);
   $119 = (__Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$7,1,$9,$$0207,$118,$13)|0);
   __ZN5PlaneIhE3setEijjs($0,$7,$9,$$0207,$119);
  } else {
   $120 = HEAP32[$2>>2]|0;
   $121 = (($120) + (($86*104)|0)|0);
   $122 = (__ZNK5ImageclEiijj($121,1,$7,$9,$$0207)|0);
   __ZN5Image3setEiijjs($17,1,$7,$9,$$0207,$122);
  }
  $123 = (($$0207) + 1)|0;
  $124 = (__ZNK5Image4colsEi($17,$7)|0);
  $125 = ($123>>>0)<($124>>>0);
  if ($125) {
   $$0207 = $123;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li3E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0 = 0, $$0123 = 0, $$0124128 = 0, $$0125 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,3)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 if ($35) {
  $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $37 = Math_imul($36, $9)|0;
  $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $43 = (($41>>>0) / ($42>>>0))&-1;
  $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $45 = Math_imul($44, $9)|0;
  $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -1)|0;
  $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $52 = (($50>>>0) / ($51>>>0))&-1;
  $53 = (($52) + 1)|0;
  $54 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $55 = (__ZNK5Image8getscaleEv($17)|0);
  $56 = $54 >>> $55;
  $57 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $58 = (__ZNK5Image8getscaleEv($17)|0);
  $59 = $57 >>> $58;
  $60 = (($8) + -1)|0;
  $61 = HEAP32[$2>>2]|0;
  $62 = (($61) + (($60*104)|0)|0);
  $63 = (__ZN5Image8getPlaneEi($62,3)|0);
  $64 = Math_imul($59, $9)|0;
  $65 = Math_imul($56, $43)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$63,$64,0,$65,$56);
  $66 = HEAP32[$2>>2]|0;
  $67 = (($66) + (($60*104)|0)|0);
  $68 = (__ZN5Image8getPlaneEi($67,3)|0);
  $69 = Math_imul($56, $53)|0;
  $70 = (__ZNK5Image4colsEi($17,$7)|0);
  $71 = Math_imul($70, $56)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$68,$64,$69,$71,$56);
  $$0 = $43;$$0125 = $53;
 } else {
  $$0 = 0;$$0125 = $18;
 }
 $72 = ($$0>>>0)<($$0125>>>0);
 if ($72) {
  $$0124128 = $$0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  do {
   if ($11) {
    $74 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0124128)|0);
    $75 = ($74<<16>>16)>(0);
    if ($75) {
     $76 = (__ZN5Image6getFRAEjjj($17,$7,$9,$$0124128)|0);
     $77 = $76 << 16 >> 16;
     $78 = (($8) - ($77))|0;
     $79 = HEAP32[$2>>2]|0;
     $80 = (($79) + (($78*104)|0)|0);
     $81 = (__ZNK5ImageclEiijj($80,3,$7,$9,$$0124128)|0);
     __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0124128,$81);
     break;
    } else {
     $82 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0124128,$14,$15,$12)|0);
     $83 = HEAP16[$15>>1]|0;
     $84 = ($82<<16>>16)>($83<<16>>16);
     $85 = HEAP16[$14>>1]|0;
     $86 = ($82<<16>>16)<($85<<16>>16);
     $or$cond = $84 | $86;
     $$ = $or$cond ? $85 : $82;
     $$0123 = $$;
     label = 11;
     break;
    }
   } else {
    $73 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi3E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$0124128,$14,$15,$12)|0);
    $$0123 = $73;
    label = 11;
   }
  } while(0);
  if ((label|0) == 11) {
   label = 0;
   $87 = HEAP16[$14>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = $$0123 << 16 >> 16;
   $90 = (($88) - ($89))|0;
   $91 = HEAP16[$15>>1]|0;
   $92 = $91 << 16 >> 16;
   $93 = (($92) - ($89))|0;
   $94 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$90,$93)|0);
   $95 = (($94) + ($89))|0;
   $96 = $95&65535;
   __ZN5PlaneIhE8set_fastEjjs($0,$9,$$0124128,$96);
  }
  $97 = (($$0124128) + 1)|0;
  $exitcond = ($97|0)==($$0125|0);
  if ($exitcond) {
   break;
  } else {
   $$0124128 = $97;
  }
 }
 STACKTOP = sp;return;
}
function __Z38flif_decode_plane_zoomlevel_horizontalI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhES7_Li4E11ColorRangesEvRT0_RT_RNSt3__26vectorI5ImageNSD_9allocatorISF_EEEEPKT3_RKT1_SP_RNSE_IsNSG_IsEEEEiijbbii($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 $13 = $13|0;
 var $$ = 0, $$0 = 0, $$079 = 0, $$08083 = 0, $$081 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $14 = sp + 2|0;
 $15 = sp;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + (($8*104)|0)|0);
 $18 = (__ZNK5Image4colsEi($17,$7)|0);
 $19 = (((($16) + (($8*104)|0)|0)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)>(-1);
 if ($21) {
  $22 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $23 = (__ZNK5Image8getscaleEv($17)|0);
  $24 = $22 >>> $23;
  $25 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $26 = (__ZNK5Image8getscaleEv($17)|0);
  $27 = $25 >>> $26;
  $28 = HEAP32[$19>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = (($29) + (($28*104)|0)|0);
  $31 = (__ZN5Image8getPlaneEi($30,4)|0);
  $32 = Math_imul($27, $9)|0;
  $33 = (__ZNK5Image4colsEi($17,$7)|0);
  $34 = Math_imul($33, $24)|0;
  __Z14copy_row_rangeI5PlaneIhEEvRT_RK12GeneralPlanejjjj($0,$31,$32,0,$34,$24);
  STACKTOP = sp;return;
 }
 $35 = ($8|0)>(0);
 if ($35) {
  $36 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $37 = Math_imul($36, $9)|0;
  $38 = (((($16) + (($8*104)|0)|0)) + 60|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $43 = (($41>>>0) / ($42>>>0))&-1;
  $44 = (__ZN5Image17zoom_rowpixelsizeEi($7)|0);
  $45 = Math_imul($44, $9)|0;
  $46 = (((($16) + (($8*104)|0)|0)) + 72|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -1)|0;
  $51 = (__ZN5Image17zoom_colpixelsizeEi($7)|0);
  $52 = (($50>>>0) / ($51>>>0))&-1;
  $53 = (($52) + 1)|0;
  $$0 = $43;$$081 = $53;
 } else {
  $$0 = 0;$$081 = $18;
 }
 $54 = ($$0>>>0)<($$081>>>0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $8&65535;
 $$08083 = $$0;
 while(1) {
  $56 = (__Z27predict_and_calcProps_planeI5PlaneIhES1_Lb1ELb0ELi4E11ColorRangesEsRNSt3__26vectorIsNS3_9allocatorIsEEEEPKT4_RK5ImageRKT_RKT0_ijjRsSL_i($6,$3,$17,$0,$5,$7,$9,$$08083,$14,$15,$12)|0);
  if ($11) {
   $57 = HEAP16[$15>>1]|0;
   $58 = $57 << 16 >> 16;
   $59 = ($58|0)>($8|0);
   if ($59) {
    HEAP16[$15>>1] = $55;
   }
   $60 = HEAP16[$15>>1]|0;
   $61 = ($56<<16>>16)>($60<<16>>16);
   $62 = HEAP16[$14>>1]|0;
   $63 = ($56<<16>>16)<($62<<16>>16);
   $or$cond = $61 | $63;
   $$ = $or$cond ? $62 : $56;
   $$079 = $$;
  } else {
   $$079 = $56;
  }
  $64 = HEAP16[$14>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $$079 << 16 >> 16;
  $67 = (($65) - ($66))|0;
  $68 = HEAP16[$15>>1]|0;
  $69 = $68 << 16 >> 16;
  $70 = (($69) - ($66))|0;
  $71 = (__ZN24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE8read_intERKNSt3__26vectorIsNS5_9allocatorIsEEEEii($1,$6,$67,$70)|0);
  $72 = (($71) + ($66))|0;
  $73 = $72&65535;
  __ZN5PlaneIhE8set_fastEjjs($0,$9,$$08083,$73);
  $74 = (($$08083) + 1)|0;
  $exitcond = ($74|0)==($$081|0);
  if ($exitcond) {
   break;
  } else {
   $$08083 = $74;
  }
 }
 STACKTOP = sp;return;
}
function __Z24predict_plane_horizontalI5PlaneIhEEsRKT_iijjji($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $brmerge$demorgan = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($2|0)==(4);
 if ($7) {
  $$1 = 0;
  return ($$1|0);
 }
 $8 = (($3) + -1)|0;
 $9 = (__ZNK5PlaneIhE3getEijj($0,$1,$8,$4)|0);
 $10 = (($3) + 1)|0;
 $11 = ($10>>>0)<($5>>>0);
 if ($11) {
  $12 = (__ZNK5PlaneIhE3getEijj($0,$1,$10,$4)|0);
  $15 = $12;
 } else {
  $15 = $9;
 }
 switch ($6|0) {
 case 0:  {
  $13 = $9 << 16 >> 16;
  $14 = $15 << 16 >> 16;
  $16 = (($14) + ($13))|0;
  $17 = $16 >>> 1;
  $18 = $17&65535;
  $$1 = $18;
  return ($$1|0);
  break;
 }
 case 1:  {
  $19 = $9 << 16 >> 16;
  $20 = $15 << 16 >> 16;
  $21 = (($20) + ($19))|0;
  $22 = $21 >>> 1;
  $23 = $22&65535;
  $24 = ($4|0)!=(0);
  if ($24) {
   $25 = (($4) + -1)|0;
   $26 = (__ZNK5PlaneIhE3getEijj($0,$1,$3,$25)|0);
   $27 = (($4) + -1)|0;
   $28 = (__ZNK5PlaneIhE3getEijj($0,$1,$8,$27)|0);
   $brmerge$demorgan = $24 & $11;
   if ($brmerge$demorgan) {
    $29 = (__ZNK5PlaneIhE3getEijj($0,$1,$10,$25)|0);
    $31 = $26;$33 = $28;$39 = $29;
   } else {
    $31 = $26;$33 = $28;$39 = $26;
   }
  } else {
   $31 = $9;$33 = $9;$39 = $9;
  }
  $30 = $31 << 16 >> 16;
  $32 = $33&65535;
  $34 = (($19) - ($32))|0;
  $35 = (($34) + ($30))|0;
  $36 = $35&65535;
  $37 = (($30) + ($20))|0;
  $38 = $39&65535;
  $40 = (($37) - ($38))|0;
  $41 = $40&65535;
  $42 = (__Z7median3IsET_S0_S0_S0_($23,$36,$41)|0);
  $$1 = $42;
  return ($$1|0);
  break;
 }
 default: {
  $43 = ($4|0)==(0);
  if ($43) {
   $46 = $9;
  } else {
   $44 = (($4) + -1)|0;
   $45 = (__ZNK5PlaneIhE3getEijj($0,$1,$3,$44)|0);
   $46 = $45;
  }
  $47 = (__Z7median3IsET_S0_S0_S0_($9,$15,$46)|0);
  $$1 = $47;
  return ($$1|0);
 }
 }
 return (0)|0;
}
function __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(357913941);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = ($1*12)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*12)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN4TreeC2ERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEEC2ERKS4_($0,$1);
 return;
}
function __ZNSt3__26vectorI4TreeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEEC2ERKS4_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 4;
 $9 = ($8|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$10,$11,$8);
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(268435455);
 if ($4) {
  $5 = (___cxa_allocate_exception(4)|0);
  __ZNSt9bad_allocC2Ev($5);
  ___cxa_throw(($5|0),(864|0),(63|0));
  // unreachable;
 } else {
  $6 = $1 << 4;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + ($1<<4)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  __ZNKSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE14__annotate_newEj($0,0);
  return;
 }
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE18__construct_at_endIPS1_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = $8 >> 4;
  $11 = HEAP32[$5>>2]|0;
  _memcpy(($11|0),($1|0),($8|0))|0;
  $12 = HEAP32[$5>>2]|0;
  $13 = (($12) + ($10<<4)|0);
  HEAP32[$5>>2] = $13;
 }
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 12)&-1;
 $7 = (($2) + (($6*12)|0)|0);
 $8 = (($2) + (($1*12)|0)|0);
 __ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI4TreeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEEC2EjRKS1_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$0>>2] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ($1|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE8allocateEj($0,$1);
 $7 = ((($0)) + 4|0);
 $$0$i = $1;
 while(1) {
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($3,$0,1);
  $8 = HEAP32[$7>>2]|0;
  ;HEAP32[$8>>2]=HEAP32[$2>>2]|0;HEAP32[$8+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$2+12>>2]|0;
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($9)) + 16|0);
  HEAP32[$7>>2] = $10;
  $11 = (($$0$i) + -1)|0;
  __ZNSt3__26vectorI20PropertyDecisionNodeNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($3);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIP9TransformI8BufferIOERNS_9allocatorIS4_EEEC2EjjS7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = HEAP32[$5>>2]|0;
 $10 = (0 - ($8))|0;
 $11 = (($9) + ($10<<2)|0);
 HEAP32[$5>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = $25 >> 2;
 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferIP9TransformI8BufferIOERNS_9allocatorIS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $scevgep$i$i$i = ((($4)) + -4|0);
  $6 = $scevgep$i$i$i;
  $7 = $2;
  $8 = (($6) - ($7))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep4$i$i$i = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep4$i$i$i;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorIP9TransformI8BufferIOENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEERNS_9allocatorIS7_EEEC2EjjSA_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS7_RS9_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 if (!($6)) {
  $$06$i = $4;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + -4|0);
   $9 = ((($$06$i)) + -4|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$9>>2] = 0;
   HEAP32[$8>>2] = $10;
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + -4|0);
   HEAP32[$5>>2] = $12;
   $13 = ($9|0)==($2|0);
   if ($13) {
    break;
   } else {
    $$06$i = $9;
   }
  }
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$5>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $23;
 $24 = HEAP32[$3>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE14__annotate_newEj($0,$27);
 return;
}
function __ZNSt3__214__split_bufferINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEERNS_9allocatorIS7_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -4|0);
   HEAP32[$3>>2] = $6;
   $8 = HEAP32[$6>>2]|0;
   HEAP32[$6>>2] = 0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $12 = HEAP32[$8>>2]|0;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    FUNCTION_TABLE_vi[$14 & 127]($8);
   }
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10|0)==($2|0);
   if ($11) {
    break;
   } else {
    $7 = $10;
   }
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 __ZdlPv($15);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrI9TransformI8BufferIOENS_14default_deleteIS4_EEEENS_9allocatorIS7_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNSt3__214__split_bufferINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEERNS_9allocatorIS6_EEEC2EjjS9_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 if (!($6)) {
  $$06$i = $4;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + -4|0);
   $9 = ((($$06$i)) + -4|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$9>>2] = 0;
   HEAP32[$8>>2] = $10;
   $11 = HEAP32[$5>>2]|0;
   $12 = ((($11)) + -4|0);
   HEAP32[$5>>2] = $12;
   $13 = ($9|0)==($2|0);
   if ($13) {
    break;
   } else {
    $$06$i = $9;
   }
  }
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$5>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$3>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($0)) + 8|0);
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$19>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $23;
 $24 = HEAP32[$3>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE14__annotate_newEj($0,$27);
 return;
}
function __ZNSt3__214__split_bufferINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEERNS_9allocatorIS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -4|0);
   HEAP32[$3>>2] = $6;
   $8 = HEAP32[$6>>2]|0;
   HEAP32[$6>>2] = 0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $12 = HEAP32[$8>>2]|0;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    FUNCTION_TABLE_vi[$14 & 127]($8);
   }
   $10 = HEAP32[$3>>2]|0;
   $11 = ($10|0)==($2|0);
   if ($11) {
    break;
   } else {
    $7 = $10;
   }
  }
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 __ZdlPv($15);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = $4 >> 2;
 $6 = (($1) + ($5<<2)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = $9 >> 2;
 $11 = (($1) + ($10<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = $5 >> 2;
 $7 = (($2) + ($6<<2)|0);
 $8 = (($2) + ($1<<2)|0);
 __ZNKSt3__26vectorINS_10unique_ptrIK11ColorRangesNS_14default_deleteIS3_EEEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($0,$2,$7,$7,$8);
 return;
}
function __ZN8RacInputI11RacConfig248BufferIOEC2ERS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 16777216;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = (__ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0)|0);
 $5 = HEAP32[$3>>2]|0;
 $6 = $5 | $4;
 $7 = $6 << 8;
 HEAP32[$3>>2] = $7;
 $8 = (__ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0)|0);
 $9 = HEAP32[$3>>2]|0;
 $10 = $9 | $8;
 $11 = $10 << 8;
 HEAP32[$3>>2] = $11;
 $12 = (__ZN8RacInputI11RacConfig248BufferIOE14read_catch_eofEv($0)|0);
 $13 = HEAP32[$3>>2]|0;
 $14 = $13 | $12;
 HEAP32[$3>>2] = $14;
 return;
}
function __ZN8MetaDataaSERKS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return ($0|0);
 }
 $3 = ((($0)) + 12|0);
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($3,$5,$7);
 return ($0|0);
}
function __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 24)&-1;
 $7 = (($2) + (($6*24)|0)|0);
 $8 = (($2) + (($1*24)|0)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = (($11|0) / 24)&-1;
 $13 = (($2) + (($12*24)|0)|0);
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$8,$13);
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE10deallocateEv($0) {
 $0 = $0|0;
 var $$cast = 0, $$cast$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 24)&-1;
 $$cast$i = $5;
 $$cast = $4;
 $8 = ($$cast|0)==($$cast$i|0);
 if (!($8)) {
  $10 = $$cast;
  while(1) {
   $9 = ((($10)) + -24|0);
   HEAP32[$3>>2] = $9;
   __ZN8MetaDataD2Ev($9);
   $11 = HEAP32[$3>>2]|0;
   $12 = ($11|0)==($$cast$i|0);
   if ($12) {
    break;
   } else {
    $10 = $11;
   }
  }
 }
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$7);
 $13 = HEAP32[$0>>2]|0;
 __ZdlPv($13);
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE6assignIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$cast$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $2;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$0>>2]|0;
 $9 = (($7) - ($8))|0;
 $10 = ($5>>>0)>($9>>>0);
 if ($10) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0);
  $29 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0)|0);
  $30 = ($29>>>0)<($5>>>0);
  if ($30) {
   __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $31 = HEAP32[$6>>2]|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = (($31) - ($32))|0;
  $34 = $29 >>> 1;
  $35 = ($33>>>0)<($34>>>0);
  $36 = $33 << 1;
  $37 = ($36>>>0)<($5>>>0);
  $$sroa$speculated$i = $37 ? $5 : $36;
  $$0$i = $35 ? $$sroa$speculated$i : $29;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEj($0,$$0$i);
  __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$5);
  return;
 }
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - ($8))|0;
 $14 = ($5>>>0)>($13>>>0);
 $15 = (($1) + ($13)|0);
 $$ = $14 ? $15 : $2;
 $16 = HEAP32[$0>>2]|0;
 $17 = $$;
 $18 = (($17) - ($4))|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  _memmove(($16|0),($1|0),($18|0))|0;
 }
 $20 = (($16) + ($18)|0);
 $21 = HEAP32[$11>>2]|0;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($21) - ($22))|0;
 if ($14) {
  $24 = (($5) - ($23))|0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$$,$2,$24);
  return;
 }
 $$cast$i = $21;
 $25 = ($$cast$i|0)==($20|0);
 if (!($25)) {
  $27 = $$cast$i;
  while(1) {
   $26 = ((($27)) + -1|0);
   $28 = ($26|0)==($20|0);
   if ($28) {
    break;
   } else {
    $27 = $26;
   }
  }
  HEAP32[$11>>2] = $26;
 }
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($0,$23);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($4,$0,$3);
 $5 = ((($0)) + 4|0);
 $6 = $2;
 $7 = $1;
 $8 = (($6) - ($7))|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = HEAP32[$5>>2]|0;
  _memcpy(($10|0),($1|0),($8|0))|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($8)|0);
  HEAP32[$5>>2] = $12;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($4);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($2) + ($5)|0);
 $7 = (($2) + ($1)|0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($$cast))|0;
 $11 = (($2) + ($10)|0);
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$2,$6,$7,$11);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0) {
 $0 = $0|0;
 var $$cast$i = 0, $$cast2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($4) - ($5))|0;
 $$cast$i = $5;
 $$cast2$i = $4;
 $7 = ($$cast2$i|0)==($$cast$i|0);
 if (!($7)) {
  $9 = $$cast2$i;
  while(1) {
   $8 = ((($9)) + -1|0);
   $10 = ($8|0)==($$cast$i|0);
   if ($10) {
    break;
   } else {
    $9 = $8;
   }
  }
  HEAP32[$3>>2] = $8;
 }
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($0,$6);
 $11 = HEAP32[$0>>2]|0;
 __ZdlPv($11);
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 41297762;
}
function __ZNSt3__214__split_bufferI5ImageRNS_9allocatorIS1_EEEC2EjjS4_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(41297762);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = ($1*104)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*104)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*104)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI5ImageNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 if (!($6)) {
  $$06$i = $4;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + -104|0);
   $9 = ((($$06$i)) + -104|0);
   __ZN5ImageC2EOS_($8,$9);
   $10 = HEAP32[$5>>2]|0;
   $11 = ((($10)) + -104|0);
   HEAP32[$5>>2] = $11;
   $12 = ($9|0)==($2|0);
   if ($12) {
    break;
   } else {
    $$06$i = $9;
   }
  }
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 104)&-1;
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferI5ImageRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -104|0);
   HEAP32[$3>>2] = $6;
   __ZN5ImageD2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($2|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 104)&-1;
 $6 = (($1) + (($5*104)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 104)&-1;
 $11 = (($1) + (($10*104)|0)|0);
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$6,$11,$6);
 return;
}
function __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE14__annotate_newEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 104)&-1;
 $7 = (($2) + (($6*104)|0)|0);
 $8 = (($2) + (($1*104)|0)|0);
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$7,$8);
 return;
}
function __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__214__split_bufferI8MetaDataRNS_9allocatorIS1_EEEC2EjjS4_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(178956970);
   if ($7) {
    $8 = (___cxa_allocate_exception(4)|0);
    __ZNSt9bad_allocC2Ev($8);
    ___cxa_throw(($8|0),(864|0),(63|0));
    // unreachable;
   } else {
    $9 = ($1*24)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*24)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*24)|0)|0);
 $16 = ((($0)) + 12|0);
 HEAP32[$16>>2] = $15;
 return;
}
function __ZNSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = ($4|0)==($2|0);
 if (!($6)) {
  $$06$i = $4;
  while(1) {
   $7 = HEAP32[$5>>2]|0;
   $8 = ((($7)) + -24|0);
   $9 = ((($$06$i)) + -24|0);
   __ZN8MetaDataC2EOS_($8,$9);
   $10 = HEAP32[$5>>2]|0;
   $11 = ((($10)) + -24|0);
   HEAP32[$5>>2] = $11;
   $12 = ($9|0)==($2|0);
   if ($12) {
    break;
   } else {
    $$06$i = $9;
   }
  }
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $14;
 HEAP32[$5>>2] = $13;
 $15 = ((($1)) + 8|0);
 $16 = HEAP32[$3>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 HEAP32[$3>>2] = $17;
 HEAP32[$15>>2] = $16;
 $18 = ((($0)) + 8|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$18>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$18>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 24)&-1;
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE14__annotate_newEj($0,$26);
 return;
}
function __ZNSt3__214__split_bufferI8MetaDataRNS_9allocatorIS1_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -24|0);
   HEAP32[$3>>2] = $6;
   __ZN8MetaDataD2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==($2|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($4|0) / 24)&-1;
 $6 = (($1) + (($5*24)|0)|0);
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($$cast))|0;
 $10 = (($9|0) / 24)&-1;
 $11 = (($1) + (($10*24)|0)|0);
 __ZNKSt3__26vectorI8MetaDataNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$1,$6,$11,$6);
 return;
}
function __ZN8MetaDataC2EOS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 $2 = ((($0)) + 12|0);
 $3 = ((($1)) + 12|0);
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($1)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = ((($1)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = $10;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$3>>2] = 0;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2ERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEj($0,$7);
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_j($0,$9,$10,$7);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE6resizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = ($5>>>0)<($1>>>0);
 if ($6) {
  $7 = (($1) - ($5))|0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEj($0,$7);
  return;
 }
 $8 = ($5>>>0)>($1>>>0);
 if (!($8)) {
  return;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + ($1)|0);
 $$cast$i = $3;
 $11 = ($$cast$i|0)==($10|0);
 if (!($11)) {
  $13 = $$cast$i;
  while(1) {
   $12 = ((($13)) + -1|0);
   $14 = ($12|0)==($10|0);
   if ($14) {
    break;
   } else {
    $13 = $12;
   }
  }
  HEAP32[$2>>2] = $12;
 }
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($0,$5);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE8__appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$sroa$speculated$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)<($1>>>0);
 if (!($8)) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEj($0,$1);
  STACKTOP = sp;return;
 }
 $9 = ((($0)) + 8|0);
 $10 = HEAP32[$5>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($10) - ($11))|0;
 $13 = (($12) + ($1))|0;
 $14 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0)|0);
 $15 = ($14>>>0)<($13>>>0);
 if ($15) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $16 = ((($0)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = (($17) - ($18))|0;
 $20 = $14 >>> 1;
 $21 = ($19>>>0)<($20>>>0);
 $22 = $19 << 1;
 $23 = ($22>>>0)<($13>>>0);
 $$sroa$speculated$i = $23 ? $13 : $22;
 $$0$i = $21 ? $$sroa$speculated$i : $14;
 $24 = HEAP32[$5>>2]|0;
 $25 = (($24) - ($18))|0;
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($2,$$0$i,$25,$9);
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEj($2,$1);
 __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0,$2);
 __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $$0 = $1;
 while(1) {
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($2,$0,1);
  $4 = HEAP32[$3>>2]|0;
  HEAP8[$4>>0] = 0;
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 1|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($2);
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__Znwj($1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1)|0);
 $13 = ((($0)) + 12|0);
 HEAP32[$13>>2] = $12;
 return;
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $$0 = $1;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  HEAP8[$3>>0] = 0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ((($4)) + 1|0);
  HEAP32[$2>>2] = $5;
  $6 = (($$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $$0 = $6;
  }
 }
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($0);
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 4|0);
 $6 = $2;
 $7 = (($4) - ($6))|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9)|0);
 HEAP32[$5>>2] = $10;
 $11 = ($7|0)>(0);
 if ($11) {
  _memcpy(($10|0),($2|0),($7|0))|0;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 HEAP32[$0>>2] = $13;
 HEAP32[$5>>2] = $12;
 $14 = ((($1)) + 8|0);
 $15 = HEAP32[$3>>2]|0;
 $16 = HEAP32[$14>>2]|0;
 HEAP32[$3>>2] = $16;
 HEAP32[$14>>2] = $15;
 $17 = ((($0)) + 8|0);
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$17>>2]|0;
 $20 = HEAP32[$18>>2]|0;
 HEAP32[$17>>2] = $20;
 HEAP32[$18>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$1>>2] = $21;
 $22 = HEAP32[$3>>2]|0;
 $23 = HEAP32[$0>>2]|0;
 $24 = (($22) - ($23))|0;
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE14__annotate_newEj($0,$24);
 return;
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($2|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($6|0)==($2|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $6;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($0) {
 $0 = $0|0;
 var $$cast = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $$cast = $1;
 $4 = (($3) - ($$cast))|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) - ($$cast))|0;
 $9 = (($1) + ($8)|0);
 __ZNKSt3__26vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($0,$1,$5,$9,$5);
 return;
}
function __Z8e_printfPKcz($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __Z12v_printf_ttyiPKcz($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __GLOBAL__sub_I_crc32k_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_76();
 ___cxx_global_var_init_1_77();
 return;
}
function ___cxx_global_var_init_76() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20flifEncodingOptionalC2Ev(38788);
 HEAP32[(38792)>>2] = 2;
 HEAP32[(38796)>>2] = 19;
 HEAP32[(38800)>>2] = 2;
 HEAP32[(38804)>>2] = -1;
 HEAP32[(38808)>>2] = 1;
 HEAP32[(38812)>>2] = 1;
 HEAP32[(38816)>>2] = 100;
 HEAP32[(38820)>>2] = 1;
 ;HEAP32[(38824)>>2]=0|0;HEAP32[(38824)+4>>2]=0|0;HEAP32[(38824)+8>>2]=0|0;HEAP32[(38824)+12>>2]=0|0;HEAP32[(38824)+16>>2]=0|0;HEAP32[(38824)+20>>2]=0|0;HEAP32[(38824)+24>>2]=0|0;HEAP32[(38824)+28>>2]=0|0;
 return;
}
function ___cxx_global_var_init_1_77() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN11CRC32KTableC2Ev(22404);
 return;
}
function __ZN11CRC32KTableC2Ev($0) {
 $0 = $0|0;
 var $$02835 = 0, $$03138 = 0, $$034 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond39 = 0, $exitcond41 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$03138 = 0;
 while(1) {
  $1 = $$03138 >>> 1;
  $2 = $$03138 & 1;
  $3 = (0 - ($2))|0;
  $4 = $3 & -306674912;
  $5 = $4 ^ $1;
  $6 = $5 >>> 1;
  $7 = $1 & 1;
  $8 = (0 - ($7))|0;
  $9 = $8 & -306674912;
  $10 = $9 ^ $6;
  $11 = $10 >>> 1;
  $12 = $6 & 1;
  $13 = (0 - ($12))|0;
  $14 = $13 & -306674912;
  $15 = $14 ^ $11;
  $16 = $15 >>> 1;
  $17 = $11 & 1;
  $18 = (0 - ($17))|0;
  $19 = $18 & -306674912;
  $20 = $19 ^ $16;
  $21 = $20 >>> 1;
  $22 = $16 & 1;
  $23 = (0 - ($22))|0;
  $24 = $23 & -306674912;
  $25 = $24 ^ $21;
  $26 = $25 >>> 1;
  $27 = $21 & 1;
  $28 = (0 - ($27))|0;
  $29 = $28 & -306674912;
  $30 = $29 ^ $26;
  $31 = $30 >>> 1;
  $32 = $26 & 1;
  $33 = (0 - ($32))|0;
  $34 = $33 & -306674912;
  $35 = $34 ^ $31;
  $36 = $35 >>> 1;
  $37 = $31 & 1;
  $38 = (0 - ($37))|0;
  $39 = $38 & -306674912;
  $40 = $39 ^ $36;
  $41 = (($0) + ($$03138<<2)|0);
  HEAP32[$41>>2] = $40;
  $42 = (($$03138) + 1)|0;
  $exitcond41 = ($42|0)==(256);
  if ($exitcond41) {
   $$02835 = 1;
   break;
  } else {
   $$03138 = $42;
  }
 }
 while(1) {
  $43 = (($$02835) + -1)|0;
  $$034 = 0;
  while(1) {
   $45 = ((($0) + ($43<<10)|0) + ($$034<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 >>> 8;
   $48 = $46 & 255;
   $49 = (($0) + ($48<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $47 ^ $50;
   $52 = ((($0) + ($$02835<<10)|0) + ($$034<<2)|0);
   HEAP32[$52>>2] = $51;
   $53 = (($$034) + 1)|0;
   $exitcond = ($53|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $$034 = $53;
   }
  }
  $44 = (($$02835) + 1)|0;
  $exitcond39 = ($44|0)==(16);
  if ($exitcond39) {
   break;
  } else {
   $$02835 = $44;
  }
 }
 return;
}
function __Z22crc32_16bytes_prefetchPKvjjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$055$lcssa = 0, $$05569 = 0, $$056$lcssa = 0, $$05668 = 0, $$06064 = 0, $$063 = 0, $$15766 = 0, $$15965 = 0, $$162 = 0, $$2$lcssa = 0, $$261 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $2 ^ -1;
 $5 = (($3) + 64)|0;
 $6 = ($5>>>0)>($1>>>0);
 if ($6) {
  $$055$lcssa = $1;$$056$lcssa = $4;$$lcssa = $0;
 } else {
  $$05569 = $1;$$05668 = $4;$9 = $0;
  while(1) {
   $8 = (($9) + ($3)|0);
   $$06064 = 0;$$15766 = $$05668;$$15965 = $9;
   while(1) {
    $12 = ((($$15965)) + 4|0);
    $13 = HEAP32[$$15965>>2]|0;
    $14 = $13 ^ $$15766;
    $15 = ((($$15965)) + 8|0);
    $16 = HEAP32[$12>>2]|0;
    $17 = ((($$15965)) + 12|0);
    $18 = HEAP32[$15>>2]|0;
    $19 = ((($$15965)) + 16|0);
    $20 = HEAP32[$17>>2]|0;
    $21 = $20 >>> 24;
    $22 = (22404 + ($21<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $20 >>> 16;
    $25 = $24 & 255;
    $26 = (23428 + ($25<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 ^ $23;
    $29 = $20 >>> 8;
    $30 = $29 & 255;
    $31 = (24452 + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $28 ^ $32;
    $34 = $20 & 255;
    $35 = (25476 + ($34<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $33 ^ $36;
    $38 = $18 >>> 24;
    $39 = (26500 + ($38<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $37 ^ $40;
    $42 = $18 >>> 16;
    $43 = $42 & 255;
    $44 = (27524 + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = $41 ^ $45;
    $47 = $18 >>> 8;
    $48 = $47 & 255;
    $49 = (28548 + ($48<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $46 ^ $50;
    $52 = $18 & 255;
    $53 = (29572 + ($52<<2)|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $51 ^ $54;
    $56 = $16 >>> 24;
    $57 = (30596 + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $55 ^ $58;
    $60 = $16 >>> 16;
    $61 = $60 & 255;
    $62 = (31620 + ($61<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $59 ^ $63;
    $65 = $16 >>> 8;
    $66 = $65 & 255;
    $67 = (32644 + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $64 ^ $68;
    $70 = $16 & 255;
    $71 = (33668 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $69 ^ $72;
    $74 = $14 >>> 24;
    $75 = (34692 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $73 ^ $76;
    $78 = $14 >>> 16;
    $79 = $78 & 255;
    $80 = (35716 + ($79<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $77 ^ $81;
    $83 = $14 >>> 8;
    $84 = $83 & 255;
    $85 = (36740 + ($84<<2)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $82 ^ $86;
    $88 = $14 & 255;
    $89 = (37764 + ($88<<2)|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $87 ^ $90;
    $92 = (($$06064) + 1)|0;
    $exitcond = ($92|0)==(4);
    if ($exitcond) {
     break;
    } else {
     $$06064 = $92;$$15766 = $91;$$15965 = $19;
    }
   }
   $scevgep = ((($9)) + 64|0);
   $10 = (($$05569) + -64)|0;
   $11 = ($10>>>0)<($5>>>0);
   if ($11) {
    $$055$lcssa = $10;$$056$lcssa = $91;$$lcssa = $scevgep;
    break;
   } else {
    $$05569 = $10;$$05668 = $91;$9 = $scevgep;
   }
  }
 }
 $7 = ($$055$lcssa|0)==(0);
 if ($7) {
  $$2$lcssa = $$056$lcssa;
  $104 = $$2$lcssa ^ -1;
  return ($104|0);
 } else {
  $$063 = $$lcssa;$$162 = $$055$lcssa;$$261 = $$056$lcssa;
 }
 while(1) {
  $93 = (($$162) + -1)|0;
  $94 = $$261 >>> 8;
  $95 = $$261 & 255;
  $96 = ((($$063)) + 1|0);
  $97 = HEAP8[$$063>>0]|0;
  $98 = $97&255;
  $99 = $98 ^ $95;
  $100 = (22404 + ($99<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $101 ^ $94;
  $103 = ($93|0)==(0);
  if ($103) {
   $$2$lcssa = $102;
   break;
  } else {
   $$063 = $96;$$162 = $93;$$261 = $102;
  }
 }
 $104 = $$2$lcssa ^ -1;
 return ($104|0);
}
function __Z10crc32_fastPKvjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__Z22crc32_16bytes_prefetchPKvjjj($0,$1,$2,256)|0);
 return ($3|0);
}
function __GLOBAL__sub_I_polyflif_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_82();
 ___cxx_global_var_init_1_83();
 return;
}
function ___cxx_global_var_init_82() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN20flifEncodingOptionalC2Ev(38876);
 HEAP32[(38880)>>2] = 2;
 HEAP32[(38884)>>2] = 19;
 HEAP32[(38888)>>2] = 2;
 HEAP32[(38892)>>2] = -1;
 HEAP32[(38896)>>2] = 1;
 HEAP32[(38900)>>2] = 1;
 HEAP32[(38904)>>2] = 100;
 HEAP32[(38908)>>2] = 1;
 ;HEAP32[(38912)>>2]=0|0;HEAP32[(38912)+4>>2]=0|0;HEAP32[(38912)+8>>2]=0|0;HEAP32[(38912)+12>>2]=0|0;HEAP32[(38912)+16>>2]=0|0;HEAP32[(38912)+20>>2]=0|0;HEAP32[(38912)+24>>2]=0|0;HEAP32[(38912)+28>>2]=0|0;
 return;
}
function ___cxx_global_var_init_1_83() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN38EmscriptenBindingInitializer_my_moduleC2Ev(0);
 return;
}
function __ZN38EmscriptenBindingInitializer_my_moduleC2Ev($0) {
 $0 = $0|0;
 var $$fca$1$gep$i = 0, $$fca$1$gep$i8 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = sp + 9|0;
 $3 = sp + 8|0;
 __ZN10emscripten8internal11NoBaseClass6verifyI8PolyFlifEEvv();
 $4 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterI8PolyFlifEEPFvvEv()|0);
 $5 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterI8PolyFlifEEPFvvEv()|0);
 $6 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 $7 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8PolyFlifEEE3getEv()|0);
 $8 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8PolyFlifEEE3getEv()|0);
 $9 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $10 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $13 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($6|0),($7|0),($8|0),($9|0),($10|0),(46|0),($11|0),($4|0),($12|0),($5|0),(8606|0),($13|0),(70|0));
 HEAP32[$1>>2] = (4);
 $$fca$1$gep$i = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i>>2] = 0;
 $14 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 $15 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getCountEv($2)|0);
 $16 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getTypesEv($2)|0);
 $17 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv()|0);
 $18 = (__ZN10emscripten8internal10getContextIM8PolyFlifFiiiiEEEPT_RKS5_($1)|0);
 __embind_register_class_function(($14|0),(8615|0),($15|0),($16|0),($17|0),(1|0),($18|0),0);
 HEAP32[$1>>2] = (5);
 $$fca$1$gep$i8 = ((($1)) + 4|0);
 HEAP32[$$fca$1$gep$i8>>2] = 0;
 $19 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 $20 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getCountEv($2)|0);
 $21 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getTypesEv($2)|0);
 $22 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv()|0);
 $23 = (__ZN10emscripten8internal10getContextIM8PolyFlifFiiiiEEEPT_RKS5_($1)|0);
 __embind_register_class_function(($19|0),(8626|0),($20|0),($21|0),($22|0),(1|0),($23|0),0);
 __ZN10emscripten4baseI8PolyFlifE6verifyI15PolyFlifWrapperEEvv();
 $24 = (__ZN10emscripten4baseI8PolyFlifE11getUpcasterI15PolyFlifWrapperEEPFPS1_PT_Ev()|0);
 $25 = (__ZN10emscripten4baseI8PolyFlifE13getDowncasterI15PolyFlifWrapperEEPFPT_PS1_Ev()|0);
 $26 = (__ZN10emscripten8internal6TypeIDI15PolyFlifWrapperE3getEv()|0);
 $27 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI15PolyFlifWrapperEEE3getEv()|0);
 $28 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK15PolyFlifWrapperEEE3getEv()|0);
 $29 = (__ZN10emscripten4baseI8PolyFlifE3getEv()|0);
 $30 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $31 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $32 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $33 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($26|0),($27|0),($28|0),($29|0),($30|0),(47|0),($31|0),($24|0),($32|0),($25|0),(8639|0),($33|0),(71|0));
 $34 = (__ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENKUlRS6_E_cvPFvSF_EEv($3)|0);
 $35 = (__ZN10emscripten15select_overloadIFvR15PolyFlifWrapperEEEPT_S5_($34)|0);
 HEAP32[$1>>2] = $35;
 $36 = (__ZN10emscripten8internal6TypeIDI15PolyFlifWrapperE3getEv()|0);
 $37 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvR15PolyFlifWrapperEE8getCountEv($2)|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvR15PolyFlifWrapperEE8getTypesEv($2)|0);
 $39 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $40 = (__ZN10emscripten8internal10getContextIPFvR15PolyFlifWrapperEEEPT_RKS6_($1)|0);
 __embind_register_class_function(($36|0),(8655|0),($37|0),($38|0),($39|0),(28|0),($40|0),0);
 $41 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 $42 = (__ZNK10emscripten8internal12WithPoliciesIJNS_17allow_raw_pointerINS_7ret_valEEEEE11ArgTypeListIJP15PolyFlifWrapperONS_3valEEE8getCountEv($1)|0);
 $43 = (__ZNK10emscripten8internal12WithPoliciesIJNS_17allow_raw_pointerINS_7ret_valEEEEE11ArgTypeListIJP15PolyFlifWrapperONS_3valEEE8getTypesEv($1)|0);
 $44 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 __embind_register_class_class_function(($41|0),(8675|0),($42|0),($43|0),($44|0),(33|0),(48|0));
 $45 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 $46 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKS4_EE8getCountEv($1)|0);
 $47 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKS4_EE8getTypesEv($1)|0);
 $48 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 __embind_register_class_class_function(($45|0),(8685|0),($46|0),($47|0),($48|0),(33|0),(34|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyI8PolyFlifEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterI8PolyFlifEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterI8PolyFlifEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI8PolyFlifE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI8PolyFlifEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP8PolyFlifE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK8PolyFlifEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK8PolyFlifE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9106|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9104|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9101|0);
}
function __ZN10emscripten8internal13getActualTypeI8PolyFlifEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI8PolyFlifEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI8PolyFlifEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN8PolyFlifD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN8PolyFlif10startCountEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$cast = 0, $$cast$i = 0, $$sroa$025$029 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4208|0;
 $4 = sp + 4192|0;
 $5 = sp + 4204|0;
 $6 = sp + 72|0;
 $7 = sp;
 HEAP32[$4>>2] = 0;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = 0;
 __ZN8BufferIOC2EiRK8PolyFlif($6,$1,$0);
 dest=$7; src=38876; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $10 = ((($7)) + 28|0);
 HEAP32[$10>>2] = 100;
 $11 = ((($7)) + 32|0);
 HEAP32[$11>>2] = 1;
 $12 = ((($7)) + 36|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($7)) + 40|0);
 HEAP32[$13>>2] = $3;
 $14 = $3 | $2;
 $15 = ($14|0)!=(0);
 $16 = $15&1;
 $17 = ((($7)) + 44|0);
 HEAP32[$17>>2] = $16;
 HEAP32[9714] = $0;
 $18 = ((($0)) + 4|0);
 $19 = (__Z11flif_decodeI8BufferIOEbRT_RNSt3__26vectorI5ImageNS3_9allocatorIS5_EEEEPFjixEiS9_R12flif_optionsR16metadata_options($6,$4,34,200,$18,$7,$5)|0);
 if (!($19)) {
  $$0 = 3;
  __ZN8BufferIOD2Ev($6);
  __ZNSt3__213__vector_baseI5ImageNS_9allocatorIS1_EEED2Ev($4);
  STACKTOP = sp;return ($$0|0);
 }
 __ZN8PolyFlif10showImagesERNSt3__26vectorI5ImageNS0_9allocatorIS2_EEEEb($0,$4,1);
 $20 = HEAP32[$4>>2]|0;
 $21 = HEAP32[$8>>2]|0;
 $22 = ($20|0)==($21|0);
 if (!($22)) {
  $$sroa$025$029 = $20;
  while(1) {
   __ZN5Image5clearEv($$sroa$025$029);
   $32 = ((($$sroa$025$029)) + 104|0);
   $33 = ($32|0)==($21|0);
   if ($33) {
    break;
   } else {
    $$sroa$025$029 = $32;
   }
  }
 }
 $23 = HEAP32[$8>>2]|0;
 $24 = HEAP32[$4>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 104)&-1;
 $$cast$i = $24;
 $$cast = $23;
 $27 = ($$cast|0)==($$cast$i|0);
 if (!($27)) {
  $29 = $$cast;
  while(1) {
   $28 = ((($29)) + -104|0);
   HEAP32[$8>>2] = $28;
   __ZN5ImageD2Ev($28);
   $30 = HEAP32[$8>>2]|0;
   $31 = ($30|0)==($$cast$i|0);
   if ($31) {
    break;
   } else {
    $29 = $30;
   }
  }
 }
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE17__annotate_shrinkEj($4,$26);
 HEAP32[9714] = 0;
 $$0 = 0;
 __ZN8BufferIOD2Ev($6);
 __ZNSt3__213__vector_baseI5ImageNS_9allocatorIS1_EEED2Ev($4);
 STACKTOP = sp;return ($$0|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9083|0);
}
function __ZN10emscripten8internal10getContextIM8PolyFlifFiiiiEEEPT_RKS5_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal13MethodInvokerIM8PolyFlifFiiiiEiPS2_JiiiEE6invokeERKS4_S5_iii($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = (__ZN10emscripten8internal11BindingTypeIP8PolyFlifE12fromWireTypeES3_($1)|0);
 $7 = $$unpack5 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack5 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $18 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $18 = $13;
 }
 $15 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $16 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($3)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($4)|0);
 $19 = (FUNCTION_TABLE_iiiii[$18 & 7]($8,$15,$16,$17)|0);
 HEAP32[$5>>2] = $19;
 $20 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($5)|0);
 STACKTOP = sp;return ($20|0);
}
function __ZN8PolyFlif12startPercentEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = +0, $11 = +0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = +0, $9 = +0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 63]($0)|0);
 $7 = ($1|0)==(0);
 if ($7) {
  $12 = -1;
 } else {
  $8 = (+($6|0));
  $9 = (+($1|0));
  $10 = $9 / +100;
  $11 = $10 * $8;
  $phitmp = (~~(($11)));
  $12 = $phitmp;
 }
 $13 = (__ZN8PolyFlif10startCountEiii($0,$12,$2,$3)|0);
 return ($13|0);
}
function __ZN10emscripten4baseI8PolyFlifE6verifyI15PolyFlifWrapperEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten4baseI8PolyFlifE11getUpcasterI15PolyFlifWrapperEEPFPS1_PT_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (49|0);
}
function __ZN10emscripten4baseI8PolyFlifE13getDowncasterI15PolyFlifWrapperEEPFPT_PS1_Ev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (50|0);
}
function __ZN10emscripten8internal6TypeIDI15PolyFlifWrapperE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI15PolyFlifWrapperE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerI15PolyFlifWrapperEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIP15PolyFlifWrapperE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIK15PolyFlifWrapperEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPK15PolyFlifWrapperE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten4baseI8PolyFlifE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDI8PolyFlifE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal13getActualTypeI15PolyFlifWrapperEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDI15PolyFlifWrapperEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14raw_destructorI15PolyFlifWrapperEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN10emscripten7wrapperI8PolyFlifED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENKUlRS6_E_cvPFvSF_EEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (72|0);
}
function __ZN10emscripten15select_overloadIFvR15PolyFlifWrapperEEEPT_S5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvR15PolyFlifWrapperEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvR15PolyFlifWrapperEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvR15PolyFlifWrapperEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9048|0);
}
function __ZN10emscripten8internal10getContextIPFvR15PolyFlifWrapperEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFvR15PolyFlifWrapperEvS3_JEE6invokeEPS5_PS2_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN10emscripten8internal18GenericBindingTypeI15PolyFlifWrapperE12fromWireTypeEPS2_($1)|0);
 FUNCTION_TABLE_vi[$2 & 127]($3);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_17allow_raw_pointerINS_7ret_valEEEEE11ArgTypeListIJP15PolyFlifWrapperONS_3valEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_17allow_raw_pointerINS_7ret_valEEEEE11ArgTypeListIJP15PolyFlifWrapperONS_3valEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI15PolyFlifWrapperEEONS_3valEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9025|0);
}
function __ZN10emscripten8internal7InvokerIP15PolyFlifWrapperJONS_3valEEE6invokeEPFS3_S5_EPNS0_7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIONS_3valEE12fromWireTypeEPNS0_7_EM_VALE($1)|0);
 HEAP32[$2>>2] = $3;
 $4 = (FUNCTION_TABLE_ii[$0 & 63]($2)|0);
 $5 = (__ZN10emscripten8internal11BindingTypeIP15PolyFlifWrapperE10toWireTypeES3_($4)|0);
 __ZN10emscripten3valD2Ev($2);
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten8internal11wrapped_newIP15PolyFlifWrapperS2_JNS_3valEEEET_DpOT1_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(24)|0);
 __ZN15PolyFlifWrapperC2IJEEEON10emscripten3valEDpOT_($1,$0);
 return ($1|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKS4_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKS4_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKS3_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8692|0);
}
function __ZN10emscripten8internal7InvokerINS_3valEJRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKS2_EE6invokeEPFS2_SB_SD_EPNS0_11BindingTypeIS9_EUt_EPNS0_7_EM_VALE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $3 = sp + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$1);
 $6 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($2)|0);
 HEAP32[$5>>2] = $6;
 $7 = (FUNCTION_TABLE_iii[$0 & 63]($4,$5)|0);
 HEAP32[$3>>2] = $7;
 $8 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 __ZN10emscripten3valD2Ev($5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return ($8|0);
}
function __ZN10emscripten8internal14wrapped_extendI15PolyFlifWrapperEENS_3valERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $4 ? $5 : $0;
 $7 = (__ZN10emscripten8internal6TypeIDI15PolyFlifWrapperE3getEv()|0);
 $8 = (__ZNK10emscripten3val12__get_handleEv($1)|0);
 $9 = (__embind_create_inheriting_constructor(($6|0),($7|0),($8|0))|0);
 $10 = (__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($9)|0);
 return ($10|0);
}
function __ZNK10emscripten3val12__get_handleEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($1,$0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$1>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$2,$3);
 return;
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$0>>2]|0;
 return ($2|0);
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_decref(($1|0));
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKS3_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2616|0);
}
function __ZN15PolyFlifWrapperC2IJEEEON10emscripten3valEDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten7wrapperI8PolyFlifEC2IJEEEONS_3valEDpOT_($0,$1);
 HEAP32[$0>>2] = (2636);
 return;
}
function __ZN10emscripten7wrapperI8PolyFlifEC2IJEEEONS_3valEDpOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 __ZN8PolyFlifC2Ev($0);
 $2 = ((($0)) + 16|0);
 __ZN10emscripten8internal11WrapperBaseC2Ev($2);
 HEAP32[$0>>2] = (2716);
 $3 = ((($0)) + 20|0);
 __ZN10emscripten3valC2EOS0_($3,$1);
 return;
}
function __ZNK15PolyFlifWrapper10bufGetSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK10emscripten7wrapperI8PolyFlifE4callIiJEEET_PKcDpOT0_($0,8915)|0);
 return ($1|0);
}
function __ZNK15PolyFlifWrapper10readBufferEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRiS4_S4_EEET_PKcDpOT0_($0,8904,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZNK15PolyFlifWrapper13prepareCanvasEii($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp + 4|0;
 $4 = sp;
 HEAP32[$3>>2] = $1;
 HEAP32[$4>>2] = $2;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRKiS5_EEET_PKcDpOT0_($0,8890,$3,$4);
 STACKTOP = sp;return;
}
function __ZNK15PolyFlifWrapper7showRowEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRiS4_S4_EEET_PKcDpOT0_($0,8882,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZNK15PolyFlifWrapper16finishCanvasDrawEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJEEET_PKcDpOT0_($0,8865);
 return;
}
function __ZNK15PolyFlifWrapper13finishLoadingEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJEEET_PKcDpOT0_($0,8851);
 return;
}
function __ZNK15PolyFlifWrapper13initAnimImageEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRiS4_S4_EEET_PKcDpOT0_($0,8837,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZNK15PolyFlifWrapper6putRowEiii($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$4>>2] = $1;
 HEAP32[$5>>2] = $2;
 HEAP32[$6>>2] = $3;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRiS4_S4_EEET_PKcDpOT0_($0,8830,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZNK15PolyFlifWrapper12finishAnimTxEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK10emscripten7wrapperI8PolyFlifE4callIvJEEET_PKcDpOT0_($0,8817);
 return;
}
function __ZNK10emscripten7wrapperI8PolyFlifE4callIvJEEET_PKcDpOT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($2,$1);
 return;
}
function __ZNK10emscripten3val4callIvJEEET_PKcDpOT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($2,$1);
 return;
}
function __ZN10emscripten8internal12MethodCallerIvJEE4callEPNS0_7_EM_VALEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = (__ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv()|0);
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($2);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($2)|0);
 __emval_call_void_method(($3|0),($0|0),($1|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[14088]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(14088)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (__ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv()|0);
   HEAP32[9715] = $4;
  }
 }
 $5 = HEAP32[9715]|0;
 return ($5|0);
}
function __ZN10emscripten8internal12WireTypePackIJEEC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $0;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($1);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal9SignatureIvJEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($0)|0);
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($0)|0);
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2672|0);
}
function __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRiS4_S4_EEET_PKcDpOT0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 20|0);
 __ZNK10emscripten3val4callIvJRiS2_S2_EEET_PKcDpOT0_($5,$1,$2,$3,$4);
 return;
}
function __ZNK10emscripten3val4callIvJRiS2_S2_EEET_PKcDpOT0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = HEAP32[$0>>2]|0;
 __ZN10emscripten8internal12MethodCallerIvJRiS2_S2_EE4callEPNS0_7_EM_VALEPKcS2_S2_S2_($5,$1,$2,$3,$4);
 return;
}
function __ZN10emscripten8internal12MethodCallerIvJRiS2_S2_EE4callEPNS0_7_EM_VALEPKcS2_S2_S2_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 $6 = (__ZN10emscripten8internal9SignatureIvJRiS2_S2_EE17get_method_callerEv()|0);
 __ZN10emscripten8internal12WireTypePackIJRiS2_S2_EEC2ES2_S2_S2_($5,$2,$3,$4);
 $7 = (__ZNK10emscripten8internal12WireTypePackIJRiS2_S2_EEcvPKvEv($5)|0);
 __emval_call_void_method(($6|0),($0|0),($1|0),($7|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRiS2_S2_EE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[14096]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(14096)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (__ZN10emscripten8internal9SignatureIvJRiS2_S2_EE18init_method_callerEv()|0);
   HEAP32[9716] = $4;
  }
 }
 $5 = HEAP32[9716]|0;
 return ($5|0);
}
function __ZN10emscripten8internal12WireTypePackIJRiS2_S2_EEC2ES2_S2_S2_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$4>>2] = $0;
 $5 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($4,$5);
 $6 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($4,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($4,$7);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRiS2_S2_EEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal9SignatureIvJRiS2_S2_EE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRiS4_S4_EE8getCountEv($0)|0);
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRiS4_S4_EE8getTypesEv($0)|0);
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRiS4_S4_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRiS4_S4_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRiS3_S3_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRiS3_S3_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2676|0);
}
function __ZNK10emscripten7wrapperI8PolyFlifE4callIvJRKiS5_EEET_PKcDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 __ZNK10emscripten3val4callIvJRKiS3_EEET_PKcDpOT0_($4,$1,$2,$3);
 return;
}
function __ZNK10emscripten3val4callIvJRKiS3_EEET_PKcDpOT0_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 __ZN10emscripten8internal12MethodCallerIvJRKiS3_EE4callEPNS0_7_EM_VALEPKcS3_S3_($4,$1,$2,$3);
 return;
}
function __ZN10emscripten8internal12MethodCallerIvJRKiS3_EE4callEPNS0_7_EM_VALEPKcS3_S3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = (__ZN10emscripten8internal9SignatureIvJRKiS3_EE17get_method_callerEv()|0);
 __ZN10emscripten8internal12WireTypePackIJRKiS3_EEC2ES3_S3_($4,$2,$3);
 $6 = (__ZNK10emscripten8internal12WireTypePackIJRKiS3_EEcvPKvEv($4)|0);
 __emval_call_void_method(($5|0),($0|0),($1|0),($6|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal9SignatureIvJRKiS3_EE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[14104]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(14104)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (__ZN10emscripten8internal9SignatureIvJRKiS3_EE18init_method_callerEv()|0);
   HEAP32[9717] = $4;
  }
 }
 $5 = HEAP32[9717]|0;
 return ($5|0);
}
function __ZN10emscripten8internal12WireTypePackIJRKiS3_EEC2ES3_S3_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $0;
 $4 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($3,$4);
 $5 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($2)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_($3,$5);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WireTypePackIJRKiS3_EEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal9SignatureIvJRKiS3_EE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKiS5_EE8getCountEv($0)|0);
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKiS5_EE8getTypesEv($0)|0);
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKiS5_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvRKiS5_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRKiS4_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvRKiS4_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2692|0);
}
function __ZNK10emscripten7wrapperI8PolyFlifE4callIiJEEET_PKcDpOT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = (__ZNK10emscripten3val4callIiJEEET_PKcDpOT0_($2,$1)|0);
 return ($3|0);
}
function __ZNK10emscripten3val4callIiJEEET_PKcDpOT0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZN10emscripten8internal12MethodCallerIiJEE4callEPNS0_7_EM_VALEPKc($2,$1)|0);
 return ($3|0);
}
function __ZN10emscripten8internal12MethodCallerIiJEE4callEPNS0_7_EM_VALEPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = +0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = sp + 12|0;
 $4 = sp + 8|0;
 $5 = (__ZN10emscripten8internal9SignatureIiJEE17get_method_callerEv()|0);
 __ZN10emscripten8internal12WireTypePackIJEEC2Ev($2);
 $6 = (__ZNK10emscripten8internal12WireTypePackIJEEcvPKvEv($2)|0);
 $7 = (+__emval_call_method(($5|0),($0|0),($1|0),($3|0),($6|0)));
 $8 = HEAP32[$3>>2]|0;
 __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($4,$8);
 $9 = (__ZN10emscripten8internal19fromGenericWireTypeIiEET_d($7)|0);
 __ZN10emscripten8internal17DestructorsRunnerD2Ev($4);
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal9SignatureIiJEE17get_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[14112]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire(14112)|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   $4 = (__ZN10emscripten8internal9SignatureIiJEE18init_method_callerEv()|0);
   HEAP32[9718] = $4;
  }
 }
 $5 = HEAP32[9718]|0;
 return ($5|0);
}
function __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal19fromGenericWireTypeIiEET_d($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd($0)|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($1)|0);
 return ($2|0);
}
function __ZN10emscripten8internal17DestructorsRunnerD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_run_destructors(($1|0));
 return;
}
function __ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (~~(($0)));
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal9SignatureIiJEE18init_method_callerEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($0)|0);
 $2 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($0)|0);
 $3 = (__emval_get_method_caller(($1|0),($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2704|0);
}
function __ZN8PolyFlifC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2760);
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZN10emscripten8internal11WrapperBaseC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 return;
}
function __ZN10emscripten3valC2EOS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZN10emscripten8internal11BindingTypeIONS_3valEE12fromWireTypeEPNS0_7_EM_VALE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIP15PolyFlifWrapperE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerI15PolyFlifWrapperEEONS_3valEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2796|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI15PolyFlifWrapperE12fromWireTypeEPS2_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvR15PolyFlifWrapperEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2804|0);
}
function __ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENUlRS6_E_8__invokeESF_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENKUlRS6_E_clESF_(0,$0);
 return;
}
function __ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENKUlRS6_E_clESF_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 16|0);
 __ZN10emscripten8internal11WrapperBase24setNotifyJSOnDestructionEb($2,1);
 return;
}
function __ZN10emscripten8internal11WrapperBase24setNotifyJSOnDestructionEb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&1;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZN10emscripten7wrapperI8PolyFlifED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2716);
 $1 = ((($0)) + 16|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  __ZNK10emscripten7wrapperI8PolyFlifE4callIvJEEET_PKcDpOT0_($0,9052);
 }
 $4 = ((($0)) + 20|0);
 __ZN10emscripten3valD2Ev($4);
 __ZN8PolyFlifD2Ev($0);
 return;
}
function __ZN8PolyFlifD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (2760);
 $1 = ((($0)) + 4|0);
 __ZNSt3__213__vector_baseI5ImageNS_9allocatorIS1_EEED2Ev($1);
 return;
}
function __ZN10emscripten8internal14getLightTypeIDI15PolyFlifWrapperEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK15PolyFlifWrapperE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (608|0);
}
function __ZN10emscripten8internal11LightTypeIDIP15PolyFlifWrapperE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (592|0);
}
function __ZN10emscripten8internal11LightTypeIDI15PolyFlifWrapperE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (528|0);
}
function __ZN10emscripten4baseI8PolyFlifE14convertPointerIS1_15PolyFlifWrapperEEPT0_PT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten4baseI8PolyFlifE14convertPointerI15PolyFlifWrapperS1_EEPT0_PT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIP8PolyFlifE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerI8PolyFlifEEiiiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (2812|0);
}
function __ZN8BufferIOC2EiRK8PolyFlif($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 16|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($0)) + 4114|0);
 HEAP16[$7>>1] = 4096;
 $8 = ((($0)) + 4116|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 63]($2)|0);
 HEAP32[$0>>2] = $11;
 return;
}
function __Z15previewCallbackix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(10000);
 if (!($3)) {
  $4 = HEAP32[9714]|0;
  __ZN8PolyFlif17showPreviewImagesEv($4);
 }
 $5 = $0 << 1;
 return ($5|0);
}
function __Z11flif_decodeI8BufferIOEbRT_RNSt3__26vectorI5ImageNS3_9allocatorIS5_EEEEPFjixEiS9_R12flif_optionsR16metadata_options($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (__Z11flif_decodeI8BufferIOEbRT_RNSt3__26vectorI5ImageNS3_9allocatorIS5_EEEEPFjixEiS9_R12flif_optionsR16metadata_optionsP9FLIF_INFO($0,$1,$2,$3,$4,$5,$6,0)|0);
 return ($7|0);
}
function __ZN8BufferIOD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN8PolyFlif10showImagesERNSt3__26vectorI5ImageNS0_9allocatorIS2_EEEEb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($4) - ($5))|0;
 $7 = (($6|0) / 104)&-1;
 $8 = ($7>>>0)>(1);
 if ($8) {
  __ZN8PolyFlif12transferAnimERNSt3__26vectorI5ImageNS0_9allocatorIS2_EEEE($0,$1);
 } else {
  $9 = HEAP32[$1>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZNK5Image4colsEv($9)|0);
  $14 = (__ZNK5Image4rowsEv($9)|0);
  FUNCTION_TABLE_viii[$12 & 1]($0,$13,$14);
  __ZN8PolyFlif14showImageQuickER5Image($0,$9);
 }
 if (!($2)) {
  return;
 }
 $15 = HEAP32[$0>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 FUNCTION_TABLE_vi[$17 & 127]($0);
 return;
}
function __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE17__annotate_shrinkEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$cast = $2;
 $5 = (($4) - ($$cast))|0;
 $6 = (($5|0) / 104)&-1;
 $7 = (($2) + (($6*104)|0)|0);
 $8 = (($2) + (($1*104)|0)|0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($$cast))|0;
 $12 = (($11|0) / 104)&-1;
 $13 = (($2) + (($12*104)|0)|0);
 __ZNKSt3__26vectorI5ImageNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($0,$2,$7,$8,$13);
 return;
}
function __ZN8PolyFlif12transferAnimERNSt3__26vectorI5ImageNS0_9allocatorIS2_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$06163 = 0, $$06264 = 0, $$066 = 0, $$alloca_mul = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($3) - ($4))|0;
 $6 = (($5|0) / 104)&-1;
 $$cast = $4;
 $7 = (__ZNK5Image4colsEv($$cast)|0);
 $8 = (__ZNK5Image4rowsEv($$cast)|0);
 $9 = $7 << 2;
 $10 = Math_imul($9, $8)|0;
 $$alloca_mul = $10;
 $11 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $12 = ($5|0)>(0);
 if (!($12)) {
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$18 & 127]($0);
  STACKTOP = sp;return;
 }
 $13 = ($8|0)>(0);
 $14 = ($7|0)>(0);
 $15 = $11;
 $$066 = 0;
 while(1) {
  $19 = HEAP32[$1>>2]|0;
  $20 = (($19) + (($$066*104)|0)|0);
  $21 = (__ZNK5Image9numPlanesEv($$cast)|0);
  $22 = HEAP32[$0>>2]|0;
  $23 = ((($22)) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_viiii[$24 & 15]($0,$$066,$7,$8);
  if ($13) {
   $25 = ($21|0)>(3);
   $$06264 = 0;
   while(1) {
    if ($14) {
     $$06163 = 0;
     while(1) {
      $32 = $$06163 << 2;
      $33 = (__ZNK5ImageclEijj($20,0,$$06264,$$06163)|0);
      $34 = $33&255;
      $35 = (($11) + ($32)|0);
      HEAP8[$35>>0] = $34;
      $36 = (__ZNK5ImageclEijj($20,1,$$06264,$$06163)|0);
      $37 = $36&255;
      $38 = $32 | 1;
      $39 = (($11) + ($38)|0);
      HEAP8[$39>>0] = $37;
      $40 = (__ZNK5ImageclEijj($20,2,$$06264,$$06163)|0);
      $41 = $40&255;
      $42 = $32 | 2;
      $43 = (($11) + ($42)|0);
      HEAP8[$43>>0] = $41;
      if ($25) {
       $44 = (__ZNK5ImageclEijj($20,3,$$06264,$$06163)|0);
       $45 = $44 << 16 >> 16;
       $47 = $45;
      } else {
       $47 = 255;
      }
      $46 = $47&255;
      $48 = $32 | 3;
      $49 = (($11) + ($48)|0);
      HEAP8[$49>>0] = $46;
      $50 = (($$06163) + 1)|0;
      $exitcond = ($50|0)==($7|0);
      if ($exitcond) {
       break;
      } else {
       $$06163 = $50;
      }
     }
    }
    $28 = HEAP32[$0>>2]|0;
    $29 = ((($28)) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    FUNCTION_TABLE_viiii[$30 & 15]($0,$$066,$$06264,$15);
    $31 = (($$06264) + 1)|0;
    $exitcond70 = ($31|0)==($8|0);
    if ($exitcond70) {
     break;
    } else {
     $$06264 = $31;
    }
   }
  }
  $26 = (($$066) + 1)|0;
  $27 = ($26|0)<($6|0);
  if ($27) {
   $$066 = $26;
  } else {
   break;
  }
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 127]($0);
 STACKTOP = sp;return;
}
function __ZN8PolyFlif14showImageQuickER5Image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05765 = 0, $$05864 = 0, $$066 = 0, $$alloca_mul = 0, $$in5963 = 0, $$in6062 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK5Image9numPlanesEv($1)|0);
 $3 = (__ZNK5Image4colsEv($1)|0);
 $4 = (__ZNK5Image4rowsEv($1)|0);
 $5 = $3 << 2;
 $$alloca_mul = $5;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0;;
 $7 = ($4|0)>(0);
 if (!($7)) {
  $13 = HEAP32[$0>>2]|0;
  $14 = ((($13)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  FUNCTION_TABLE_vi[$15 & 127]($0);
  STACKTOP = sp;return;
 }
 $8 = ($3|0)>(0);
 $9 = $6;
 $10 = ($2|0)>(1);
 $11 = ($2|0)==(2);
 $12 = ($2|0)>(3);
 $$066 = 0;
 while(1) {
  if ($8) {
   $$05765 = 0;$$05864 = 0;
   while(1) {
    $20 = (__ZNK5ImageclEijj($1,0,$$066,$$05765)|0);
    if ($10) {
     $22 = (__ZNK5ImageclEijj($1,1,$$066,$$05765)|0);
     $23 = $22 << 16 >> 16;
     if ($11) {
      $$in5963 = $23;$$in6062 = $23;$39 = 255;
     } else {
      $24 = (__ZNK5ImageclEijj($1,2,$$066,$$05765)|0);
      $25 = $24 << 16 >> 16;
      if ($12) {
       $26 = (__ZNK5ImageclEijj($1,3,$$066,$$05765)|0);
       $27 = $26&65535;
       $28 = $27 & 255;
       $$in5963 = $25;$$in6062 = $23;$39 = $28;
      } else {
       $$in5963 = $25;$$in6062 = $23;$39 = 255;
      }
     }
    } else {
     $21 = $20&65535;
     $$in5963 = $21;$$in6062 = $21;$39 = 255;
    }
    $29 = $20&255;
    $30 = $$05864 | 1;
    $31 = (($6) + ($$05864)|0);
    HEAP8[$31>>0] = $29;
    $32 = $$in6062&255;
    $33 = $$05864 | 2;
    $34 = (($6) + ($30)|0);
    HEAP8[$34>>0] = $32;
    $35 = $$in5963&255;
    $36 = $$05864 | 3;
    $37 = (($6) + ($33)|0);
    HEAP8[$37>>0] = $35;
    $38 = $39&255;
    $40 = (($$05864) + 4)|0;
    $41 = (($6) + ($36)|0);
    HEAP8[$41>>0] = $38;
    $42 = (($$05765) + 1)|0;
    $exitcond = ($42|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$05765 = $42;$$05864 = $40;
    }
   }
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_viiii[$18 & 15]($0,$$066,$9,$3);
  $19 = (($$066) + 1)|0;
  $exitcond68 = ($19|0)==($4|0);
  if ($exitcond68) {
   break;
  } else {
   $$066 = $19;
  }
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 FUNCTION_TABLE_vi[$15 & 127]($0);
 STACKTOP = sp;return;
}
function __ZN8PolyFlif17showPreviewImagesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 __ZN8PolyFlif10showImagesERNSt3__26vectorI5ImageNS0_9allocatorIS2_EEEEb($0,$1,0);
 return;
}
function __ZN10emscripten8internal14getLightTypeIDI8PolyFlifEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function __ZN10emscripten8internal11LightTypeIDIPK8PolyFlifE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (640|0);
}
function __ZN10emscripten8internal11LightTypeIDIP8PolyFlifE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (624|0);
}
function __ZN10emscripten8internal11LightTypeIDI8PolyFlifE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (576|0);
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_111();
 return;
}
function ___cxx_global_var_init_111() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(9121|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(9126|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc();
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(9131|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(9143|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(9176|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(9189|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(9205);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(9242);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(9281);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(9312);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(9352);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(9381);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(9419);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(9451);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(9484);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(9517);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(9551);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(9584);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 __embind_register_integer(($0|0),(10411|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 __embind_register_integer(($0|0),(10399|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 __embind_register_integer(($0|0),(10385|0),1,0,255);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 __embind_register_integer(($0|0),(10379|0),2,-32768,32767);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 __embind_register_integer(($0|0),(10364|0),2,0,65535);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 __embind_register_integer(($0|0),(10360|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 __embind_register_integer(($0|0),(10347|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 __embind_register_integer(($0|0),(10342|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 __embind_register_integer(($0|0),(10328|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 __embind_register_float(($0|0),(10322|0),4);
 return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 __embind_register_float(($0|0),(10315|0),8);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 __embind_register_memory_view(($0|0),0,(10128|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 __embind_register_memory_view(($1|0),0,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 __embind_register_memory_view(($1|0),1,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 __embind_register_memory_view(($1|0),2,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 __embind_register_memory_view(($1|0),3,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 __embind_register_memory_view(($1|0),4,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 __embind_register_memory_view(($1|0),5,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 __embind_register_memory_view(($0|0),4,(9881|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 __embind_register_memory_view(($0|0),5,(9811|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 __embind_register_memory_view(($0|0),6,(9749|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(9686|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(9618|0));
 return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (656|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (664|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (672|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (680|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (688|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (696|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (704|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (720|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (728|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (736|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (744|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (488|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (752|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (776|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (496|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1048|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1040|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1032|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1024|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1016|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1008|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1000|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (992|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (976|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (984|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (968|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (960|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (944|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___strdup($2)|0);
 return ($3|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[9736]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((73|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (0|0)==(0|0);
 if ($0) {
  $$0 = 38988;
 } else {
  $1 = (_pthread_self()|0);
  $2 = ((($1)) + 64|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (10416 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 10504;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 10504;
  } else {
   $$01113 = 10504;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = +0, $$0470$i = 0, $$0471$i = +0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = +0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = +0, $$1469$i = +0, $$1472$i = +0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = +0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = +0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = +0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = +0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = +0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = +0, $372 = 0, $373 = 0, $374 = 0, $375 = +0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = +0, $404 = +0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = +0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = +0, $424 = +0, $425 = +0, $426 = +0, $427 = +0, $428 = +0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = +0, $455 = +0, $456 = +0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = +0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = +0, $494 = +0, $495 = +0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = +0, $606 = +0, $607 = 0, $608 = +0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((12308 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_69($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 12788;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 12788;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 12788;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 12788 : (12790);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (12789);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 12788;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 12788;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 12798;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 12805;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (12806) : (12811);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (12808);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * +2;
      $405 = $404 != +0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = +8;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * +16;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (12772 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * +16;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == +0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != +0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * +268435456;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * +1.0E+9;
       $496 = $495 != +0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? +9007199254740992 : +9007199254740994;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = +0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? +1 : +1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(12840,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(12840,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 12824 : 12828;
      $391 = ($$0471$i != $$0471$i) | (+0 != +0);
      $392 = $389 ? 12832 : 12836;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 12788;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (12772 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (12788 + ($255)|0);
    $$332 = $or$cond282 ? 12788 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 12788;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_69($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 63]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_69($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = +0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = +0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = +0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = +0, $$016 = +0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = +0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = +0, $9 = +0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != +0;
  if ($7) {
   $8 = $0 * +1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 63]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((12843) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((12843) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (13099 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((12843) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((12843) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((12843) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((12843) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((12843) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((12843) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((12843) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((12843) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtox($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[9748]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (39032 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[9748] = $24;
     } else {
      $25 = HEAP32[(39008)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(39000)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (39032 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[9748] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(39008)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(39012)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (39032 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[9748] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(39008)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(39000)>>2] = $84;
     HEAP32[(39012)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(38996)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (39296 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(39008)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (39296 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(38996)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(39008)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(39008)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(39008)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(39012)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (39032 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[9748] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(39008)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(39000)>>2] = $$0191$i;
      HEAP32[(39012)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(38996)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (39296 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (39296 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(39000)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(39008)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (39296 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(38996)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(39008)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(39008)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(39008)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (39032 + ($425<<2)|0);
          $427 = HEAP32[9748]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[9748] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(39008)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (39296 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(38996)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(39008)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(39008)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(39000)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(39012)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(39012)>>2] = $511;
   HEAP32[(39000)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(39000)>>2] = 0;
   HEAP32[(39012)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(39004)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(39004)>>2] = $526;
  $527 = HEAP32[(39016)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(39016)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[9866]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(39472)>>2] = 4096;
  HEAP32[(39468)>>2] = 4096;
  HEAP32[(39476)>>2] = -1;
  HEAP32[(39480)>>2] = -1;
  HEAP32[(39484)>>2] = 0;
  HEAP32[(39436)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[9866] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(39472)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(39432)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(39424)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(39436)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(39016)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (39440);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(39468)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(39424)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(39432)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(39472)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(39436)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(39436)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(39424)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(39424)>>2] = $624;
  $625 = HEAP32[(39428)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(39428)>>2] = $624;
  }
  $627 = HEAP32[(39016)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(39008)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(39008)>>2] = $$748$i;
    }
    HEAP32[(39440)>>2] = $$748$i;
    HEAP32[(39444)>>2] = $$723947$i;
    HEAP32[(39452)>>2] = 0;
    $632 = HEAP32[9866]|0;
    HEAP32[(39028)>>2] = $632;
    HEAP32[(39024)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (39032 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(39016)>>2] = $646;
    HEAP32[(39004)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(39480)>>2]|0;
    HEAP32[(39020)>>2] = $652;
   } else {
    $$024370$i = (39440);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(39004)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(39016)>>2] = $676;
       HEAP32[(39004)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(39480)>>2]|0;
       HEAP32[(39020)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(39008)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(39008)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (39440);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (39440);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(39004)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(39004)>>2] = $724;
        HEAP32[(39016)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(39012)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(39000)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(39000)>>2] = $730;
         HEAP32[(39012)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (39032 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[9748]|0;
            $757 = $756 & $755;
            HEAP32[9748] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (39296 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(38996)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(38996)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(39008)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(39008)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(39008)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (39032 + ($834<<2)|0);
         $836 = HEAP32[9748]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[9748] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(39008)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (39296 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(38996)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(38996)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(39008)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(39008)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (39440);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(39016)>>2] = $944;
    HEAP32[(39004)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(39480)>>2]|0;
    HEAP32[(39020)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(39440)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(39440)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(39440)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(39440)+12>>2]|0;
    HEAP32[(39440)>>2] = $$748$i;
    HEAP32[(39444)>>2] = $$723947$i;
    HEAP32[(39452)>>2] = 0;
    HEAP32[(39448)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (39032 + ($965<<2)|0);
      $967 = HEAP32[9748]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[9748] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(39008)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (39296 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(38996)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(38996)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(39008)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(39008)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(39004)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(39004)>>2] = $1047;
   $1048 = HEAP32[(39016)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(39016)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(39008)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(39012)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(39000)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (39032 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[9748]|0;
     $38 = $37 & $36;
     HEAP32[9748] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (39296 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(38996)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(38996)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(39008)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(39008)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(39008)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(39016)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(39004)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(39004)>>2] = $123;
   HEAP32[(39016)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(39012)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(39012)>>2] = 0;
   HEAP32[(39000)>>2] = 0;
   return;
  }
  $128 = HEAP32[(39012)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(39000)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(39000)>>2] = $131;
   HEAP32[(39012)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (39032 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(39008)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[9748]|0;
     $155 = $154 & $153;
     HEAP32[9748] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(39008)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(39008)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(39008)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (39296 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(38996)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(38996)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(39008)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(39008)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(39008)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(39012)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(39000)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (39032 + ($236<<2)|0);
  $238 = HEAP32[9748]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[9748] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(39008)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (39296 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(38996)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(38996)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(39008)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(39008)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(39024)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(39024)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (39448);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(39024)>>2] = -1;
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13108|0),(13131|0),304,(13310|0));
 // unreachable;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $5 = $4;
 }
 return ($5|0);
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 3]();
 }
 return ($$lcssa|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 12|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3060);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13206|0),(13235|0),1183,(13310|0));
 // unreachable;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___assert_fail((13331|0),(13235|0),1194,(13360|0));
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $11 = $2&255;
  $12 = ((($0)) + 11|0);
  HEAP8[$12>>0] = $11;
  $13 = ($2|0)==(0);
  if ($13) {
   $$017 = $0;
  } else {
   $$016 = $0;
   label = 6;
  }
 } else {
  $5 = (($2) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  HEAP32[$0>>2] = $7;
  $8 = $6 | -2147483648;
  $9 = ((($0)) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 4|0);
  HEAP32[$10>>2] = $2;
  $$016 = $7;
  label = 6;
 }
 if ((label|0) == 6) {
  _memcpy(($$016|0),($1|0),($2|0))|0;
  $$017 = $$016;
 }
 $14 = (($$017) + ($2)|0);
 HEAP8[$14>>0] = 0;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$sroa$speculated = 0, $$sroa$speculated19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)<(0);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 } else {
  $10 = $6&255;
  $11 = $10;
 }
 $12 = ($11>>>0)<($1>>>0);
 $13 = ($4|0)==(-1);
 $or$cond = $13 | $12;
 if ($or$cond) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = (($11) - ($1))|0;
 $15 = ($14>>>0)<($2>>>0);
 $$sroa$speculated = $15 ? $14 : $2;
 if ($7) {
  $16 = HEAP32[$0>>2]|0;
  $18 = $16;
 } else {
  $18 = $0;
 }
 $17 = (($18) + ($1)|0);
 $19 = ($$sroa$speculated>>>0)>($4>>>0);
 $$sroa$speculated19 = $19 ? $4 : $$sroa$speculated;
 $20 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($17,$3,$$sroa$speculated19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ($$sroa$speculated>>>0)<($4>>>0);
  $$ = $19&1;
  $$$ = $22 ? -1 : $$;
  return ($$$|0);
 } else {
  return ($20|0);
 }
 return (0)|0;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 13517;
    _abort_message(13467,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[200]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 63](800,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($30)|0);
    HEAP32[$vararg_buffer>>2] = 13517;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(13381,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 13517;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(13426,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(13505,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_once((39488|0),(3|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[9873]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(13656,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[708]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = ($0|0)==($1|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,824,808,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 15]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if ($15) {
    $16 = ((($1)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==($2|0);
    if (!($18)) {
     $19 = ((($1)) + 20|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==($2|0);
     if (!($21)) {
      $24 = ((($1)) + 32|0);
      HEAP32[$24>>2] = $3;
      HEAP32[$19>>2] = $2;
      $25 = ((($1)) + 40|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 1)|0;
      HEAP32[$25>>2] = $27;
      $28 = ((($1)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       $31 = ((($1)) + 24|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ($32|0)==(2);
       if ($33) {
        $34 = ((($1)) + 54|0);
        HEAP8[$34>>0] = 1;
       }
      }
      $35 = ((($1)) + 44|0);
      HEAP32[$35>>2] = 4;
      break;
     }
    }
    $22 = ($3|0)==(1);
    if ($22) {
     $23 = ((($1)) + 32|0);
     HEAP32[$23>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 $20 = ($10|0)==($2|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 15]($2,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 15]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $49 = ((($0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = HEAP32[$50>>2]|0;
    $52 = ((($51)) + 24|0);
    $53 = HEAP32[$52>>2]|0;
    FUNCTION_TABLE_viiiii[$53 & 31]($50,$1,$2,$3,$4);
    break;
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($1)) + 52|0);
     HEAP8[$28>>0] = 0;
     $29 = ((($1)) + 53|0);
     HEAP8[$29>>0] = 0;
     $30 = ((($0)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $33 = ((($32)) + 20|0);
     $34 = HEAP32[$33>>2]|0;
     FUNCTION_TABLE_viiiiii[$34 & 15]($31,$1,$2,$2,1,$4);
     $35 = HEAP8[$29>>0]|0;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $$037$off039 = 0;
      label = 13;
     } else {
      $37 = HEAP8[$28>>0]|0;
      $not$ = ($37<<24>>24)==(0);
      if ($not$) {
       $$037$off039 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$19>>2] = $2;
       $38 = ((($1)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($39) + 1)|0;
       HEAP32[$38>>2] = $40;
       $41 = ((($1)) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ($42|0)==(1);
       if ($43) {
        $44 = ((($1)) + 24|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($45|0)==(2);
        if ($46) {
         $47 = ((($1)) + 54|0);
         HEAP8[$47>>0] = 1;
         if ($$037$off039) {
          label = 17;
          break;
         } else {
          $48 = 4;
          break;
         }
        }
       }
       if ($$037$off039) {
        label = 17;
       } else {
        $48 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $48 = 3;
     }
     HEAP32[$25>>2] = $48;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 15]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((39492|0),(74|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(13705,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[9873]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(13755,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 3]();
 _abort_message(13808,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[737]|0;HEAP32[737] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (13848|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + -4|0);
 $3 = HEAP32[$2>>2]|0;HEAP32[$2>>2] = (($3+-1)|0);
 $4 = (($3) + -1)|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + -12|0);
  __ZdlPv($7);
 }
 return;
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3060);
 $1 = ((($0)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = ($0|0)==($1|0);
 $7 = ($1|0)==(952|0);
 $$$i = $6 | $7;
 if ($$$i) {
  $$4 = 1;
 } else {
  $8 = ($1|0)==(0|0);
  if ($8) {
   $$4 = 0;
  } else {
   $9 = (___dynamic_cast($1,824,912,0)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$4 = 0;
   } else {
    $11 = ((($9)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($0)) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14 ^ -1;
    $16 = $12 & $15;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = ((($0)) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($9)) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     $23 = ($19|0)==(944|0);
     $or$cond = $23 | $22;
     if ($or$cond) {
      $$4 = 1;
     } else {
      $24 = ($19|0)==(0|0);
      if ($24) {
       $$4 = 0;
      } else {
       $25 = (___dynamic_cast($19,824,808,0)|0);
       $26 = ($25|0)==(0|0);
       if ($26) {
        $$4 = 0;
       } else {
        $27 = HEAP32[$20>>2]|0;
        $28 = ($27|0)==(0|0);
        if ($28) {
         $$4 = 0;
        } else {
         $29 = (___dynamic_cast($27,824,808,0)|0);
         $30 = ($29|0)==(0|0);
         if ($30) {
          $$4 = 0;
         } else {
          $31 = ((($3)) + 4|0);
          dest=$31; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
          HEAP32[$3>>2] = $29;
          $32 = ((($3)) + 8|0);
          HEAP32[$32>>2] = $25;
          $33 = ((($3)) + 12|0);
          HEAP32[$33>>2] = -1;
          $34 = ((($3)) + 48|0);
          HEAP32[$34>>2] = 1;
          $35 = HEAP32[$29>>2]|0;
          $36 = ((($35)) + 28|0);
          $37 = HEAP32[$36>>2]|0;
          $38 = HEAP32[$2>>2]|0;
          FUNCTION_TABLE_viiii[$37 & 15]($29,$3,$38,1);
          $39 = ((($3)) + 24|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = ($40|0)==(1);
          if ($41) {
           $42 = ((($3)) + 16|0);
           $43 = HEAP32[$42>>2]|0;
           HEAP32[$2>>2] = $43;
           $$0 = 1;
          } else {
           $$0 = 0;
          }
          $$4 = $$0;
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($0|0)==($7|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&255;
  $12 = ((($1)) + 53|0);
  $13 = ($10&65535) >>> 8;
  $14 = $13&255;
  $15 = ((($0)) + 16|0);
  $16 = ((($0)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($0)) + 16|0) + ($17<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$12>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($15,$1,$2,$3,$4,$5);
  $19 = ($17|0)>(1);
  L4: do {
   if ($19) {
    $20 = ((($0)) + 24|0);
    $21 = ((($1)) + 24|0);
    $22 = ((($0)) + 8|0);
    $23 = ((($1)) + 54|0);
    $$0 = $20;
    while(1) {
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if (!($25)) {
      break L4;
     }
     $26 = HEAP16[$9>>1]|0;
     $27 = $26&255;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $34 = ($26&65535)<(256);
      if (!($34)) {
       $35 = HEAP32[$22>>2]|0;
       $36 = $35 & 1;
       $37 = ($36|0)==(0);
       if ($37) {
        break L4;
       }
      }
     } else {
      $29 = HEAP32[$21>>2]|0;
      $30 = ($29|0)==(1);
      if ($30) {
       break L4;
      }
      $31 = HEAP32[$22>>2]|0;
      $32 = $31 & 2;
      $33 = ($32|0)==(0);
      if ($33) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$12>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $38 = ((($$0)) + 8|0);
     $39 = ($38>>>0)<($18>>>0);
     if ($39) {
      $$0 = $38;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $11;
  HEAP8[$12>>0] = $14;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($0|0)==($6|0);
 L1: do {
  if ($7) {
   $8 = ((($1)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==($2|0);
   if ($10) {
    $11 = ((($1)) + 28|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if (!($13)) {
     HEAP32[$11>>2] = $3;
    }
   }
  } else {
   $14 = HEAP32[$1>>2]|0;
   $15 = ($0|0)==($14|0);
   if (!($15)) {
    $62 = ((($0)) + 16|0);
    $63 = ((($0)) + 12|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (((($0)) + 16|0) + ($64<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($62,$1,$2,$3,$4);
    $66 = ((($0)) + 24|0);
    $67 = ($64|0)>(1);
    if (!($67)) {
     break;
    }
    $68 = ((($0)) + 8|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 2;
    $71 = ($70|0)==(0);
    if ($71) {
     $72 = ((($1)) + 36|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(1);
     if (!($74)) {
      $80 = $69 & 1;
      $81 = ($80|0)==(0);
      if ($81) {
       $84 = ((($1)) + 54|0);
       $$2 = $66;
       while(1) {
        $93 = HEAP8[$84>>0]|0;
        $94 = ($93<<24>>24)==(0);
        if (!($94)) {
         break L1;
        }
        $95 = HEAP32[$72>>2]|0;
        $96 = ($95|0)==(1);
        if ($96) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $97 = ((($$2)) + 8|0);
        $98 = ($97>>>0)<($65>>>0);
        if ($98) {
         $$2 = $97;
        } else {
         break L1;
        }
       }
      }
      $82 = ((($1)) + 24|0);
      $83 = ((($1)) + 54|0);
      $$1 = $66;
      while(1) {
       $85 = HEAP8[$83>>0]|0;
       $86 = ($85<<24>>24)==(0);
       if (!($86)) {
        break L1;
       }
       $87 = HEAP32[$72>>2]|0;
       $88 = ($87|0)==(1);
       if ($88) {
        $89 = HEAP32[$82>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $91 = ((($$1)) + 8|0);
       $92 = ($91>>>0)<($65>>>0);
       if ($92) {
        $$1 = $91;
       } else {
        break L1;
       }
      }
     }
    }
    $75 = ((($1)) + 54|0);
    $$0 = $66;
    while(1) {
     $76 = HEAP8[$75>>0]|0;
     $77 = ($76<<24>>24)==(0);
     if (!($77)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $78 = ((($$0)) + 8|0);
     $79 = ($78>>>0)<($65>>>0);
     if ($79) {
      $$0 = $78;
     } else {
      break L1;
     }
    }
   }
   $16 = ((($1)) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    $19 = ((($1)) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($2|0);
    if (!($21)) {
     $24 = ((($1)) + 32|0);
     HEAP32[$24>>2] = $3;
     $25 = ((($1)) + 44|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(4);
     if ($27) {
      break;
     }
     $28 = ((($0)) + 16|0);
     $29 = ((($0)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (((($0)) + 16|0) + ($30<<3)|0);
     $32 = ((($1)) + 52|0);
     $33 = ((($1)) + 53|0);
     $34 = ((($1)) + 54|0);
     $35 = ((($0)) + 8|0);
     $36 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $28;$$085$off0 = 0;
     L34: while(1) {
      $37 = ($$084>>>0)<($31>>>0);
      if (!($37)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      HEAP8[$32>>0] = 0;
      HEAP8[$33>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $38 = HEAP8[$34>>0]|0;
      $39 = ($38<<24>>24)==(0);
      if (!($39)) {
       $$283$off0 = $$081$off0;
       label = 20;
       break;
      }
      $40 = HEAP8[$33>>0]|0;
      $41 = ($40<<24>>24)==(0);
      do {
       if ($41) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $42 = HEAP8[$32>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if ($43) {
         $49 = HEAP32[$35>>2]|0;
         $50 = $49 & 1;
         $51 = ($50|0)==(0);
         if ($51) {
          $$283$off0 = 1;
          label = 20;
          break L34;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $44 = HEAP32[$36>>2]|0;
        $45 = ($44|0)==(1);
        if ($45) {
         label = 25;
         break L34;
        }
        $46 = HEAP32[$35>>2]|0;
        $47 = $46 & 2;
        $48 = ($47|0)==(0);
        if ($48) {
         label = 25;
         break L34;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $52 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $52;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 20) {
       if (!($$085$off0)) {
        HEAP32[$19>>2] = $2;
        $53 = ((($1)) + 40|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = (($54) + 1)|0;
        HEAP32[$53>>2] = $55;
        $56 = ((($1)) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($57|0)==(1);
        if ($58) {
         $59 = HEAP32[$36>>2]|0;
         $60 = ($59|0)==(2);
         if ($60) {
          HEAP8[$34>>0] = 1;
          if ($$283$off0) {
           label = 25;
           break;
          } else {
           $61 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 25;
       } else {
        $61 = 4;
       }
      }
     } while(0);
     if ((label|0) == 25) {
      $61 = 3;
     }
     HEAP32[$25>>2] = $61;
     break;
    }
   }
   $22 = ($3|0)==(1);
   if ($22) {
    $23 = ((($1)) + 32|0);
    HEAP32[$23>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($0|0)==($5|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 15]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 15]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$17,$20,$4);
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(1);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP8[$0>>0] = 1;
  $$0 = 1;
 }
 return ($$0|0);
}
function ___cxa_guard_release($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (3040);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9874]|0;HEAP32[9874] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
 } else {
  $2 = (___dynamic_cast($0,824,912,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $4 = $phitmp;
 }
 $3 = $4&1;
 return ($3|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
    $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
    $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
    $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
    $4$1 = tempRet0;
    $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
    $7$0 = $2$0 ^ $1$0;
    $7$1 = $2$1 ^ $1$1;
    $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
    $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
    return $10$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&3]();
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(1);
}
function b2(p0) {
 p0 = p0|0; abort(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(3);
}
function b4(p0) {
 p0 = p0|0; abort(4);return 0;
}
function b5(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);
}
function b6() {
 ; abort(6);
}
function ___cxa_pure_virtual__wrapper() {
 ; ___cxa_pure_virtual();
}
function b7(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(7);return 0;
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(8);
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(9);return 0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZN21TransformFrameCombineI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN21TransformFrameCombineI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZNK5PlaneIhE3getEjj,__ZNK5PlaneIhE8get_fastEjj,__ZNK13ConstantPlane3getEjj,__ZNK13ConstantPlane8get_fastEjj,__ZN9TransformI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN9TransformI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN17TransformFrameDupI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN17TransformFrameDupI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN19TransformFrameShapeI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN19TransformFrameShapeI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN17TransformPaletteCI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN17TransformPaletteCI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZNK5PlaneIsE3getEjj,__ZNK5PlaneIsE8get_fastEjj,__ZN17TransformPaletteAI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN17TransformPaletteAI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN16TransformPaletteI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN16TransformPaletteI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN11TransformCBI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN11TransformCBI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN16TransformPermuteI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN16TransformPermuteI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN15TransformBoundsI8BufferIOE4loadEPK11ColorRangesR10RacInput24IS0_E,__ZN15TransformBoundsI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,__ZN14TransformYCoCgI8BufferIOE4metaERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEEPK11ColorRanges,___stdio_write
,___stdio_seek,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZN10emscripten8internal7InvokerINS_3valEJRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKS2_EE6invokeEPFS2_SB_SD_EPNS0_11BindingTypeIS9_EUt_EPNS0_7_EM_VALE,__Z15previewCallbackix,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,__ZNK11ColorRanges6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK14DupColorRanges6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK13ColorRangesFC6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZN5PlaneIhE3setEijjs,__ZN13ConstantPlane3setEijjs,__ZN5PlaneIsE3setEijjs,__ZNK19ColorRangesPaletteC6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK19ColorRangesPaletteA6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK18ColorRangesPalette6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK13ColorRangesCB6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK26ColorRangesPermuteSubtract6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK17ColorRangesBounds6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK16ColorRangesYCoCg6minmaxEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,__ZN17StaticColorRangesD2Ev,__ZN17StaticColorRangesD0Ev,__ZN11ColorRangesD2Ev,__ZN11ColorRangesD0Ev,__ZN14DupColorRangesD0Ev,__ZN9TransformI8BufferIOED2Ev,__ZN21TransformFrameCombineI8BufferIOED0Ev,__ZN13ColorRangesFCD0Ev,__ZN5PlaneIhED2Ev,__ZN5PlaneIhED0Ev,__ZN5PlaneIhE15normalize_scaleEv,__ZN12GeneralPlaneD2Ev,__ZN12GeneralPlaneD0Ev,__ZN12GeneralPlane15normalize_scaleEv,__ZN13ConstantPlaneD0Ev,__ZN9TransformI8BufferIOED0Ev,__ZN17TransformFrameDupI8BufferIOED2Ev,__ZN17TransformFrameDupI8BufferIOED0Ev,__ZN19TransformFrameShapeI8BufferIOED2Ev,__ZN19TransformFrameShapeI8BufferIOED0Ev,__ZN17TransformPaletteCI8BufferIOED2Ev,__ZN17TransformPaletteCI8BufferIOED0Ev,__ZN5PlaneIsED2Ev,__ZN5PlaneIsED0Ev,__ZN5PlaneIsE15normalize_scaleEv,__ZN19ColorRangesPaletteCD0Ev,__ZN17TransformPaletteAI8BufferIOED2Ev,__ZN17TransformPaletteAI8BufferIOED0Ev
,__ZN19ColorRangesPaletteAD0Ev,__ZN16TransformPaletteI8BufferIOED2Ev,__ZN16TransformPaletteI8BufferIOED0Ev,__ZN18ColorRangesPaletteD0Ev,__ZN11TransformCBI8BufferIOED2Ev,__ZN11TransformCBI8BufferIOED0Ev,__ZN13ColorRangesCBD2Ev,__ZN13ColorRangesCBD0Ev,__ZN16TransformPermuteI8BufferIOED2Ev,__ZN16TransformPermuteI8BufferIOED0Ev,__ZN18ColorRangesPermuteD2Ev,__ZN18ColorRangesPermuteD0Ev,__ZN26ColorRangesPermuteSubtractD2Ev,__ZN26ColorRangesPermuteSubtractD0Ev,__ZN15TransformBoundsI8BufferIOED2Ev,__ZN15TransformBoundsI8BufferIOED0Ev,__ZN17ColorRangesBoundsD2Ev,__ZN17ColorRangesBoundsD0Ev,__ZN14TransformYCoCgI8BufferIOED0Ev,__ZN16ColorRangesYCoCgD0Ev,__ZN12PlaneVisitorD2Ev,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEED0Ev,__ZN12PlaneVisitorD0Ev,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneED0Ev,__ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesED0Ev,__ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesED0Ev,__ZNK15PolyFlifWrapper16finishCanvasDrawEv,__ZNK15PolyFlifWrapper13finishLoadingEv,__ZNK15PolyFlifWrapper12finishAnimTxEv,__ZN10__cxxabiv116__shim_type_infoD2Ev
,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10emscripten8internal14raw_destructorI8PolyFlifEEvPT_,__ZN10emscripten8internal14raw_destructorI15PolyFlifWrapperEEvPT_,__ZZNK10emscripten6class_I8PolyFlifNS_8internal11NoBaseClassEE14allow_subclassI15PolyFlifWrapperJEEERKS4_PKcNS_11constructorIJDpT0_EEEENUlRS6_E_8__invokeESF_,_cleanup,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,__ZN21TransformFrameCombineI8BufferIOE9configureEi,__ZNK21TransformFrameCombineI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZNK5PlaneIhE17prepare_zoomlevelEi,__ZN5PlaneIhE14accept_visitorER12PlaneVisitor,__ZNK13ConstantPlane17prepare_zoomlevelEi,__ZN13ConstantPlane14accept_visitorER12PlaneVisitor,__ZN9TransformI8BufferIOE9configureEi,__ZNK9TransformI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZN17TransformFrameDupI8BufferIOE9configureEi,__ZN19TransformFrameShapeI8BufferIOE9configureEi,__ZNK17TransformPaletteCI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZNK5PlaneIsE17prepare_zoomlevelEi,__ZN5PlaneIsE14accept_visitorER12PlaneVisitor,__ZN17TransformPaletteAI8BufferIOE9configureEi,__ZNK17TransformPaletteAI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZN16TransformPaletteI8BufferIOE9configureEi,__ZNK16TransformPaletteI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZNK16TransformPermuteI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZNK14TransformYCoCgI8BufferIOE7invDataERNSt3__26vectorI5ImageNS2_9allocatorIS4_EEEE,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEE5visitERS7_,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhEE5visitERS6_IsE,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneE5visitER5PlaneIhE,__ZN22scanline_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE13ConstantPlaneE5visitER5PlaneIsE,__ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS7_,__ZN22vertical_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS6_IsE,__ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS7_,__ZN24horizontal_plane_decoderI24FinalPropertySymbolCoderI15SimpleBitChance10RacInput24I8BufferIOELi10EE5PlaneIhE11ColorRangesE5visitERS6_IsE,__ZN10emscripten8internal15FunctionInvokerIPFvR15PolyFlifWrapperEvS3_JEE6invokeEPS5_PS2_
,b3,b3,b3];
var FUNCTION_TABLE_ii = [b4,__ZNK17StaticColorRanges9numPlanesEv,__ZNK11ColorRanges8isStaticEv,__ZNK11ColorRanges8previousEv,__ZNK14DupColorRanges9numPlanesEv,__ZNK14DupColorRanges8isStaticEv,__ZNK14DupColorRanges8previousEv,__ZN21TransformFrameCombineI8BufferIOE23undo_redo_during_decodeEv,__ZNK9TransformI8BufferIOE20is_palette_transformEv,__ZNK13ColorRangesFC9numPlanesEv,__ZNK13ColorRangesFC8isStaticEv,__ZNK13ColorRangesFC8previousEv,__ZNK12GeneralPlane11is_constantEv,__ZNK5PlaneIhE15bytes_per_pixelEv,__ZNK12GeneralPlane15bytes_per_pixelEv,__ZNK13ConstantPlane11is_constantEv,__ZN9TransformI8BufferIOE23undo_redo_during_decodeEv,__ZN17TransformFrameDupI8BufferIOE23undo_redo_during_decodeEv,__ZN19TransformFrameShapeI8BufferIOE23undo_redo_during_decodeEv,__ZNK5PlaneIsE15bytes_per_pixelEv,__ZNK19ColorRangesPaletteC9numPlanesEv,__ZNK19ColorRangesPaletteC8isStaticEv,__ZNK17TransformPaletteAI8BufferIOE20is_palette_transformEv,__ZNK19ColorRangesPaletteA9numPlanesEv,__ZNK19ColorRangesPaletteA8isStaticEv,__ZNK19ColorRangesPaletteA8previousEv,__ZNK16TransformPaletteI8BufferIOE20is_palette_transformEv,__ZNK18ColorRangesPalette9numPlanesEv,__ZNK18ColorRangesPalette8isStaticEv
,__ZNK18ColorRangesPalette8previousEv,__ZN11TransformCBI8BufferIOE23undo_redo_during_decodeEv,__ZNK13ColorRangesCB9numPlanesEv,__ZNK13ColorRangesCB8isStaticEv,__ZNK18ColorRangesPermute9numPlanesEv,__ZNK18ColorRangesPermute8isStaticEv,__ZNK26ColorRangesPermuteSubtract9numPlanesEv,__ZNK26ColorRangesPermuteSubtract8isStaticEv,__ZN15TransformBoundsI8BufferIOE23undo_redo_during_decodeEv,__ZNK17ColorRangesBounds9numPlanesEv,__ZNK17ColorRangesBounds8isStaticEv,__ZNK16ColorRangesYCoCg9numPlanesEv,__ZNK16ColorRangesYCoCg8isStaticEv,__ZNK15PolyFlifWrapper10bufGetSizeEv,___stdio_close,__ZNKSt9bad_alloc4whatEv,__ZNKSt13runtime_error4whatEv,__ZN10emscripten8internal13getActualTypeI8PolyFlifEEPKvPT_,__ZN10emscripten8internal13getActualTypeI15PolyFlifWrapperEEPKvPT_,__ZN10emscripten8internal11wrapped_newIP15PolyFlifWrapperS2_JNS_3valEEEET_DpOT1_,__ZN10emscripten4baseI8PolyFlifE14convertPointerI15PolyFlifWrapperS1_EEPT0_PT_,__ZN10emscripten4baseI8PolyFlifE14convertPointerIS1_15PolyFlifWrapperEEPT0_PT_,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_viii = [b5,__ZNK15PolyFlifWrapper13prepareCanvasEii];
var FUNCTION_TABLE_v = [b6,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev];
var FUNCTION_TABLE_iiiii = [b7,__ZNK5PlaneIhE3getEijj,__ZNK13ConstantPlane3getEijj,__ZNK5PlaneIsE3getEijj,__ZN8PolyFlif10startCountEiii,__ZN8PolyFlif12startPercentEiii,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,__ZNK11ColorRanges4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_,__ZNK14DupColorRanges4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_,__ZNK13ColorRangesFC4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_,__ZNK13ColorRangesCB4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_,__ZNK17ColorRangesBounds4snapEiRKNSt3__26vectorIsNS0_9allocatorIsEEEERsS7_S7_,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,__ZNK17StaticColorRanges3minEi,__ZNK17StaticColorRanges3maxEi,__ZNK14DupColorRanges3minEi,__ZNK14DupColorRanges3maxEi,__ZN9TransformI8BufferIOE4initEPK11ColorRanges,__ZNK13ColorRangesFC3minEi,__ZNK13ColorRangesFC3maxEi,__ZN5PlaneIhE13compute_crc32Ej,__ZN13ConstantPlane13compute_crc32Ej,__ZN17TransformPaletteCI8BufferIOE4initEPK11ColorRanges,__ZN5PlaneIsE13compute_crc32Ej,__ZNK19ColorRangesPaletteC3minEi,__ZNK19ColorRangesPaletteC3maxEi,__ZN17TransformPaletteAI8BufferIOE4initEPK11ColorRanges,__ZNK19ColorRangesPaletteA3minEi,__ZNK19ColorRangesPaletteA3maxEi,__ZN16TransformPaletteI8BufferIOE4initEPK11ColorRanges,__ZNK18ColorRangesPalette3minEi,__ZNK18ColorRangesPalette3maxEi,__ZN11TransformCBI8BufferIOE4initEPK11ColorRanges,__ZNK13ColorRangesCB3minEi,__ZNK13ColorRangesCB3maxEi,__ZN16TransformPermuteI8BufferIOE4initEPK11ColorRanges,__ZNK18ColorRangesPermute3minEi,__ZNK18ColorRangesPermute3maxEi,__ZNK26ColorRangesPermuteSubtract3minEi,__ZNK26ColorRangesPermuteSubtract3maxEi,__ZNK17ColorRangesBounds3minEi
,__ZNK17ColorRangesBounds3maxEi,__ZN14TransformYCoCgI8BufferIOE4initEPK11ColorRanges,__ZNK16ColorRangesYCoCg3minEi,__ZNK16ColorRangesYCoCg3maxEi,__ZN10emscripten8internal7InvokerIP15PolyFlifWrapperJONS_3valEEE6invokeEPFS3_S5_EPNS0_7_EM_VALE,__ZN10emscripten8internal14wrapped_extendI15PolyFlifWrapperEENS_3valERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEERKS3_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiii = [b10,__ZN10emscripten8internal13MethodInvokerIM8PolyFlifFiiiiEiPS2_JiiiEE6invokeERKS4_S5_iii];
var FUNCTION_TABLE_viiii = [b11,__ZN5PlaneIhE3setEjjs,__ZN5PlaneIhE8set_fastEjjs,__ZN13ConstantPlane3setEjjs,__ZN13ConstantPlane8set_fastEjjs,__ZN5PlaneIsE3setEjjs,__ZN5PlaneIsE8set_fastEjjs,__ZNK15PolyFlifWrapper10readBufferEiii,__ZNK15PolyFlifWrapper7showRowEiii,__ZNK15PolyFlifWrapper13initAnimImageEiii,__ZNK15PolyFlifWrapper6putRowEiii,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11];

  return { ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _bitshift64Ashr: _bitshift64Ashr, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, ___muldi3: ___muldi3, ___uremdi3: ___uremdi3, ___divdi3: ___divdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_self: _pthread_self, ___getTypeName: ___getTypeName, ___muldsi3: ___muldsi3, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _memset: _memset, __GLOBAL__sub_I_chance_cpp: __GLOBAL__sub_I_chance_cpp, __GLOBAL__sub_I_common_cpp: __GLOBAL__sub_I_common_cpp, __GLOBAL__sub_I_crc32k_cpp: __GLOBAL__sub_I_crc32k_cpp, __GLOBAL__sub_I_polyflif_cpp: __GLOBAL__sub_I_polyflif_cpp, __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var __GLOBAL__sub_I_chance_cpp = Module["__GLOBAL__sub_I_chance_cpp"] = asm["__GLOBAL__sub_I_chance_cpp"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __GLOBAL__sub_I_polyflif_cpp = Module["__GLOBAL__sub_I_polyflif_cpp"] = asm["__GLOBAL__sub_I_polyflif_cpp"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_crc32k_cpp = Module["__GLOBAL__sub_I_crc32k_cpp"] = asm["__GLOBAL__sub_I_crc32k_cpp"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var __GLOBAL__sub_I_common_cpp = Module["__GLOBAL__sub_I_common_cpp"] = asm["__GLOBAL__sub_I_common_cpp"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memset = Module["_memset"] = asm["_memset"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_i64Subtract","_memset","_bitshift64Shl","_i64Add","_llvm_cttz_i32","___udivmoddi4","___divdi3","_bitshift64Ashr","_bitshift64Lshr","_memcpy","___udivdi3","___muldsi3","___muldi3","_sbrk","_memmove","___uremdi3","_pthread_self"]


  var isAWorker = "undefined" !== typeof WorkerGlobalScope;

  function getCurrentScriptSrc() {
    var currScript = document.currentScript;
    if (currScript) {
      return currScript.src;
    } else {
      var scripts = document.getElementsByTagName("script");
      return scripts[scripts.length - 1].src;
    }
  }

  var currScriptSrc = isAWorker ? null : getCurrentScriptSrc();

  function DirectCanvasManager(canvas) {
    var animPlay = true;
    var animStarted = false;
    var nAnims = [];

    this["setRequestedDimensions"] = function(rw, rh) {
      this.rw = rw;
      this.rh = rh;
    }

    this["prepareCanvas"] = function(aw, ah) {
      var width = Math.max(this.rw, aw);
      if (canvas.width != width) {
        canvas.width = width;
      }
      var height = Math.max(this.rh, ah);
      if (canvas.height != height) {
        canvas.height = height;
      }

      if (!this.ctx) {
        this.ctx = canvas.getContext("2d");
      }
      this.imgData = this.ctx.getImageData(0,0,width,1);
      this.imgDataData = this.imgData.data;
    }

    this["showRow"] = function(row, data) {
      this.imgDataData.set(data, 0);
      this.ctx.putImageData(this.imgData, 0, row);
    }

    this["finish"] = function() {
      this.ctx = undefined;
      this.imgData = undefined;
      this.imgDataData = undefined;
    }

    this["initAnimImage"] = function(n, aw, ah) {
      var width = Math.max(this.rw, aw);
      var height = Math.max(this.rh, ah);

      if (n == 0) {
        if (canvas.width != width) {
          canvas.width = width;
        }
        if (canvas.height != height) {
          canvas.height = height;
        }

        this.animWidth = aw;
        // this.nAnims.height = height;
        if (!this.ctx) {
          this.ctx = canvas.getContext("2d");
        }
      }
      if (!nAnims[n]) {
        nAnims[n] = new ImageData(width, height);
      }
    }

    this["animPutRow"] = function(n, row, heap) {
      nAnims[n].data.set(heap, row * this.animWidth * 4);
    }

    this["animStartPlay"] = function() {
      if (animStarted) {
        return;
      }
      animStarted = true;

      var ctx = this.ctx;
      var currFrame = 0;
      var lastStep = 0;
      function step(now) {
        if (animPlay) {
          if ((now - lastStep) > 33) {
            ctx.putImageData(nAnims[currFrame], 0, 0);
            currFrame++;
            if (currFrame >= nAnims.length) {
              currFrame = 0;
            }
            lastStep = now;
          }
          window.requestAnimationFrame(step);
        } else {
          console.log("Stopping playback");
        }
      }
      window.requestAnimationFrame(step);
    }

    this["stop"] = function() {
      animPlay = false;
    }
  }

  function WorkerCanvasManager() {
    function replaceTypeArrays(args) {
      var arr = new Array(args.length);
      for (var i = 0; i < args.length; i++) {
        var e = args[i];
        if (e instanceof Uint8Array) {
          /* we wrap e in a new instance to avoid a performance bug in
           * chromium (the whole underlying array gets copied and doesn't get
           * garbage collected) */
          arr[i] = new Uint8Array(e);
        } else {
          arr[i] = e;
        }
      }
      return arr;
    }

    function send(name, args) {
      var arr = replaceTypeArrays(args);
      self.postMessage({type: name, args: arr});
    }

    this.setRequestedDimensions = function() { send("setRequestedDimensions", arguments); }
    this.prepareCanvas = function() { send("prepareCanvas", arguments); }
    this.showRow = function() { send("showRow", arguments); }
    this.finish = function() { send("finish", arguments); }

    this.initAnimImage = function(n, aw, ah) {
      if (n == 0) {
        this.animWidth = aw;
      }
      send("initAnimImage", arguments);
    }

    this.animPutRow = function() { send("animPutRow", arguments); }

    this.animStartPlay = function() { send("animStartPlay", arguments); }
  }


  var pfBase = {
    "beginCount": function(truncation, rw, rh) {
      this.cm["setRequestedDimensions"](rw, rh);
      this["startCount"](truncation, rw, rh);
    },

    "beginPercent": function(truncationPercent, rw, rh) {
      this.cm["setRequestedDimensions"](rw, rh);
      this["startPercent"](truncationPercent, rw, rh);
    },

    "stop": function() {
      this.cm["stop"]();
    },

    "loaded": function() {
      if (typeof this.options.onload == "function") {
        this.options.onload();
      }
    }

  }

  function pfProxyModule(options) {
    this.options = options;
    this.buf = options["buf"];
    var cm = new DirectCanvasManager(options["canvas"]);
    this.cm = cm;
    var module = this;
    this.worker = new Worker(currScriptSrc);
    this.worker.onmessage = function(m) {
      var data = m.data;
      if (data.type == "onload") {
        module.loaded();
        this.worker = undefined;
      } else {
        cm[data.type].apply(cm, data.args);
      }
    };
    this.worker.postMessage({type: "construct", "buf": new Uint8Array(options["buf"])});

    this["startCount"] = function() {
      var args = Array["from"](arguments);
      this.worker.postMessage({type: "startCount", args: args});
    }

    this["startPercent"] = function() {
      var args = Array["from"](arguments);
      this.worker.postMessage({type: "startPercent", args: args});
    }

    this["prepareCanvas"] = function() {
      var args = Array["from"](arguments);
      this.worker.postMessage({type: "prepareCanvas", args: args});
    }

    Object.assign(this, pfBase);
  }

  // Object.assign(pfProxyModule, pfBase);

  var pfModule = Module["PolyFlif"].extend("PolyFlif", Object.assign({
    "__construct": function(options) {
      this.options = options;
      this.buf = options["buf"];
      this["__parent"]["__construct"].call(this);
      this.cm = options["canvasMgr"] ? options["canvasMgr"] : new DirectCanvasManager(options["canvas"]);
    },

    // --------------------
    // called from C++ code
    "bufGetSize": function () {
      return this.buf.length;
    },

    "readBuffer": function(from, to, size) {
      var rem = Math.min(this.buf.length - from, size);
      var sub = this.buf.subarray(from, from + rem);
      Module["HEAPU8"].set(sub, to);
    },

    "prepareCanvas": function(aw, ah) {
      this.cm.prepareCanvas(aw, ah);
    },

    "showRow": function(row, dataPtr, width) {
      var data = Module["HEAPU8"].subarray(dataPtr, dataPtr + width*4);
      this.cm.showRow(row, data);
    },

    "finishCanvasDraw": function() {
      this.cm.finish();
    },

    "initAnimImage": function (n, aw, ah) {
      this.cm.initAnimImage(n, aw, ah);
    },

    "putRow": function (n, row, dataPtr) {
      var data = Module["HEAPU8"].subarray(dataPtr, dataPtr + (this.cm.animWidth * 4));
      this.cm.animPutRow(n, row, data);
    },

    "finishAnimTx": function() {
      this.cm.animStartPlay();
    },

    "finishLoading": function() {
      if (this.buf) {
        this.buf = undefined;
      }
      this.loaded(this.options);
    }
  }, pfBase));

  if (isAWorker) {
    var pf = null;
    function loadProxy() {
      self.postMessage({type:"onload"});
      self.close();
    }
    self.onmessage = function(m) {
      var data = m.data;
      if (data.type == "construct") {
        pf = new pfModule({"buf": data["buf"], "canvasMgr": new WorkerCanvasManager(), "onload": loadProxy});
      } else {
        pf[data.type].apply(pf, data.args);
      }
    }

  } else {
    // window["PolyFlif"] = pfModule;
    window["PolyFlif"] = pfProxyModule;

    document.addEventListener("DOMContentLoaded", function() {
      function load(src, bytes, andThen) {
        var xhr = new XMLHttpRequest();
        xhr.responseType = "arraybuffer";
        xhr.open("GET", src);
        if (bytes) {
          xhr.setRequestHeader('Range', 'bytes=0-' + bytes);
        }
        xhr.onload = function() {
          var content = bytes ? new Uint8Array(this.response, 0, Number.parseInt(bytes)) : new Uint8Array(this.response);
          andThen(content);
        };
        xhr.send();
      }

      function process(elem) {
        var src = elem.getAttribute("data-polyflif-src");
        // const wAttrib = elem.getAttribute("width");
        // const hAttrib = elem.getAttribute("height");
        var bytes = elem.getAttribute("data-polyflif-bytes");

        var cs = window.getComputedStyle(elem);
        var wAttrib = cs.width;
        var hAttrib = cs.height;
        var scaleRequested = elem.hasAttribute("data-polyflif-scale");
        var rw = scaleRequested && wAttrib.length > 0 ? Number.parseInt(wAttrib) : 0;
        var rh  = scaleRequested && hAttrib.length > 0 ? Number.parseInt(hAttrib) : 0;
        load(src, bytes, function(content) {
          setTimeout(function() {
            var pf = new PolyFlif({"buf": content, "canvas": elem});
            pf["beginCount"](-1, rw, rh);
          }, 1);
        });
      }

      function processBg(elem) {
        var src = elem.getAttribute("data-polyflif-bg-src");
        var bytes = elem.getAttribute("data-polyflif-bytes");
        var cElem = document.createElement("canvas");
        load(src, bytes, function(content) {
          function loaded() {
            cElem["toBlob"](function(blob) {
               elem.style.backgroundImage = "url('" + URL.createObjectURL(blob) + "')";
            }, 'image/png');
          }
          setTimeout(function() {
            var pf = new PolyFlif({"buf": content, "canvas": cElem, onload: loaded});
            pf["beginCount"](-1, 0, 0);
          }, 1);
        });
      }

      // Poly-fill for toBlob, inspired by MDN docs
      if (!HTMLCanvasElement.prototype.toBlob) {
        Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
          value: function (callback, type, quality) {

            var binStr = atob(this.toDataURL(type, quality).split(',')[1] ),
                len = binStr.length,
                arr = new Uint8Array(len);

            for (var i=0; i<len; i++ ) {
              arr[i] = binStr.charCodeAt(i);
            }

            callback( new Blob( [arr], {type: type || 'image/png'} ) );
          }
        });
      }

      var canvasElements = document.querySelectorAll("canvas[data-polyflif-src]");
      for (var i = 0; i < canvasElements.length; i++) {
        process(canvasElements[i]);
      }

      var bgElements = document.querySelectorAll("*[data-polyflif-bg-src]");
      for (var i = 0; i < bgElements.length; i++) {
        processBg(bgElements[i]);
      }
    });
  }

})();


